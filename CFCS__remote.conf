name: EPL-Remote v0.2

slots:
    core:
        class: CoreUnit
    warpdrive:
        class: WarpDriveUnit
    atmofueltank:
        class: AtmoFuelContainer
        select: manual
    spacefueltank:
        class: SpaceFuelContainer
        select: manual
    rocketfueltank:
        class: RocketFuelContainer
        select: manual
    shield:
        class: ShieldGeneratorUnit
    weapon:
        class: WeaponUnit
        select: manual
    radar:
        class: RadarPVPUnit
        select: manual
    db:
        class: DatabankUnit
        select: manual
handlers:
    unit:
        start:
            lua: |
                atlas = require("atlas")
                icons = require('autoconf/custom/CFCS_HUD/icons')
                local ok1 = pcall(require,'autoconf/custom/CFCS_HUD/functions')
                if not ok1 then
                system.print('Module "autoconf/custom/CFCS_HUD/functions.lua" not found!')
                unit.exit()
                end
                _stellarObjects = atlas[0]
                safeWorldPos = vec3({13771471,7435803,-128971})
                for slot_name, slot in pairs(unit) do
                if
                    type(slot) == "table"
                    and type(slot.export) == "table"
                    and slot.getElementClass
                then
                    if slot.getElementClass():lower():find("databank") then
                         db = slot
                    end
                end
                end
                increment = 5
                heightBetweenAngles = 30
                playerName = system.getPlayerName(unit.getMasterPlayerId())
                xDelta = -238
                yDelta = -108
                wheelDelta = -200
                mapScale = .99999
                planetScale = 1200
                aliothsize = 8000
                moonScale = 3000
                map = 0
                warpScan = 0
                targetList = ''
                pipelocalization = 1 --export: Pipe-localization: 1 - english, 2 - french, 3 - german
                function calcDistance(origCenter, destCenter, location)
                    local pipe = (destCenter - origCenter):normalize()
                    local r = (location-origCenter):dot(pipe) / pipe:dot(pipe)
                    if r <= 0. then
                       return (location-origCenter):len()
                    elseif r >= (destCenter - origCenter):len() then
                       return (location-destCenter):len()
                    end
                    local L = origCenter + (r * pipe)
                    pipeDistance =  (L - location):len()
                    
                    return pipeDistance
                end
                function calcDistanceStellar(stellarObjectOrigin, stellarObjectDestination, currenLocation)
                    local origCenter = vec3(stellarObjectOrigin.center)
                    local destCenter = vec3(stellarObjectDestination.center)
                    
                    return calcDistance(origCenter, destCenter, currenLocation)
                end
                refreshPipeData = function (currentLocation)
                    while true do
                        local smallestDistance = nil;
                        local nearestPlanet = nil;
                        
                        for obj in pairs(_stellarObjects) do
                            if (_stellarObjects[obj].type[1] == 'Planet' or _stellarObjects[obj].name[1] == 'Sanctuary') then
                                local planetCenter = vec3(_stellarObjects[obj].center)
                                local distance = vec3(currentLocation - planetCenter):len()
                                
                                if (smallestDistance == nil or distance < smallestDistance) then
                                    smallestDistance = distance;
                                    nearestPlanet = obj;
                                end
                            end
                        end
                        if showClosestPlanet == true then
                            planetInfoData.value = _stellarObjects[nearestPlanet].name[1]
                            system.updateData(planetInfoDataId, json.encode(planetInfoData))
                        end
                        if showClosestPipe == true or showClosestPipeDist == true or 
                                showAliothClosestPipe == true or showAliothClosestPipeDist == true then
                            closestPlanet = _stellarObjects[nearestPlanet]
                            nearestPipeDistance = nil
                            nearestAliothPipeDistance= nil
                            for obj in pairs(_stellarObjects) do
                                if (_stellarObjects[obj].type[1] == 'Planet' or _stellarObjects[obj].name[1] == 'Sanctuary') then
                                    for obj2 in pairs(_stellarObjects) do
                                        if (obj2 > obj and (_stellarObjects[obj2].type[1] == 'Planet' or _stellarObjects[obj2].name[1] == 'Sanctuary')) then
                                            pipeDistance = calcDistanceStellar(_stellarObjects[obj], _stellarObjects[obj2], currentLocation)
                                            if nearestPipeDistance == nil or pipeDistance < nearestPipeDistance then
                                                nearestPipeDistance = pipeDistance;
                                                sortestPipeKeyId = obj;
                                                sortestPipeKey2Id = obj2;
                                            end
                                            if _stellarObjects[obj].name[1] == "Alioth" and (nearestAliothPipeDistance == nil or pipeDistance < nearestAliothPipeDistance) then
                                                nearestAliothPipeDistance = pipeDistance;
                                                sortestAliothPipeKeyId = obj;
                                                sortestAliothPipeKey2Id = obj2;
                                            end
                                        end
                                    end
                                end
                            end
                            if showClosestPipe == true then
                                closestPipeData.value = _stellarObjects[sortestPipeKeyId].name[pipelocalization] .. " - " .. _stellarObjects[sortestPipeKey2Id].name[pipelocalization]
                                system.updateData(closestPipeDataId, json.encode(closestPipeData))
                            end
                            if showClosestPipeDist == true then
                                closestPipeDistData.value = string.format("%03.2f", nearestPipeDistance / 200000.0)
                                system.updateData(closestPipeDistDataId, json.encode(closestPipeDistData))
                            end
                            if showAliothClosestPipe == true then
                                closestAliothPipeData.value = _stellarObjects[sortestAliothPipeKeyId].name[pipelocalization] .. " - " .. _stellarObjects[sortestAliothPipeKey2Id].name[pipelocalization]
                                system.updateData(closestAliothPipeDataId, json.encode(closestAliothPipeData))
                            end
                            if showAliothClosestPipeDist == true then
                                closestAliothPipeDistData.value = string.format("%03.2f", nearestAliothPipeDistance / 200000.0)
                                system.updateData(closestAliothPipeDistDataId, json.encode(closestAliothPipeDistData))
                            end
                        end
                        currentLocation = coroutine.yield()
                    end
                end
                local panelName = "Pipe info"
                showClosestPlanet = true
                showClosestPipe = true
                showClosestPipeDist = true
                showAliothClosestPipe = false
                showAliothClosestPipeDist = false
                -- panel setup
                --panelid = system.createWidgetPanel(panelName)
                if showClosestPlanet == true then
                    -- closest planet
                    widgetClosestPlanetId = system.createWidget(panelid, "value")
                    planetInfoData = {
                        value = "XYZ", 
                        unit = "", 
                        label = "Closest planet"
                    }
                    planetInfoDataId = system.createData(json.encode(planetInfoData))
                    system.addDataToWidget(planetInfoDataId, widgetClosestPlanetId)
                end
                if showClosestPipe == true then
                    -- showClosestPipe
                    closestPipeId = system.createWidget(panelid, "value")
                    closestPipeData = {
                        value = "XYZ", 
                        unit = "",
                        label = "Closest Pipe"
                    }
                    closestPipeDataId = system.createData(json.encode(closestPipeData))
                    system.addDataToWidget(closestPipeDataId, closestPipeId)
                end
                if showClosestPipeDist == true then
                    -- showClosestPipeDist
                    closestPipeDistId = system.createWidget(panelid, "value")
                    closestPipeDistData = {
                        value = "0.0", 
                        unit = "SU",
                        label = "Pipe dist."
                    }
                    closestPipeDistDataId = system.createData(json.encode(closestPipeDistData))
                    system.addDataToWidget(closestPipeDistDataId, closestPipeDistId)
                end
                -- showClosestPipe
                closestAliothPipeId = system.createWidget(panelid, "value")
                closestAliothPipeData = {
                    value = "XYZ", 
                    unit = "",
                    label = "Alioth Pipe"
                }
                closestAliothPipeDataId = system.createData(json.encode(closestAliothPipeData))
                system.addDataToWidget(closestAliothPipeDataId, closestAliothPipeId)
                if showAliothClosestPipeDist == true then
                    -- showClosestPipeDist
                    closestAliothPipeDistId = system.createWidget(panelid, "value")
                    closestAliothPipeDistData = {
                        value = "0.0", 
                        unit = "SU",
                        label = "Alioth pipe dist."
                    }
                    closestAliothPipeDistDataId = system.createData(json.encode(closestAliothPipeDistData))
                    system.addDataToWidget(closestAliothPipeDistDataId, closestAliothPipeDistId)
                end
                refreshCoroutine = coroutine.create(refreshPipeData)
                coroutine.resume( refreshCoroutine, vec3(core.getConstructWorldPos()))
                pitchInput = 0
                rollInput = 0
                yawInput = 0
                brakeInput = 0
                Nav = Navigator.new(system, core, unit)
                Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal, {1000, 5000, 10000, 20000, 30000})
                Nav.axisCommandManager:setTargetGroundAltitude(4)
                if atmofueltank_size > 0 then
                    --_autoconf.displayCategoryPanel(atmofueltank, atmofueltank_size, "Atmo Fuel", "fuel_container")
                    if placeRadar then
                        --_autoconf.displayCategoryPanel(radar, radar_size, "Radar", "radar")
                        placeRadar = false
                    end
                end
                if spacefueltank_size > 0 then
                    --_autoconf.displayCategoryPanel(spacefueltank, spacefueltank_size, "Space Fuel", "fuel_container")
                    if placeRadar then
                        --_autoconf.displayCategoryPanel(radar, radar_size, "Radar", "radar")
                        placeRadar = false
                    end
                end
                _autoconf.displayCategoryPanel(rocketfueltank, rocketfueltank_size, "Rocket Fuel", "fuel_container")
                if placeRadar then -- We either have only rockets or no fuel tanks at all, uncommon for usual vessels
                    _autoconf.displayCategoryPanel(radar, radar_size, "Radar", "radar")
                    placeRadar = false
                end
                -- freeze the player in he is remote controlling the construct
                if Nav.control.isRemoteControlled() == 1 then
                    system.freeze(1)
                end
                -- landing gear
                -- make sure every gears are synchonized with the first
                gearExtended = (Nav.control.isAnyLandingGearExtended() == 1) -- make sure it's a lua boolean
                if gearExtended then
                    Nav.control.extendLandingGears()
                else
                    Nav.control.retractLandingGears()
                end
                    PlanetaryReference = require('autoconf/custom/CFCS_HUD/planetref')
                    galaxyReference = PlanetaryReference(atlas)
                    helios = galaxyReference[0]
                    closestPlanet1 = helios[helios:closestBody(core.getConstructWorldPos()).bodyId]
                    if db.getStringValue(15) ~= "" then
                    asteroidPOS = db.getStringValue(15)
                            else
                            asteroidPOS = ''
                            end
                                markerName = "Asteroid" --export:
                                if markerName == "" then markerName = "Asteroid" end
                                asteroidcoord = {}
                        if asteroidPOS ~= "" then
                        asteroidcoord = zeroConvertToWorldCoordinatesG(asteroidPOS,system)
                            else
                            asteroidcoord = {0,0,0}
                    end
                    safew=''
                    function pD()
                    pipeD = ''
                    if nearestPipeDistance > 100000 then
                      pipeD = ''..string.format('%0.2f', nearestPipeDistance/200000)..' su' 
                    elseif nearestPipeDistance > 1000 and nearestPipeDistance < 100000 then
                      pipeD = ''..string.format('%0.1f', nearestPipeDistance/1000)..' km'  
                    else
                      pipeD = ''..string.format('%0.0f', nearestPipeDistance)..' m'  
                    end
                        if nearestPipeDistance > 600000 then
                        return closestPipeData.value.. '<br>' .. '<greencolor1>'..pipeD..'</greencolor1>'
                            end
                        if nearestPipeDistance > 400000 and nearestPipeDistance < 600000 then
                        return closestPipeData.value.. '<br>' .. '<orangecolor>'..pipeD..'</orangecolor>'
                            end
                        if nearestPipeDistance < 400000 then
                        return closestPipeData.value.. '<br>' .. '<redcolor1>'..pipeD..'<redcolor1>'
                            end
                        end
                    bhelper = false
                    system.showHelper(0)
                    cPlan = ''
                    distS = ''
                    safetext=''
                    szsafe=true
                    distZ = 0
                    function safeZone()
                    end
                    tz1=0
                    tz2=0
                    varvw = 0
                    varvh = 0
                    varcombat=math.floor(core.getPvPTimer())
                    if varcombat > 0 then varcombat = 1 end
                    lalt=false
                    AMcolor = "#6affb1"
                    EMcolor = "#6affb1"
                    KIcolor = "#6affb1"
                    THcolor = "#6affb1"
                    Shield_1hit_Calibration = false
                    Shield_Auto_Calibration = false --export: (AUTO/MANUAL) shield mode
                    Shield_Calibration_Max = false --export: (MAX/EQ) calibration of the entire shield power by the largest resist based on DPM
                    Show_vanilla_shield_widget = false --export: show shield widget
                    Show_warp_widget = true --export: show warpdrive widget
                    Show_combatstress_widget = true --export: show CCS widget
                    Departure_export = 2 --export: Departure planet
                    Destination_export = 5 --export: Destination planet
                    collectgarbages = true --export:
                    local CFCS_Background_Color = "#142027" --export: Backgroung color CFCS system
                    local CFCS_PipeText_Color = "#FFFFFF" --export: Pipe text color
                    local CFCS_PipeY = -0.1 --export:
                    local CFCS_PipeX = 15.5 --export:
                    local CFCS_Y = 50 --export:
                    local CFCS_TextY = 12 --export:
                    local CFCS_RightBlock_X = 30 --export:
                    local CFCS_LeftBlock_X = 12 --export:
                    if Show_vanilla_shield_widget then shield.show() end
                    if Show_warp_widget then
                    if warpdrive ~= nil then warpdrive.show() end
                    end
                    if Show_combatstress_widget then
                    coreCombatStressPanelId = system.createWidgetPanel("Core combat stress")
                    coreCombatStressgWidgetId = system.createWidget(coreCombatStressPanelId,"core_stress")
                    system.addDataToWidget(core.getDataId(),coreCombatStressgWidgetId)
                    end
                    newhit=0
                    AM_rSH = 0
                    EM_rSH = 0
                    KI_rSH = 0
                    TH_rSH = 0
                    docki=0
                    data3 = shield.getStressRatio()
                    AM_rS1 = tonumber(data3[1])
                    EM_rS1 = tonumber(data3[2])
                    KI_rS1 = tonumber(data3[3])
                    TH_rS1 = tonumber(data3[4])
                    if AM_rS1 == 0.0 then AM_rS1 = 0 end
                    if AM_rS1 == 1.0 then AM_rS1 = 1 end
                    if EM_rS1 == 0.0 then EM_rS1 = 0 end
                    if EM_rS1 == 1.0 then EM_rS1 = 1 end
                    if KI_rS1 == 0.0 then KI_rS1 = 0 end
                    if KI_rS1 == 1.0 then KI_rS1 = 1 end
                    if TH_rS1 == 0.0 then TH_rS1 = 0 end
                    if TH_rS1 == 1.0 then TH_rS1 = 1 end
                    --system.print("start")
                    --system.print('AM_rS1 = '..AM_rS1)
                    --system.print('EM_rS1 = '..EM_rS1)
                    --system.print('KI_rS1 = '..KI_rS1)
                    --system.print('TH_rS1 = '..TH_rS1)
                    dpstimer = ""
                    resCLWN = ""
                    ventCLWN = ""
                    damageText = ""
                    AMval = 0
                    EMval = 0
                    KIval = 0
                    THval = 0
                    if Shield_Auto_Calibration
                        then
                        if Shield_Calibration_Max then
                    shieldText = "SHIELD (AUTO,MAX)"
                    end
                    
                    if not Shield_Calibration_Max then
                    shieldText = "SHIELD (AUTO,EQ)"
                    end
                        
                        else
                        
                    if Shield_Calibration_Max then
                    shieldText = "SHIELD (MANUAL,MAX)"
                    end
                    
                    if not Shield_Calibration_Max then
                    shieldText = "SHIELD (MANUAL,EQ)"
                    end
                        
                    end
                    
                brakeText = ""
                if shield.getState() == 0 then 
                    shieldColor = "#fc033d"
                else
                    shieldColor = "#2ebac9"
                    end
                resisttime = 0
                venttime = 0
                venttimemax = shield.getVentingMaxCooldown()
                resisttimemax = shield.getResistancesMaxCooldown()
                AM_r=0
                EM_r=0
                KI_r=0
                TH_r=0
                AM_rS=0
                EM_rS=0
                KI_rS=0
                TH_rS=0
                AM_rM=0
                EM_rM=0
                KI_rM=0
                TH_rM=0
                timeD=0
                timeF=62
                resMAX = 0.6
                tormoz=0
                manualTable = {}
                TEMPtable = {}
                DPMtable = {}
                DPStable = {}
                --top: ]]..varvh..[[vh;
                -- left: ]]..varvw..[[vw;
                shieldHP = 0
                shieldMaxHP = shield.getMaxShieldHitpoints()
                data2=shield.getResistances()
                AMres = math.floor((tonumber(data2[1]))/resMAX*100)
                EMres = math.floor((tonumber(data2[2]))/resMAX*100)
                KIres = math.floor((tonumber(data2[3]))/resMAX*100)
                THres = math.floor((tonumber(data2[4]))/resMAX*100)
                --Planet radar
                YScreenRes=system.getScreenHeight()
                XScreenRes=system.getScreenWidth()
                message=''
                DisplayRadar = false
                function drawonradar(coordonate,PlaneteName)
                                    local constructUp = vec3(core.getConstructWorldOrientationUp())
                                    local constructForward = vec3(core.getConstructWorldOrientationForward())
                                    local constructRight = vec3(core.getConstructWorldOrientationRight())
                                    local ConstructWorldPos = vec3(core.getConstructWorldPos())
                                    local ToCible=coordonate-ConstructWorldPos    
                                    local Xcoord = mySignedAngleBetween(ToCible, constructForward, constructUp)/math.pi --*RadarR
                                    local Ycoord = mySignedAngleBetween(ToCible, constructForward, constructRight)/math.pi --*RadarR+RadarY
                                    local XcoordR=Xcoord*math.sqrt(1-Ycoord*Ycoord/2)*RadarR+RadarX
                                    local YcoordR=Ycoord*math.sqrt(1-Xcoord*Xcoord/2)*RadarR+RadarY
                                    svgradar=svgradar..string.format([[
                                        <circle cx="%f" cy="%f" r="4" fill="red" />
                                        <text x="%f" y="%f" font-size="12px" fill="yellow">%s</text>
                                        ]],XcoordR,YcoordR,XcoordR+4,YcoordR,PlaneteName)
                                end
                        
                                function mySignedAngleBetween(vecteur1, vecteur2, planeNormal)
                                
                                  local normVec1 = vecteur1:project_on_plane(planeNormal):normalize()
                                  local normVec2 = vecteur2:normalize()
                                
                                  local angle = math.acos(normVec1:dot(normVec2))
                                  local crossProduct = vecteur1:cross(vecteur2)
                                
                                  if crossProduct:dot(planeNormal) < 0 then
                                    return -angle
                                  else
                                    return angle
                                  end
                                end
                    Planet = atlas[0]
                    DepartureCenter = vec3(Planet[Departure_export].center)
                    DestinationCenter = vec3(Planet[Destination_export].center)
                    DepartureCenterName = Planet[Departure_export].name[1]
                    DestinationCenterName = Planet[Destination_export].name[1]
                    unit.hide()
                    mybr=false
                    thr = [[
                                    <style> 
                                    .throt {
                                    color: white;
                                    position: fixed;
                                    font-family: Ebrima;
                                    font-size: 1.5em;              
                                    font-weight: bold;
                                    top: -0.2vh;
                                    right: 0.3vw;
                                    }
                    </style>]]
                    spd = [[
                                    <style> 
                                    .sped {
                                    color: white;
                                    position: fixed;
                                    font-family: Ebrima;
                                    font-size: 1.5em;              
                                    font-weight: bold;
                                    top: -0.2vh;
                                    right: 3.7vw;
                                    }</style>]]
                    html1 = [[
                                        <style> 
                                            .main1 {
                                        position: fixed;
                                        width: 13em; /* Ширина элемента в пикселах */
                                        padding: 1vh; /* Поля вокруг текста */
                                        top: 0vh;
                                        left: 50%;
                                        transform: translateX(-50%);
                                        text-align: center;
                                        background: #142027; /* Цвет фона */
                                        color: white;
                                        font-family: "Lucida" Grande, sans-serif;
                                        font-size: 1.5em;
                                        border-radius: 5vh;
                                            border: 0.2vh solid;
                                            border-color: orange;
                                        </style>
                                        <div class="main1">BRAKE ENGAGED</div>]]
                    dis=0
                    accel=0
                    resString = ""
                    streamtext2=""
                    thr1=""
                    throttle1=0
                    fuel1=0
                    system.showScreen(1)
                    hudang1 = [[
                                        <style> 
                                        .hudversion1 {
                                        position: fixed;
                                        top: 32vh;
                                        color: orange;
                                        left: 2vw;
                                        font-family: "Times New Roman", Times, serif;
                                        font-size: 1.1em;
                                        font-weight: bold;
                                        text-align: left;
                                        }</style>]]
                    hudang2 = [[
                                        <style> 
                                        .hudversion2 {
                                        position: fixed;
                                        top: 34vh;
                                        color: orange;
                                        left: 2vw;
                                        font-family: "Times New Roman", Times, serif;
                                        font-size: 1.1em;
                                        font-weight: bold;
                                        text-align: left;
                                        }</style>]]
                    function renderNiceHud()
                     local speed = math.floor(vec3(core.getWorldVelocity()):len() * 3.6)
                     --local accel = math.floor(vec3(core.getWorldAcceleration()):len())
                      
                         --local accel = math.floor((vec3(core.getWorldAcceleration()):len()/9.80665)*10)/10
                         --local accel = math.floor(vec3(core.getWorldAcceleration()):len()/9.80665)
                         
                        if lalt == true and newhit == 1 then
                            htmlm = [[
                    <style>
                       html, body {
                        margin: 0;
                        padding: 0;
                        background: transparent;
                        position: relative;
                       }
                       .telemetry {
                                    width: 100vw;
                        height: 100vh;
                        position: fixed;
                        top: ]]..CFCS_Y..[[vh;
                        right: ]]..CFCS_RightBlock_X..[[vw;
                        white-space:nowrap;
                           width: 400px;
                       }
                       .telemetry > div.numbers {
                        margin-bottom: 10px;
                        display: flex;
                        width: 100%;
                                        justify-content: flex-end;
                                         margin-bottom: 0px;
                       }
                       .telemetry > div.numbers > h2 {
                        font-size: 10px;
                        font-weight: 900;
                        margin-bottom:-3px;
                        text-align: left;
                        width: 60px;
                       }
                       .telemetry > div.numbers > div {
                        font-weight: 500;
                        font-size: 26px;
                        text-align: right;
                        color: #6affb1;
                                        margin-right: 4px;
                                        margin-top: ]]..CFCS_TextY..[[px;
                       }
                       .telemetry > div.numbers > h2 > span {
                        display:block;
                        font-size: 20px;
                       } 
                                
                                .telemetry2 {
                                    width: 100vw;
                        height: 100vh;
                        position: fixed;
                        top: ]]..CFCS_Y..[[vh;
                        left: ]]..CFCS_LeftBlock_X..[[vw;
                        white-space:nowrap;
                           width: 400px;
                       }
                       .telemetry2 > div.numbers2 {
                        margin-bottom: 10px;
                        display: flex;
                        width: 100%;
                                        justify-content: flex-end;
                                         margin-bottom: 0px;
                       }
                       .telemetry2 > div.numbers2 > h2 {
                        font-size: 10px;
                        font-weight: 900;
                        margin-bottom:-3px;
                        text-align: right;
                        width: 60px;
                       }
                       .telemetry2 > div.numbers2 > div {
                        font-weight: 500;
                        font-size: 26px;
                        text-align: right;
                        color: #6affb1;
                                        margin-right: -40.4px;
                                        margin-top: ]]..CFCS_TextY..[[px;
                       }
                       .telemetry2 > div.numbers2 > h2 > span {
                        display:block;
                        font-size: 20px;
                                    text-align: right;
                       }
                                     .shield
                                     {
                                     margin-left:403.2px;
                                     margin-top:-237.2px;
                                     }
                                            .fuel
                                     {
                                     margin-left:347px;
                                     margin-top:-104px;
                                     }
                                     orangecolor {
                                      color: orange;
                                    } 
                                     redcolor {
                                      color: #fc033d;
                                     }
                                     greencolor {
                                      color: #2ebac9;
                                     }
                                     amcolor {
                                      color: ]]..AMcolor..[[;
                                     }
                                     emcolor {
                                      color: ]]..EMcolor..[[;
                                     }
                                     
                                     kicolor {
                                      color: ]]..KIcolor..[[;
                                     }
                                     thcolor {
                                      color: ]]..THcolor..[[;
                                     }
                                     powercolor {
                                     font-size: 15px;
                                     color: #b6dfed;
                                     }
                                     .helper {
                        width: 18em; /* Ширина элемента в пикселах */
                        padding: 2px; /* Поля вокруг текста */
                        position:fixed;
                        top:6vh;
                        left:1vw;
                        text-align: left;
                        background:  #2C2F33; /* Цвет фона */
                        color: #FFFFFF;
                        font-family: "Times New Roman", Times, serif;
                        font-size: 0.9em;
                        border-radius: 5px;
                        border: 2px solid black;    
                                }
                             .safez {
                        width: auto; /* Ширина элемента в пикселах */
                        padding: 2px; /* Поля вокруг текста */
                        position:fixed;
                        top:-0.1vh;
                        right:0;
                        text-align: right;
                        color: #FFFFFF;
                        font-size: 1.2em;
                        font-weight: bold; 
                        background: ]]..CFCS_Background_Color..[[;
                        border: 0.2px solid black; 
                                }
                            .pipe {
                        width: 12em; /* Ширина элемента в пикселах */
                        padding: 2px; /* Поля вокруг текста */
                        position:fixed;
                        top: ]]..CFCS_PipeY..[[vh;
                        right: ]]..CFCS_PipeX..[[vw;
                        text-align: center;
                        color: ]]..CFCS_PipeText_Color..[[;
                        font-size: 1.2em;
                        font-weight: bold; 
                        background: ]]..CFCS_Background_Color..[[;
                        border: 0.2px solid black;  
                                }
                            redcolor1 {
                                      color: red;
                                     }
                                     greencolor1 {
                                      color: #6affb1;
                                     }
                      </style>
                       <div class="telemetry">
                                        <div class="numbers">
                         <div>]]..throttle1..[[</div>
                         <h2>THRUST<span>%</span></h2>
                        </div>
                        <div class="numbers">
                         <div>]]..speed..[[</div>
                         <h2>SPEED<span>Km/h</span></h2>
                        </div>
                        <div class="numbers">
                         <div>]]..accel..[[</div>
                         <h2>ACCEL<span>G</span></h2>
                        </div>
                        <div class="numbers">
                         <div>]]..resString..[[</div>
                         <h2>Brake-distance<span>]]..brakeText..[[</span></h2>
                        </div>
                       </div>
                       <div class="telemetry2">
                                        <div class="numbers2">
                                        <div><redcolor>]]..ventCLWN..[[</redcolor> <orangecolor>]]..resCLWN..[[</orangecolor> <greencolor>]]..dpstimer..[[</greencolor> ]]..shieldHP..[[</div>
                                              <h2>]]..shieldText..[[<span>%</span></h2>
                        </div>
                                        <div class="numbers2">
                                         <div>]]..fuel1..[[</div>
                         <h2>FUEL<span>%</span></h2>
                        </div>
                                        <div class="numbers2">
                                        <div>]]..AMres..[[<powercolor>PW </powercolor><amcolor>]]..AMval..[[</amcolor></div>
                         <h2>AM<span>%</span></h2>
                        </div>
                                        <div class="numbers2">
                                        <div>]]..EMres..[[<powercolor>PW </powercolor><emcolor>]]..EMval..[[</emcolor></div>
                         <h2>EM<span>%</span></h2>
                        </div>
                                        <div class="numbers2">
                                        <div>]]..KIres..[[<powercolor>PW </powercolor><kicolor>]]..KIval..[[</kicolor></div>
                         <h2>KI<span>%</span></h2>
                        </div>
                                         <div class="numbers2">
                                        <div>]]..THres..[[<powercolor>PW </powercolor><thcolor>]]..THval..[[</thcolor></div>
                         <h2>TH<span>%</span></h2>
                        </div>
                             <div class="shield">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100" fill="none" stroke="]]..shieldColor..[[" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round" class="feather feather-shield"><path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path></svg>
                    </div>
                            <div class="fuel">   
                     <svg viewBox="0 0 100 100" width="100" height="100" xmlns="http://www.w3.org/2000/svg">
                        <g fill="none" fill-rule="evenodd">
                            <path d="M68 63c3.038 0 5.5-2.493 5.5-5.567 0-2.05-1.833-5.861-5.5-11.433-3.667 5.572-5.5 9.383-5.5 11.433C62.5 60.507 64.962 63 68 63z" fill="#FFB12C"/>
                        </g>
                    </svg>
                    </div>
                       </div>
                    <div class="helper">
                    Option-1: set destination to departure planet<br>
                    Option-2: set destination to closest pipe<br>
                    Option-3: set destination to destination planet in LUA paramaters<br>
                    SHIFT + Option-1: set destination to departure planet<br>
                    SHIFT + Option-2: set destination to closest pipe between departure and destination planets in LUA paramaters<br>
                    SHIFT + Option-3: set destination to destination planet in LUA paramaters<br>
                    Option-4: 2D space radar<br>
                    Option-5: 3D map<br>
                    Option-6: set the shield resists manually based on the calculated DPM<br>
                    Option-7: (MAX/EQ) calibration of the entire shield power by the largest resist based on DPM<br>
                    Option-8: enable/disable shield<br>
                    SHIFT + Option-8: reset DPM calculation<br>
                    Option-9: start/stop shield ventilation<br>
                    SHIFT + L: set destination to POS from the map<br>
                    ALT + Space: show/hide locked targets on the radar widget<br>
                    ALT + C: enemies/friends on the radar widget<br>
                    <br>LUA commands:<br>
                    a - 100% shield power on AM resist<br>
                    e - 100% shield power on EM resist<br>
                    k - 100% of the shield power on the KI resist<br>
                    t - 100% shield power on TH resist<br>
                    mode - (AUTO/MANUAL) shield mode
                    m::pos - add position to the map<br>
                    safe - enable/disable notifications in the safe zone<br>
                    ang - enable/disable the angular velocity info<br>
                    drop - undock all constructs<br>
                    sw - show shield widget<br>
                    swd - show warpdrive widget<br>
                    sz - marker to the nearest safe zone<br>
                    szc - marker on the center of the safe zone<br>
                    helper - show/hide build helper<br>
                    <br>Profiles for resists 50/50%:<br> 
                    l - lasers<br>
                    c - cannons<br>
                    m - rockets<br>
                    r - railguns</div>
                        <div class="safez">]]..safetext..[[</div>
                        <div class="pipe">]]..pD()..[[</div>]]
                        
                        end
                        
                        if lalt == false and newhit == 1 then
                            htmlm = [[
                    <style>
                       html, body {
                        margin: 0;
                        padding: 0;
                        background: transparent;
                        position: relative;
                       }
                       .telemetry {
                                    width: 100vw;
                        height: 100vh;
                        position: fixed;
                        top: ]]..CFCS_Y..[[vh;
                        right: ]]..CFCS_RightBlock_X..[[vw;
                        white-space:nowrap;
                           width: 400px;
                       }
                       .telemetry > div.numbers {
                        margin-bottom: 10px;
                        display: flex;
                        width: 100%;
                                        justify-content: flex-end;
                                         margin-bottom: 0px;
                       }
                       .telemetry > div.numbers > h2 {
                        font-size: 10px;
                        font-weight: 900;
                        margin-bottom:-3px;
                        text-align: left;
                        width: 60px;
                       }
                       .telemetry > div.numbers > div {
                        font-weight: 500;
                        font-size: 26px;
                        text-align: right;
                        color: #6affb1;
                                        margin-right: 4px;
                                        margin-top: ]]..CFCS_TextY..[[px;
                       }
                       .telemetry > div.numbers > h2 > span {
                        display:block;
                        font-size: 20px;
                       } 
                                
                                .telemetry2 {
                                    width: 100vw;
                        height: 100vh;
                        position: fixed;
                        top: ]]..CFCS_Y..[[vh;
                        left: ]]..CFCS_LeftBlock_X..[[vw;
                        white-space:nowrap;
                           width: 400px;
                       }
                       .telemetry2 > div.numbers2 {
                        margin-bottom: 10px;
                        display: flex;
                        width: 100%;
                                        justify-content: flex-end;
                                         margin-bottom: 0px;
                       }
                       .telemetry2 > div.numbers2 > h2 {
                        font-size: 10px;
                        font-weight: 900;
                        margin-bottom:-3px;
                        text-align: right;
                        width: 60px;
                       }
                       .telemetry2 > div.numbers2 > div {
                        font-weight: 500;
                        font-size: 26px;
                        text-align: right;
                        color: #6affb1;
                                        margin-right: -40.4px;
                                        margin-top: ]]..CFCS_TextY..[[px;
                       }
                       .telemetry2 > div.numbers2 > h2 > span {
                        display:block;
                        font-size: 20px;
                                    text-align: right;
                       }
                                     .shield
                                     {
                                     margin-left:403.2px;
                                     margin-top:-237.2px;
                                     }
                                            .fuel
                                     {
                                     margin-left:347px;
                                     margin-top:-104px;
                                     }
                                     orangecolor {
                                      color: orange;
                                    } 
                                     redcolor {
                                      color: #fc033d;
                                     }
                                     greencolor {
                                      color: #2ebac9;
                                     }
                                     amcolor {
                                      color: ]]..AMcolor..[[;
                                     }
                                     emcolor {
                                      color: ]]..EMcolor..[[;
                                     }
                                     
                                     kicolor {
                                      color: ]]..KIcolor..[[;
                                     }
                                     thcolor {
                                      color: ]]..THcolor..[[;
                                     }
                                     powercolor {
                                     font-size: 15px;
                                     color: #b6dfed;
                                     }
                                     .helper {
                        width: 18em; /* Ширина элемента в пикселах */
                        padding: 2px; /* Поля вокруг текста */
                        position:fixed;
                        top:7vh;
                        left:1vw;
                        text-align: left;
                        background:  #2C2F33; /* Цвет фона */
                        color: #FFFFFF;
                        font-family: "Times New Roman", Times, serif;
                        font-size: 0.9em;
                        border-radius: 5px;
                        border: 2px solid black;    
                                }
                             .safez {
                        width: auto; /* Ширина элемента в пикселах */
                        padding: 2px; /* Поля вокруг текста */
                        position:fixed;
                        top:-0.1vh;
                        right:0;
                        text-align: right;
                        color: #FFFFFF;
                        font-size: 1.2em;
                        font-weight: bold;
                        background: ]]..CFCS_Background_Color..[[;
                        border: 0.2px solid black; 
                                }
                            .pipe {
                        width: 12em; /* Ширина элемента в пикселах */
                        padding: 2px; /* Поля вокруг текста */
                        position:fixed;
                        top: ]]..CFCS_PipeY..[[vh;
                        right: ]]..CFCS_PipeX..[[vw;
                        text-align: center;
                        color: ]]..CFCS_PipeText_Color..[[;
                        font-size: 1.2em;
                        font-weight: bold; 
                        background: ]]..CFCS_Background_Color..[[;
                        border: 0.2px solid black;  
                                }
                            redcolor1 {
                                      color: red;
                                     }
                                     greencolor1 {
                                      color: #6affb1;
                                     }
                      </style>
                       <div class="telemetry">
                                        <div class="numbers">
                         <div>]]..throttle1..[[</div>
                         <h2>THRUST<span>%</span></h2>
                        </div>
                        <div class="numbers">
                         <div>]]..speed..[[</div>
                         <h2>SPEED<span>Km/h</span></h2>
                        </div>
                        <div class="numbers">
                         <div>]]..accel..[[</div>
                         <h2>ACCEL<span>G</span></h2>
                        </div>
                        <div class="numbers">
                         <div>]]..resString..[[</div>
                         <h2>Brake-distance<span>]]..brakeText..[[</span></h2>
                        </div>
                       </div>
                       <div class="telemetry2">
                                        <div class="numbers2">
                                        <div><redcolor>]]..ventCLWN..[[</redcolor> <orangecolor>]]..resCLWN..[[</orangecolor> <greencolor>]]..dpstimer..[[</greencolor> ]]..shieldHP..[[</div>
                                              <h2>]]..shieldText..[[<span>%</span></h2>
                        </div>
                                        <div class="numbers2">
                                         <div>]]..fuel1..[[</div>
                         <h2>FUEL<span>%</span></h2>
                        </div>
                                        <div class="numbers2">
                                        <div>]]..AMres..[[<powercolor>PW </powercolor><amcolor>]]..AMval..[[</amcolor></div>
                         <h2>AM<span>%</span></h2>
                        </div>
                                        <div class="numbers2">
                                        <div>]]..EMres..[[<powercolor>PW </powercolor><emcolor>]]..EMval..[[</emcolor></div>
                         <h2>EM<span>%</span></h2>
                        </div>
                                        <div class="numbers2">
                                        <div>]]..KIres..[[<powercolor>PW </powercolor><kicolor>]]..KIval..[[</kicolor></div>
                         <h2>KI<span>%</span></h2>
                        </div>
                                         <div class="numbers2">
                                        <div>]]..THres..[[<powercolor>PW </powercolor><thcolor>]]..THval..[[</thcolor></div>
                         <h2>TH<span>%</span></h2>
                        </div>
                             <div class="shield">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100" fill="none" stroke="]]..shieldColor..[[" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round" class="feather feather-shield"><path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path></svg>
                    </div>
                            <div class="fuel">   
                     <svg viewBox="0 0 100 100" width="100" height="100" xmlns="http://www.w3.org/2000/svg">
                        <g fill="none" fill-rule="evenodd">
                            <path d="M68 63c3.038 0 5.5-2.493 5.5-5.567 0-2.05-1.833-5.861-5.5-11.433-3.667 5.572-5.5 9.383-5.5 11.433C62.5 60.507 64.962 63 68 63z" fill="#FFB12C"/>
                        </g>
                    </svg>
                    </div>
                       </div>
                            <div class="safez">]]..safetext..[[</div>
                            <div class="pipe">]]..pD()..[[</div>]]
                            
                        end
                        
                        if lalt == true and newhit == 0 then
                            htmlm = [[
                    <style>
                       html, body {
                        margin: 0;
                        padding: 0;
                        background: transparent;
                        position: relative;
                       }
                       .telemetry {
                                    width: 100vw;
                        height: 100vh;
                        position: fixed;
                        top: ]]..CFCS_Y..[[vh;
                        right: ]]..CFCS_RightBlock_X..[[vw;
                        white-space:nowrap;
                           width: 400px;
                       }
                       .telemetry > div.numbers {
                        margin-bottom: 10px;
                        display: flex;
                        width: 100%;
                                        justify-content: flex-end;
                                         margin-bottom: 0px;
                       }
                       .telemetry > div.numbers > h2 {
                        font-size: 10px;
                        font-weight: 900;
                        margin-bottom:-3px;
                        text-align: left;
                        width: 60px;
                       }
                       .telemetry > div.numbers > div {
                        font-weight: 500;
                        font-size: 26px;
                        text-align: right;
                        color: #6affb1;
                                        margin-right: 4px;
                                        margin-top: ]]..CFCS_TextY..[[px;
                       }
                       .telemetry > div.numbers > h2 > span {
                        display:block;
                        font-size: 20px;
                       } 
                                
                                .telemetry2 {
                                    width: 100vw;
                        height: 100vh;
                        position: fixed;
                        top: ]]..CFCS_Y..[[vh;
                        left: ]]..CFCS_LeftBlock_X..[[vw;
                        white-space:nowrap;
                           width: 400px;
                       }
                       .telemetry2 > div.numbers2 {
                        margin-bottom: 10px;
                        display: flex;
                        width: 100%;
                                        justify-content: flex-end;
                                         margin-bottom: 0px;
                       }
                       .telemetry2 > div.numbers2 > h2 {
                        font-size: 10px;
                        font-weight: 900;
                        margin-bottom:-3px;
                        text-align: right;
                        width: 60px;
                       }
                       .telemetry2 > div.numbers2 > div {
                        font-weight: 500;
                        font-size: 26px;
                        text-align: right;
                        color: #6affb1;
                                        margin-right: -40.4px;
                                        margin-top: ]]..CFCS_TextY..[[px;
                       }
                       .telemetry2 > div.numbers2 > h2 > span {
                        display:block;
                        font-size: 20px;
                                    text-align: right;
                       }
                 .shield
                 {
                 margin-left:403.2px;
                 margin-top:-237.2px;
                 }
                        .fuel
                 {
                 margin-left:347px;
                 margin-top:-104px;
                 }
                 orangecolor {
                  color: orange;
                } 
                 redcolor {
                  color: #fc033d;
                 }
                 greencolor {
                  color: #2ebac9;
                 }
                 amcolor {
                  color: ]]..AMcolor..[[;
                 }
                 emcolor {
                  color: ]]..EMcolor..[[;
                 }
                 
                 kicolor {
                  color: ]]..KIcolor..[[;
                 }
                 thcolor {
                  color: ]]..THcolor..[[;
                 }
                 powercolor {
                 font-size: 15px;
                 color: #b6dfed;
                 }
                redcolor1 {
                          color: red;
                         }
                         greencolor1 {
                          color: #6affb1;
                         }
                    .helper {
                    width: 18em; /* Ширина элемента в пикселах */
                    padding: 2px; /* Поля вокруг текста */
                    position:fixed;
                    top:6vh;
                    left:1vw;
                    text-align: left;
                    background:  #2C2F33; /* Цвет фона */
                    color: #FFFFFF;
                    font-family: "Times New Roman", Times, serif;
                    font-size: 0.9em;
                    border-radius: 5px;
                    border: 2px solid black;    
                            }
                         .safez {
                    width: auto; /* Ширина элемента в пикселах */
                    padding: 2px; /* Поля вокруг текста */
                    position:fixed;
                    top:-0.1vh;
                    right:0;
                    text-align: right;
                    color: #FFFFFF;
                    font-size: 1.2em;
                    font-weight: bold; 
                    background: ]]..CFCS_Background_Color..[[;
                    border: 0.2px solid black; 
                            }
                        .pipe {
                    width: 12em; /* Ширина элемента в пикселах */
                    padding: 2px; /* Поля вокруг текста */
                    position:fixed;
                    top: ]]..CFCS_PipeY..[[vh;
                    right: ]]..CFCS_PipeX..[[vw;
                    text-align: center;
                    color: ]]..CFCS_PipeText_Color..[[;
                    font-size: 1.2em;
                    font-weight: bold; 
                    background: ]]..CFCS_Background_Color..[[;
                    border: 0.2px solid black;  
                            }
                  </style>
                   <div class="telemetry">
                                    <div class="numbers">
                     <div>]]..throttle1..[[</div>
                     <h2>THRUST<span>%</span></h2>
                    </div>
                    <div class="numbers">
                     <div>]]..speed..[[</div>
                     <h2>SPEED<span>Km/h</span></h2>
                    </div>
                    <div class="numbers">
                     <div>]]..accel..[[</div>
                     <h2>ACCEL<span>G</span></h2>
                    </div>
                    <div class="numbers">
                     <div>]]..resString..[[</div>
                     <h2>Brake-distance<span>]]..brakeText..[[</span></h2>
                    </div>
                   </div>
                   <div class="telemetry2">
                                    <div class="numbers2">
                                    <div><redcolor>]]..ventCLWN..[[</redcolor> <orangecolor>]]..resCLWN..[[</orangecolor> <greencolor>]]..dpstimer..[[</greencolor> ]]..shieldHP..[[</div>
                                          <h2>]]..shieldText..[[<span>%</span></h2>
                    </div>
                                    <div class="numbers2">
                                     <div>]]..fuel1..[[</div>
                     <h2>FUEL<span>%</span></h2>
                    </div>
                                    <div class="numbers2">
                                    <div>]]..AMres..[[<powercolor>PW </powercolor><amcolor>]]..AMval..[[</amcolor></div>
                     <h2>AM<span>%</span></h2>
                    </div>
                                    <div class="numbers2">
                                    <div>]]..EMres..[[<powercolor>PW </powercolor><emcolor>]]..EMval..[[</emcolor></div>
                     <h2>EM<span>%</span></h2>
                    </div>
                                    <div class="numbers2">
                                    <div>]]..KIres..[[<powercolor>PW </powercolor><kicolor>]]..KIval..[[</kicolor></div>
                     <h2>KI<span>%</span></h2>
                    </div>
                                     <div class="numbers2">
                                    <div>]]..THres..[[<powercolor>PW </powercolor><thcolor>]]..THval..[[</thcolor></div>
                     <h2>TH<span>%</span></h2>
                    </div>
                         <div class="shield">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100" fill="none" stroke="]]..shieldColor..[[" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round" class="feather feather-shield"><path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path></svg>
                </div>
                        <div class="fuel">   
                 <svg viewBox="0 0 100 100" width="100" height="100" xmlns="http://www.w3.org/2000/svg">
                    <g fill="none" fill-rule="evenodd">
                        <path d="M68 63c3.038 0 5.5-2.493 5.5-5.567 0-2.05-1.833-5.861-5.5-11.433-3.667 5.572-5.5 9.383-5.5 11.433C62.5 60.507 64.962 63 68 63z" fill="#FFB12C"/>
                    </g>
                </svg>
                </div>
                   </div>
                    <div class="helper">
                    Option-1: set destination to departure planet<br>
                    Option-2: set destination to closest pipe<br>
                    Option-3: set destination to destination planet in LUA paramaters<br>
                    SHIFT + Option-1: set destination to departure planet<br>
                    SHIFT + Option-2: set destination to closest pipe between departure and destination planets in LUA paramaters<br>
                    SHIFT + Option-3: set destination to destination planet in LUA paramaters<br>
                    Option-4: 2D space radar<br>
                    Option-5: 3D map<br>
                    Option-6: set the shield resists manually based on the calculated DPM<br>
                    Option-7: (MAX/EQ) calibration of the entire shield power by the largest resist based on DPM<br>
                    Option-8: enable/disable shield<br>
                    SHIFT + Option-8: reset DPM calculation<br>
                    Option-9: start/stop shield ventilation<br>
                    SHIFT + L: set destination to POS from the map<br>
                    ALT + Space: show/hide locked targets on the radar widget<br>
                    ALT + C: enemies/friends on the radar widget<br>
                    <br>LUA commands:<br>
                    a - 100% shield power on AM resist<br>
                    e - 100% shield power on EM resist<br>
                    k - 100% of the shield power on the KI resist<br>
                    t - 100% shield power on TH resist<br>
                    mode - (AUTO/MANUAL) shield mode
                    m::pos - add position to the map<br>
                    safe - enable/disable notifications in the safe zone<br>
                    ang - enable/disable the angular velocity info<br>
                    drop - undock all constructs<br>
                    sw - show shield widget<br>
                    swd - show warpdrive widget<br>
                    sz - marker to the nearest safe zone<br>
                    szc - marker on the center of the safe zone<br>
                    helper - show/hide build helper<br>
                    <br>Profiles for resists 50/50%:<br> 
                    l - lasers<br>
                    c - cannons<br>
                    m - rockets<br>
                    r - railguns</div>
                            <div class="safez">]]..safetext..[[</div>
                            <div class="pipe">]]..pD()..[[</div>]]
                            
                    end
                            
                     if lalt == false and newhit == 0 then
                        htmlm = [[
                <style>
                   html, body {
                    margin: 0;
                    padding: 0;
                    background: transparent;
                    position: relative;
                   }
                   .telemetry {
                                width: 100vw;
                    height: 100vh;
                    position: fixed;
                    top: ]]..CFCS_Y..[[vh;
                    right: ]]..CFCS_RightBlock_X..[[vw;
                    white-space:nowrap;
                       width: 400px;
                   }
                   .telemetry > div.numbers {
                    margin-bottom: 10px;
                    display: flex;
                    width: 100%;
                                    justify-content: flex-end;
                                     margin-bottom: 0px;
                   }
                   .telemetry > div.numbers > h2 {
                    font-size: 10px;
                    font-weight: 900;
                    margin-bottom:-3px;
                    text-align: left;
                    width: 60px;
                   }
                   .telemetry > div.numbers > div {
                    font-weight: 500;
                    font-size: 26px;
                    text-align: right;
                    color: #6affb1;
                                    margin-right: 4px;
                                    margin-top: ]]..CFCS_TextY..[[px;
                   }
                   .telemetry > div.numbers > h2 > span {
                    display:block;
                    font-size: 20px;
                   } 
                            
                            .telemetry2 {
                                width: 100vw;
                    height: 100vh;
                    position: fixed;
                    top: ]]..CFCS_Y..[[vh;
                    left: ]]..CFCS_LeftBlock_X..[[vw;
                    white-space:nowrap;
                       width: 400px;
                   }
                   .telemetry2 > div.numbers2 {
                    margin-bottom: 10px;
                    display: flex;
                    width: 100%;
                                    justify-content: flex-end;
                                     margin-bottom: 0px;
                   }
                   .telemetry2 > div.numbers2 > h2 {
                    font-size: 10px;
                    font-weight: 900;
                    margin-bottom:-3px;
                    text-align: right;
                    width: 60px;
                   }
                   .telemetry2 > div.numbers2 > div {
                    font-weight: 500;
                    font-size: 26px;
                    text-align: right;
                    color: #6affb1;
                                    margin-right: -40.4px;
                                    margin-top: ]]..CFCS_TextY..[[px;
                   }
                   .telemetry2 > div.numbers2 > h2 > span {
                    display:block;
                    font-size: 20px;
                                text-align: right;
                   }
                 .shield
                 {
                 margin-left:403.2px;
                 margin-top:-69px;
                 }
                        .fuel
                 {
                 margin-left:347px;
                 margin-top:-104px;
                 }
                 orangecolor {
                  color: orange;
                } 
                 redcolor {
                  color: #fc033d;
                 }
                 greencolor {
                  color: #2ebac9;
                 }
                 redcolor1 {
                  color: red;
                 }
                 greencolor1 {
                  color: #6affb1;
                 }
                 amcolor {
                  color: ]]..AMcolor..[[;
                 }
                 emcolor {
                  color: ]]..EMcolor..[[;
                 }
                 
                 kicolor {
                  color: ]]..KIcolor..[[;
                 }
                 thcolor {
                  color: ]]..THcolor..[[;
                 }
                 powercolor {
                 font-size: 15px;
                 color: #b6dfed;
                 }
                        .helper {
                        width: 18em; /* Ширина элемента в пикселах */
                        padding: 2px; /* Поля вокруг текста */
                        position:fixed;
                        top:7vh;
                        left:1vw;
                        text-align: left;
                        background:  #2C2F33; /* Цвет фона */
                        color: #FFFFFF;
                        font-family: "Times New Roman", Times, serif;
                        font-size: 0.9em;
                        border-radius: 5px;
                        border: 2px solid black;    
                                }
                             .safez {
                        width: auto; /* Ширина элемента в пикселах */
                        padding: 2px; /* Поля вокруг текста */
                        position:fixed;
                        top:-0.1vh;
                        right:0;
                        text-align: right;
                        color: #FFFFFF;
                        font-size: 1.2em;
                        font-weight: bold;
                        background: ]]..CFCS_Background_Color..[[;
                        border: 0.2px solid black;     
                                }
                            .pipe {
                        width: 12em; /* Ширина элемента в пикселах */
                        padding: 2px; /* Поля вокруг текста */
                        position:fixed;
                        top: ]]..CFCS_PipeY..[[vh;
                        right: ]]..CFCS_PipeX..[[vw;
                        text-align: center;
                        color: ]]..CFCS_PipeText_Color..[[;
                        font-size: 1.2em;
                        font-weight: bold; 
                        background: ]]..CFCS_Background_Color..[[;
                        border: 0.2px solid black;  
                                }
                      </style>
                       <div class="telemetry">
                                        <div class="numbers">
                         <div>]]..throttle1..[[</div>
                         <h2>THRUST<span>%</span></h2>
                        </div>
                        <div class="numbers">
                         <div>]]..speed..[[</div>
                         <h2>SPEED<span>Km/h</span></h2>
                        </div>
                        <div class="numbers">
                         <div>]]..accel..[[</div>
                         <h2>ACCEL<span>G</span></h2>
                        </div>
                        <div class="numbers">
                         <div>]]..resString..[[</div>
                         <h2>Brake-distance<span>]]..brakeText..[[</span></h2>
                        </div>
                       </div>
                       <div class="telemetry2">
                                        <div class="numbers2">
                                       <div><redcolor>]]..ventCLWN..[[</redcolor> <orangecolor>]]..resCLWN..[[</orangecolor> <greencolor>]]..dpstimer..[[</greencolor> ]]..shieldHP..[[</div>
                                              <h2>]]..shieldText..[[<span>%</span></h2>
                        </div>
                                        <div class="numbers2">
                                         <div>]]..fuel1..[[</div>
                         <h2>FUEL<span>%</span></h2>
                        </div>
                            <div class="shield">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100" fill="none" stroke="]]..shieldColor..[[" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round" class="feather feather-shield"><path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path></svg>
                    </div>
                            <div class="fuel">   
                     <svg viewBox="0 0 100 100" width="100" height="100" xmlns="http://www.w3.org/2000/svg">
                        <g fill="none" fill-rule="evenodd">
                            <path d="M68 63c3.038 0 5.5-2.493 5.5-5.567 0-2.05-1.833-5.861-5.5-11.433-3.667 5.572-5.5 9.383-5.5 11.433C62.5 60.507 64.962 63 68 63z" fill="#FFB12C"/>
                        </g>
                    </svg>
                    </div>
                    </div>
                            <div class="safez">]]..safetext..[[</div>
                            <div class="pipe">]]..pD()..[[</div>]]
                            
                        end  
                        
                        if mybr==true then
                      system.setScreen(htmlm .. html1 .. message)
                      
                        else
                        
                      system.setScreen(htmlm .. message)
                    end
                    end
                htmlRadar = [[
                    <style>
                                    .top-panel {
                                        position: absolute;
                                        top: 160px;
                                        left: 0;
                                        right: 0;
                                        height: 200px;
                                        transform: perspective(1920px) rotateX(-18deg);
                                        transform-origin: top;
                                        display: flex;
                                        justify-content: center;
                                    }
                                    .top-panel .screen-panel {
                                        transform-style: preserve-3d;
                                        transform-origin: top;
                                        transform: perspective(120px) rotateX(-4deg);
                                    }
                                    .screen {
                                        background: rgba(0, 0, 0, .5);
                                        border-radius: 6px;
                                        padding: 5px 10px 10px;
                                        box-sizing: border-box;
                                        position: relative;
                                    }
                                    .screen::after {
                                        content: '';
                                        position: absolute;
                                        top: -6px;
                                        left: -6px;
                                        bottom: -6px;
                                        right: -6px;
                                        background: radial-gradient(110% 160% at 50% -40%, transparent 62%, rgba(255, 255, 255, .23)), radial-gradient(100% 70% at 50% 50%, #094075 -70%, transparent);
                                        border-radius: 10px;
                                        border: 1px solid #b7b7b7;
                                    }
                                    .screen.left::after {
                                        background: radial-gradient(farthest-corner at -20% 100%, transparent 62%, rgba(255, 255, 255, .43)), radial-gradient(farthest-corner at 50% -250%, #094075, transparent);
                                    }
                                    .data {
                                        white-space: nowrap;
                                        text-align: right;
                                    }
                                    .screen.dividers .data:nth-child(1) {
                                        margin-top: 0;
                                        padding-top: 0;
                                        border-top: none;
                                    }
                                    .data {
                                        display: flex;
                                        justify-content: space-between;
                                        align-items: baseline;
                                        width: 100%;
                                    }
                                    .screen.dividers .data {
                                        margin-top: 4px;
                                        border-top: 1px solid #496d8c;
                                        padding-top: 4px;
                                    }
                                    .data-header {
                                        font-weight: bold;
                                        font-size: 14px;
                                        display: flex;
                                        align-items: baseline;
                                        justify-content: space-between;
                                    }
                                    .data-content {
                                        font-size: 20px;
                                        display: flex;
                                        justify-content: flex-end;
                                        align-items: baseline;
                                        font-weight: normal;
                                        color: #edf7ff;
                                        font-family: monospace;
                                        font-weight: bold;
                                    }
                                    .data-unit {
                                        font-size: 12px;
                                        margin-left: 2px;
                                        color: #94ceff;
                                        font-weight: bold;
                                    }
                                    .data.speed {
                                        position: absolute;
                                        top: 7px;
                                        left: -5px;
                                        z-index: 10;
                                        right: -5px;
                                        height: 100%;
                                    }
                                    .speed .data-header {
                                        display: flex;
                                        justify-content: space-between;
                                        margin-top: 5px;
                                        align-items: baseline;
                                    }
                                    .tr-mode {
                                        background: #e9f5ff;
                                        border-radius: 2px;
                                        font-size: 12px;
                                        color: black;
                                        padding: 1px 3px;
                                        font-weight: bold;
                                        margin-right: 5px;
                                        height: 14px;
                                    }
                                    .data-bar {
                                        height: 6px;
                                        background: #284965;
                                        margin-top: 4px;
                                        margin-bottom: 4px;
                                        overflow: hidden;
                                        border-radius: 10px;
                                    }
                                    .data-bar>span {
                                        background: linear-gradient(90deg, transparent calc(100% - 30px), #f1f9ff), repeating-linear-gradient(90deg, #82c5ff 0px, #82c5ff 2px, transparent 2px, transparent 4px);
                                        display: block;
                                        position: relative;
                                        width: 100%;
                                        height: 100%;
                                        border-radius: 10px;
                                    }
                                    .disabled {
                                        opacity: .3;
                                    }
                                    .icon {
                                        fill: #94ceff;
                                        width: 50px;
                                    }
                                    .flex {
                                        display: flex;
                                    }
                                    .flex.align-bottom {
                                        align-items: baseline;
                                    }
                                    .flex.down {
                                        flex-direction: column;
                                    }
                                    .flex.align-top {
                                        align-items: flex-start;
                                    }
                    .flex.align-center {
                        align-items: center;
                    }
                    .flex.justify-end {
                        justify-content: flex-end;
                    }
                    .flex.space-between {
                        justify-content: space-between;
                    }
                    .hologram {
                        display: flex;
                        flex-direction: column;
                        align-items: flex-end;
                        filter: drop-shadow(0px 0px 6px rgba(255, 255, 255, .23)) drop-shadow(0px 0px 20px rgba(0, 0, 0, .20));
                        width: 100%;
                    }
                    .holo-wrap {
                        transform-origin: center right;
                        width: 100%;
                        margin-top: 20px;
                    }
                    .holo-wrap .data {
                        display: flex;
                        justify-content: space-between;
                        align-items: baseline;
                    }
                    .holo-wrap .data-content {
                        font-size: 12px;
                    }
                    .fuel-tank {
                        display: flex;
                        justify-content: space-between;
                        align-items: baseline;
                    }
                    .fuel-gauge {
                        width: 160px;
                        height: 5px;
                        position: relative;
                        background: rgba(255, 255, 255, .12);
                        border-radius: 15px;
                        overflow: hidden;
                    }
                    .fuel-gauge span {
                        position: absolute;
                        top: 0;
                        bottom: 0;
                        left: 0;
                        background: #e7f4ff;
                        border-radius: 10px;
                    }
                    .data.icon-panel {
                        display: flex;
                        align-items: center;
                    }
                    .icon-panel .icon {
                        height: 20px;
                        width: auto;
                        margin: 0px 0px;
                        fill: rgba(200, 230, 255, .16);
                    }
                    .icon-panel .icon.on {
                        fill: #94ceff;
                    }
                    .top-panel .screen-panel {
                        display: flex;
                        align-items: flex-start;
                    }
                    .screen.top-left {
                        width: 470px;
                        border-radius: 0px 0px 0px 6px;
                        margin-right: -40px;
                        height: 90px;
                        padding-right: 60px;
                        z-index: 0;
                    }
                    .top-left::after {
                        background: radial-gradient(110% 160% at 70% -40%, transparent 62%, rgba(255, 255, 255, .23)), radial-gradient(100% 70% at 50% 50%, #094075 -70%, transparent);
                        z-index: -1;
                    }
                    .screen.logo-screen {
                        width: 160px;
                        height: 160px;
                        border-radius: 100px;
                        margin-top: -40px;
                        display: flex;
                        justify-content: center;
                        align-items: center;
                        background: black;
                    }
                    .logo-screen::after {
                        border-radius: 120px;
                        background: radial-gradient(90% 136% at 50% -37%, transparent 86%, rgba(255, 255, 255, .33)), radial-gradient(100% 70% at 50% 65%, #094075 0%, transparent);
                    }
                    .screen.top-right {
                        width: 470px;
                        border-radius: 0px 0px 6px 0px;
                        margin-left: -40px;
                        height: 90px;
                        z-index: -1;
                        padding-left: 60px;
                    }
                    .top-right::after {
                        background: radial-gradient(110% 160% at 30% -40%, transparent 62%, rgba(255, 255, 255, .23)), radial-gradient(100% 70% at 50% 50%, #094075 -70%, transparent);
                        z-index: -1;
                    }
                    .radar-widget {
                        width: 800px;
                        height: 50px;
                        position: absolute;
                        margin-left: auto;
                        margin-right: auto;
                        left: 0;
                        right: 0;
                        top: 8vh;
                        background: radial-gradient(60% 50% at 50% 50%, rgba(60, 166, 255, .34), transparent);
                        border-right: 1px solid;
                        border-left: 1px solid;
                        transform-style: preserve-3d;
                        transform-origin: top;
                        transform: perspective(120px) rotateX(-4deg);
                    }
                    .d-widget,
                    .s-widget {
                        height: 25px;
                        width: 100%;
                        overflow: hidden;
                        position: relative;
                    }
                    .s-widget {
                        border-top: 1px solid;
                    }
                    .d-widget span {
                        background: linear-gradient(0deg, #b6ddff, #3ea7ff 25px);
                        width: 2px;
                        bottom: 0;
                        position: absolute;
                    }
                    .s-widget span {
                        background: linear-gradient(180deg, #ffd322, #ff7600 25px);
                        width: 2px;
                        top: 0;
                        position: absolute;
                    }
                    .measures {
                        display: flex;
                        justify-content: space-between;
                        font-size: 20px;
                    }
                    .measures span:first-child {
                        transform: translateX(-50%);
                    }
                    .measures span:last-child {
                        transform: translateX(50%);
                    }
                    .labels {
                        display: flex;
                        flex-direction: column;
                        position: absolute;
                        right: -60px;
                        top: 0;
                        height: 100%;
                        justify-content: space-evenly;
                        font-size: 12px;
                    }
                    .needle {
                        position: absolute;
                        top: -6px;
                        left: 50%;
                        transform: translateX(-50%);
                        width: 0px;
                        height: 0px;
                        border-left: 8px solid transparent;
                        border-right: 8px solid transparent;
                        border-bottom: 8px solid #ecf6ff;
                        filter: drop-shadow(0px 0px 30px #94ceff) drop-shadow(0px 0px 30px #94ceff) drop-shadow(0px 0px 5px #94ceff);
                        z-index: 1;
                    }
                    .compass {
                        position: absolute;
                        top: 0;
                        left: 0;
                        right: 0;
                        bottom: 0;
                        border-radius: 50%;
                        border: 2px;
                        border-style: solid;
                        transform-origin: center;
                        transform: rotate(0deg);
                    }
                    .compass span {
                        font-size: 20px;
                        position: absolute;
                        top: 50%;
                        left: 50%;
                    }
                    .left-panel {
                        position: absolute;
                        top: 300px;
                        left: 50%;
                        transform: perspective(1920px) translateX(-50%) translateX(-790px) rotateY(50deg) translateZ(20px);
                        transform-origin: center right;
                        display: flex;
                        flex-direction: column;
                        justify-content: flex-start;
                        align-items: flex-start;
                        bottom: 0;
                        width: 200px;
                    }
                    .left-panel.extended {
                        width: 330px;
                        transform: perspective(1920px) translateX(-50%) translateX(-700px) rotateY(50deg) translateZ(20px);
                        display: block;
                        top: 200px;
                    }
                    .pitch-roll-panel {
                        position: absolute;
                        top: 330px;
                        border-left: 2px solid;
                        left: 50%;
                        transform: translateX(-50%) translateX(-465px);
                        height: 300px;
                        overflow: hidden;
                        width: 400px;
                        font-family: monospace;
                        font-weight: bold;
                        filter: drop-shadow(0px 0px 6px rgba(255, 255, 255, .23)) drop-shadow(0px 0px 20px rgba(0, 0, 0, .20));
                    }
                    .pitch {
                        position: absolute;
                        top: 50%;
                        left: 0;
                        transform: translateY(-50%);
                    }
                    .pitch-line {
                        display: block;
                        position: relative;
                        height: 30px;
                    }
                    .pitch-line span {
                        position: absolute;
                        top: 50%;
                        transform: translateY(-50%);
                        display: flex;
                        justify-content: space-between;
                        align-items: center;
                        font-weight: bold;
                    }
                    .pitch-line span::before {
                        content: '';
                        margin-right: 10px;
                        height: 1px;
                        background: #94ceff;
                        flex-grow: 1;
                        width: 10px;
                    }
                    .pitch-roll {
                        position: absolute;
                        top: 50%;
                        left: 0;
                        transform: translateY(-50%);
                        display: flex;
                        flex-wrap: nowrap;
                        align-items: center;
                    }
                    .line {
                        height: 2px;
                        background: #c8e6ff;
                        width: 90px;
                    }
                    .number-display {
                        width: 50px;
                        font-size: 16px;
                        text-align: center;
                        font-weight: bold;
                        color: #c8e6ff;
                        border: 2px solid;
                        height: 21px;
                        margin: 0px 8px;
                        position: relative;
                    }
                    .number-head {
                        font-size: 11px;
                        position: relative;
                        top: -37px;
                        font-weight: bold;
                    }
                    .roll-lines {
                        position: absolute;
                        top: 50%;
                        left: 50%;
                        transform: translate(-50%, -50%) rotate(55deg);
                        width: 80px;
                        height: 80px;
                        border: 14px dashed rgba(200, 230, 255, .08);
                        border-radius: 100px;
                        border-style: dashed;
                    }
                    .roll-lines span {
                        width: 50px;
                        height: 0;
                        border-bottom: 3px dashed rgba(147, 205, 254, .50);
                        position: absolute;
                        top: 50%;
                        left: 50%;
                        transform: translate(-50%, -50%) rotate(-90deg) translateX(95px);
                        z-index: -1;
                    }
                    .roll-lines span:nth-child(2) {
                        transform: translate(-50%, -50%) rotate(0deg) translateX(95px);
                    }
                    .roll-lines span:nth-child(3) {
                        transform: translate(-50%, -50%) rotate(90deg) translateX(95px);
                    }
                    .roll-lines span:nth-child(4) {
                        transform: translate(-50%, -50%) rotate(180deg) translateX(95px);
                    }
                    .ship-orientation {
                        width: 100px;
                        height: 100px;
                        position: relative;
                        margin: 30px auto 0;
                        border-radius: 50%;
                        border: 1px solid;
                    }
                    .ship-orientation-gimbal {
                        width: 100px;
                        height: 100px;
                        position: relative;
                        transform-style: preserve-3d;
                        transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
                    }
                    .plane-z,
                    .plane-y,
                    .plane-x {
                        position: absolute;
                        top: 0;
                        left: 0;
                        right: 0;
                        bottom: 0;
                        border-radius: 50%;
                        /*background: repeating-linear-gradient(0deg, rgba(148,206,255, .28) 0px, rgba(148,206,255, .28) 1px, transparent 1px, transparent 5px);
                        border: 4px solid #94ceff;*/
                        transform-style: preserve-3d;
                    }
                    .plane-z {
                        transform: rotateY(90deg);
                    }
                    .plane-y {
                        transform: rotateX(90deg);
                        border: 2px solid #9dffab;
                    }
                    .plane-x {
                        transform: rotateZ(90deg);
                    }
                    .plane-z::after {
                        content: '';
                        position: absolute;
                        top: -30px;
                        bottom: -30px;
                        left: 50%;
                        transform: translateX(-50%);
                        width: 2px;
                        background: #94ceff;
                        border-radius: 10px;
                    }
                    .orient-z-axis {
                        position: absolute;
                        top: -30px;
                        bottom: -30px;
                        width: 2px;
                        background: #cce8ff;
                        left: 50%;
                        transform: translateX(-50%);
                    }
                    .orient-z-axis::before,
                    .orient-z-axis::after {
                        content: 'S';
                        position: absolute;
                        bottom: -16px;
                        left: 50%;
                        transform: translate(-50%, 0px);
                        font-size: 13px;
                        color: #c8e6ff;
                    }
                    .orient-z-axis::before {
                        content: 'N';
                        bottom: auto;
                        top: -16px;
                    }
                    .plane-x span {
                        position: absolute;
                        top: 0;
                        left: 0;
                        bottom: 0;
                        right: 0;
                        border: 1px solid;
                        border-radius: 50%;
                    }
                    .orient-x-axis {
                        position: absolute;
                        height: 2px;
                        top: 50%;
                        transform: translateY(-50%);
                        left: -30px;
                        right: -30px;
                        background: #cce8ff;
                    }
                    .orient-x-axis::before,
                    .orient-x-axis::after {
                        content: 'W';
                        position: absolute;
                        left: -16px;
                        top: 50%;
                        transform: translate(0%, -50%);
                        font-size: 13px;
                        color: #c8e6ff;
                    }
                    .orient-x-axis::after {
                        content: 'E';
                        right: -16px;
                        left: auto;
                    }
                    .ui {
                        position: absolute;
                        bottom: 0;
                        left: 50%;
                        transform: translateX(-50%);
                        height: 300px;
                        width: 900px;
                        background: rgb(0 0 0 / 53%);
                        border-radius: 5px;
                    }
                    .ui::before {
                        content: '';
                        position: absolute;
                        top: -6px;
                        left: -6px;
                        bottom: -6px;
                        right: -6px;
                        background: radial-gradient(110% 160% at 50% -40%, transparent 62%, rgba(255, 255, 255, .23)), radial-gradient(100% 70% at 50% 50%, #094075 -70%, transparent);
                        border-radius: 10px;
                        border: 1px solid #b7b7b7;
                        pointer-events: none;
                    }
                    .top-bar {
                        height: 25px;
                        background: radial-gradient(50% 150% at 50% 160%, #007ae2, transparent);
                        border-bottom: 1px solid rgba(148, 206, 255, .16);
                        padding: 0px 10px;
                        font-style: italic;
                    }
                    .ui-menu,
                    .ui-content {
                        height: 100%;
                        padding: 10px;
                        box-sizing: border-box;
                        font-family: monospace;
                    }
                    .ui-content {
                        width: 800px;
                    }
                    .ui-menu {
                        width: 100px;
                        background: radial-gradient(80% 120% at 50% 0%, rgba(0, 122, 226, .30), transparent);
                        border-right: 1px solid rgba(148, 206, 255, .16);
                        padding: 0;
                    }
                    .ui-menu>div {
                        padding: 20px 20px 20px;
                        font-size: 16px;
                        text-align: left;
                        border-bottom: 1px solid rgba(148, 206, 255, .20);
                    }
                    .ui-menu>div.active {
                        background: radial-gradient(70% 50% at 100% 50%, rgba(0, 134, 247, .95), transparent);
                        color: #87c8ff;
                    }
                    span.query {
                        padding: 2px 4px;
                        background: #294256;
                    }
                    .system-map {
                        position: absolute;
                        top: 0;
                        width: 100%;
                        height: 100%;
                        background: rgba(7, 44, 82, .81);
                        left: 0;
                    }
                    .planet {
                        width: 20px;
                        height: 20px;
                        border-radius: 50%;
                        border: 2px solid;
                        box-sizing: border-box;
                        background: rgba(148, 206, 255, .29);
                    }
                    .map-actual {
                        position: absolute;
                        width: 100%;
                        height: 100%;
                        top: 0;
                        left: 0;
                        transform-style: preserve-3d;
                    }
                    .map-center {
                        position: absolute;
                        content: '';
                        width: 2000px;
                        height: 2000px;
                        top: 50%;
                        left: 50%;
                        background: repeating-radial-gradient(rgba(0, 17, 35, .23), transparent 112px), repeating-radial-gradient(rgba(148, 206, 255, .34), transparent 75%);
                        border-radius: 50%;
                    }
                    .map-pin {
                        position: absolute;
                        top: 50%;
                        left: 50%;
                    }
                    .map-pin .icon,
                    .map-pin .planet {
                        height: 30px;
                        width: 30px;
                    }
                    .pin-data {
                        position: absolute;
                        bottom: 100%;
                        margin-bottom: 10px;
                        white-space: nowrap;
                        text-align: center;
                        width: 200px;
                        left: 50%;
                        transform: translateX(-50%);
                    }
                    .pin-data .name {
                        font-size: 16px;
                        color: white;
                        line-height: 16px;
                    }
                    .pin-data .units {
                        font-family: monospace;
                        font-size: 14px;
                        font-weight: bold;
                        line-height: 14px;
                    }
                    .map-pin.player {
                        filter: drop-shadow(0px 0px 20px #edf7ff);
                    }
                    .map-pin.player .icon {
                        fill: #ffde56;
                    }
                    .con-size {
                        width: 20px;
                        text-align: center;
                        background: #235f92;
                        margin-right: 4px;
                        color: white;
                        height: 18px;
                    }
                    .warp-scan {
                        width: 15px;
                        height: 15px;
                        border-radius: 50%;
                        box-sizing: border-box;
                        background: #ff3a56;
                    }
                    </style>]]
                                    function drawMap()
                                        asteroid=""
                                        planet=""
                                        asterunits=""
                                        asternumbers=""
                                                        local html5 = ''
                                                        if map == 0 then return html end
                                                            
                                                        html5 = [[
                                                        <div class="system-map">
                                                            <div class="map-actual" style="transform: perspective(1920px) translateZ(-250px);">
                                                                <div class="map-center" style="transform: translate(-50%, -50%) rotateX(]]..yDelta..[[deg) rotateY(0deg) rotateZ(]]..xDelta..[[deg);"></div>
                                                        ]]
                                                        
                                                        for k,v in pairs(helios) do
                                                            local planetBody = helios[v.bodyId]
                                      
                                                local planetName = string.upper(v.name[1])
                                                local typeplanet = string.upper(v.type[1])
                                                
                                                local distance = customDistance(planetBody:getDistance(core.getConstructWorldPos()))
                                            
                                                            local coords = {x=v.center.x + (-v.center.x * mapScale), y=v.center.y + (-v.center.y * mapScale), z=v.center.z + (-v.center.z * mapScale)}
                                                            rotateY3D(coords, xDelta)
                                                            rotateX3D(coords, yDelta)
                                                            local mainPlanet = true;
                                                            local size = planetScale
                                            
                                                             --if distance.number > 60 then
                            if planetBody:getDistance(core.getConstructWorldPos()) > 12000000 then
                                                             size = planetScale
                                                             else
                                                             size = aliothsize
                                                             end
                                                             --<div class="units">]]..distance.number..[[ ]]..distance.unit..[[</div>
                                                            local display = "block"
                                                           -- if string.find(planetName, 'MOON') ~= nil then 
                                                           if string.find(typeplanet, 'MOON') ~= nil then
                                                               size = moonScale
                                                               display = "none"
                                                            end
                                            
                                                            local planet = [[
                                                            <div class="map-pin" style="display: ]]..display..[[; transform: translate(-50%, -50%) translateX(]]..coords.x..[[px) translateY(]]..coords.y..[[px) translateZ(]]..coords.z..[[px);">
                                                                <div class="pin-data" style="display: ]]..display..[[;">
                                                                    <div class="name">]]..planetName..[[</div>
                                                                    <div class="units">]]..distance..[[</div>
                                                                </div>
                                                                <div class="planet" style="width: ]]..(v.radius/size)..[[px; height: ]]..(v.radius/size)..[[px;"></div>
                                                            </div>
                                                            ]]
                                           
                                                            html5 = html5 .. planet
                                                        end
                                                        
                                                        local shipPosition = core.getConstructWorldPos()
                                                        local shipCoords = {x=shipPosition[1] + (-shipPosition[1] * mapScale), y=shipPosition[2] + (-shipPosition[2] * mapScale), z=shipPosition[3] + (-shipPosition[3] * mapScale)}
                                                        rotateY3D(shipCoords, xDelta)
                                                        rotateX3D(shipCoords, yDelta)
                                        --local playerPosition = [[
                                                       -- <div class="map-pin player" style="transform: translate(-50%, -50%) translateX(]]..shipCoords.x..[[px) translateY(]]..shipCoords.y..[[px) translateZ(]]..shipCoords.z..[[px);">
                                                           -- <div class="pin-data">
                                                               -- <div class="name">]]..playerName..[[</div>
                                                           -- </div>
                                                           -- ]]..icons.player()..[[
                                                        --</div>
                                                        --]]
                                        
                                        local playerPosition = [[
                                                        <div class="map-pin player" style="transform: translate(-50%, -50%) translateX(]]..shipCoords.x..[[px) translateY(]]..shipCoords.y..[[px) translateZ(]]..shipCoords.z..[[px);">
                                                            <div class="pin-data">
                                                                <div class="name"></div>
                                                            </div>
                                                            ]]..icons.ship()..[[
                                                        </div>
                                                        ]]
                                                        html5 = html5.. playerPosition
                                        
                                        if asteroidPOS ~= "" then
                                           local shipPosition = asteroidcoord
                                           local distance = customDistance((vec3(shipPosition) - vec3(core.getConstructWorldPos())):len())
                                           local asteroidC = {x=shipPosition[1] + (-shipPosition[1] * mapScale), y=shipPosition[2] + (-shipPosition[2] * mapScale), z=shipPosition[3] + (-shipPosition[3] * mapScale)}
                                           rotateY3D(asteroidC, xDelta)
                                           rotateX3D(asteroidC, yDelta)
                                                     local shipPosition = [[
                                                            <div class="map-pin" style="transform: translate(-50%, -50%) translateX(]]..asteroidC.x..[[px) translateY(]]..asteroidC.y..[[px) translateZ(]]..asteroidC.z..[[px);">
                                                                <div class="pin-data">
                                                                    <div class="name">]]..markerName..[[</div>
                                                                    <div class="units">]]..distance..[[</div>
                                                                </div>
                                                               <div class="warp-scan"></div>
                                                            </div>
                                                            ]]
                                                 html5 = html5..shipPosition..'</div></div>'
                                                    end
                                                    
                    html5 = html5 .. '</div></div>'
                    
                    return html5
                end
                local function signedAngleBetween(vec1, vec2, planeNormal)
                                    local normVec1 = vec1:normalize()
                                    local normVec2 = vec2:normalize()
                                    local cosAngle = normVec1:dot(normVec2)
                                    cosAngle = utils.clamp(cosAngle, -1, 1)
                                    local angle = math.acos(cosAngle)
                                    local crossProduct = vec1:cross(vec2)
                                    if crossProduct:dot(planeNormal) < 0 then
                                        return -angle - math.pi
                                    else
                                        return angle + math.pi
                                    end
                                end
                                local function directionToBearing (direction, worldVertical)
                                    local north = vec3(0, 0, 1)
                                    local northOnGround = north:project_on_plane(worldVertical)
                                    local directionOnGround = direction:project_on_plane(worldVertical)
                                    return signedAngleBetween(northOnGround, directionOnGround, worldVertical)
                                end
                                function rotateX3D(point, theta)
                                    theta = theta * math.pi / 180
                                    local sinTheta = math.sin(theta);
                                    local cosTheta = math.cos(theta);
                                    local y = point.y * cosTheta - point.z * sinTheta
                                    local z = point.z * cosTheta + point.y * sinTheta
                                    point.y = y
                                    point.z = z
                                    return point
                                end
                                function rotateY3D(point, theta)
                                    theta = theta * math.pi / 180
                                    local sinTheta = math.sin(theta);
                                    local cosTheta = math.cos(theta);
                                    local x = point.x * cosTheta - point.y * sinTheta
                                    local y = point.y * cosTheta + point.x * sinTheta
                                    point.x = x
                                    point.y = y
                                    return point
                                end
                                function rotateZ3D(point, theta)
                                    theta = theta * math.pi / 180
                                    local sinTheta = math.sin(theta);
                                    local cosTheta = math.cos(theta);
                                    local x = point.x * cosTheta + point.z * sinTheta
                                    local z = point.z * cosTheta - point.x * sinTheta
                                    point.x = x
                                    point.y = y
                                    return point
                                end
                        
                    unit.setTimer("shield",1)
                    unit.setTimer("DPS",1)
                    unit.setTimer("braketime",0.15)
                    unit.setTimer("hud",0.018)
                    if collectgarbages == true then
                    unit.setTimer("cleaner",30)
                    end
        tick:
            args: ["shield"]
            lua: |
                --data2 = json.decode(shield.getData())
                --tableStart = {tonumber(data2.resistances.antimatter.value), tonumber(data2.resistances.electromagnetic.value), tonumber(data2.resistances.kinetic.value), tonumber(data2.resistances.thermic.value)}
                --AMres = math.floor((tableStart[1]-0.1)/resMAX*100)
                --EMres = math.floor((tableStart[2]-0.1)/resMAX*100)
                --KIres = math.floor((tableStart[3]-0.1)/resMAX*100)
                --THres = math.floor((tableStart[4]-0.1)/resMAX*100)
                
                  data2=shield.getResistances()
                  
                    AMres = math.floor((tonumber(data2[1]))/resMAX*100)
                    EMres = math.floor((tonumber(data2[2]))/resMAX*100)
                    KIres = math.floor((tonumber(data2[3]))/resMAX*100)
                    THres = math.floor((tonumber(data2[4]))/resMAX*100)
                    varcombat=math.floor(core.getPvPTimer())
                    if varcombat < 300 and varcombat ~= 0 then 
                        AM_rS1=0
                        EM_rS1=0
                        KI_rS1=0
                        TH_rS1=0
                        newhit=0
                        end
                    if varcombat > 0 then varcombat = 1 end
                     if shield.getState() == 0 then shieldColor = "#fc033d" else shieldColor = "#2ebac9" end
                    if Shield_Auto_Calibration
                        then
                        if Shield_Calibration_Max then
                    shieldText = "SHIELD (AUTO,MAX)"
                    end
                    if not Shield_Calibration_Max then
                    shieldText = "SHIELD (AUTO,EQ)"
                    end
                        
                        else
                        
                    if Shield_Calibration_Max then
                    shieldText = "SHIELD (MANUAL,MAX)"
                    end
                           
                    if not Shield_Calibration_Max then
                    shieldText = "SHIELD (MANUAL,EQ)"
                    end
                        
                    end
                    if timeF == 62 then dpstimer = "" else dpstimer = timeF.. 's' end
                    resisttime = shield.getResistancesCooldown()
                    if resisttime ~= 0 then
                    if resisttime < resisttimemax  then 
                        --system.print('RESISTANCE COOLDOWN: '..math.floor(resisttime).. ' sec')
                        resCLWN = math.floor(resisttime).. 's'   
                        --system.print(resCLWN)    
                        end
                        else
                        resCLWN = ""
                        end
                    if shield.isVenting() then
                        venttime = shield.getVentingCooldown()
                        if venttime < venttimemax and venttime ~= 0 then
                        --system.print('VENTING COOLDOWN: '..math.floor(venttime).. ' sec')
                        ventCLWN = math.floor(venttime).. 's'  
                        else
                        ventCLWN = ""
                            end
                        end
        tick:
            args: ["DPS"]
            lua: |
                            DPStable = {AM_rS, EM_rS, KI_rS, TH_rS}
                            summaS = AM_rS + EM_rS + KI_rS + TH_rS
                            summaG = AM_rM + EM_rM + KI_rM + TH_rM
                            if AM_rS ~= 0 then AMcolor = "#ff0000" else AMcolor = "#6affb1" end
                            if EM_rS ~= 0 then EMcolor = "#ff0000" else EMcolor = "#6affb1" end
                            if KI_rS ~= 0 then KIcolor = "#ff0000" else KIcolor = "#6affb1" end
                            if TH_rS ~= 0 then THcolor = "#ff0000" else THcolor = "#6affb1" end
                            if AM_rM ~= 0 then
                                
                                    AMval = math.floor(AM_rM/summaG*100) 
                                    else 
                                    AMval = 0
                                end
                                
                            if EM_rM ~= 0 then
                                
                                    EMval = math.floor(EM_rM/summaG*100) 
                                    else 
                                    EMval = 0
                                end
                                
                            if KI_rM ~= 0 then
                                
                                    KIval = math.floor(KI_rM/summaG*100)
                                    else 
                                    KIval = 0
                                end
                                
                            if TH_rM ~= 0 then
                                
                                    THval = math.floor(TH_rM/summaG*100)
                                    else 
                                    THval = 0
                                end
                            if timeD ~= 0 then
                                timeF = timeF - 1
                                end
                                if timeF == 0 then
                                timeF=62
                                
                                DPMtable = {AM_rM, EM_rM, KI_rM, TH_rM}
                                summaM = AM_rM + EM_rM + KI_rM + TH_rM
                                
                                if summaM ~= 0 then
                            --system.print('DPM - AM: '..math.floor(AM_rM/summaM*100)..'%, EM: '..math.floor(EM_rM/summaM*100)..'%, KI: '..math.floor(KI_rM/summaM*100)..'%, TH: '..math.floor(TH_rM/summaM*100)..'%')
                                    --table.sort(DPMtable)
                            --system.print('MAX is '..math.floor((DPMtable[#DPMtable])/summaM*100)..'%')
                            if Shield_Auto_Calibration then
                                        
                                        
                                        if Shield_Calibration_Max then
                                            
                                            TEMPtable = DPMtable
                                            
                                            table.sort(DPMtable, function(a,b)
                             return a > b
                            end)
                                            
                                        if DPMtable[1] == DPMtable[2] then
                                                --system.print("50%")
                                               shield.setResistances((math.floor(AM_rM/summaM*100)*resMAX)/100,(math.floor(EM_rM/summaM*100)*resMAX)/100,(math.floor(KI_rM/summaM*100)*resMAX)/100,(math.floor(TH_rM/summaM*100)*resMAX)/100)
                                               AMres = math.floor(AM_rM/summaM*100)
                                               EMres = math.floor(EM_rM/summaM*100)
                                               KIres = math.floor(KI_rM/summaM*100)
                                               THres = math.floor(TH_rM/summaM*100) 
                                            else
                                            
                                        if DPMtable[1] == AM_rM 
                                                then
                                                system.print("ANTIMATTER POWER 100%")
                                                shield.setResistances(resMAX,0,0,0)
                                                AMres = 100
                                                EMres = 0
                                                KIres = 0
                                                THres = 0 
                                                end
                                                
                                         if DPMtable[1] == EM_rM 
                                                then
                                                system.print("ELECTROMAGNETIC POWER 100%")
                                                shield.setResistances(0,resMAX,0,0)
                                                AMres = 0
                                                EMres = 100
                                                KIres = 0
                                                THres = 0 
                                                end 
                                                    
                                         if DPMtable[1] == KI_rM then
                                                system.print("KINETIC POWER 100%")
                                                shield.setResistances(0,0,resMAX,0)
                                                AMres = 0
                                                EMres = 0
                                                KIres = 100
                                                THres = 0  
                                                end
                                                        
                                          if DPMtable[1] == TH_rM 
                                                then
                                                system.print("THERMIC POWER 100%")
                                                shield.setResistances(0,0,0,resMAX)
                                                AMres = 0
                                                EMres = 0
                                                KIres = 0
                                                THres = 100 
                                                end       
                                                
                               end
                               else
                               
                               shield.setResistances((math.floor(AM_rM/summaM*100)*resMAX)/100,(math.floor(EM_rM/summaM*100)*resMAX)/100,(math.floor(KI_rM/summaM*100)*resMAX)/100,(math.floor(TH_rM/summaM*100)*resMAX)/100)
                                AMres =  math.floor(AM_rM/summaM*100)
                                            EMres =  math.floor(EM_rM/summaM*100)
                                            KIres =  math.floor(KI_rM/summaM*100)
                                            THres =  math.floor(TH_rM/summaM*100) 
                               end
                                else
                                AM_rM=0
                                EM_rM=0
                                KI_rM=0
                                TH_rM=0
                                --system.print('DPM - AM: '..AM_rM..'%, EM: '..EM_rM..'%, KI: '.. KI_rM..'%, TH: '..TH_rM..'%')
                                end
                             end
                                
                                DPMtable = {}
                                TEMPtable = {}
                                AM_rM=0
                                EM_rM=0
                                KI_rM=0
                                TH_rM=0
                                timeD=0
                                
                            end
                            if summaS ~= 0 then
                            --system.print('DPS - AM: '..math.floor(AM_rS/summaS*100)..'%, EM: '..math.floor(EM_rS/summaS*100)..'%, KI: '..math.floor(KI_rS/summaS*100)..'%, TH: '..math.floor(TH_rS/summaS*100)..'%')
                            --table.sort(DPStable)
                            --system.print('MAX is '..math.floor((DPStable[#DPStable])/summaS*100)..'%')
                            if Shield_Auto_Calibration and Shield_1hit_Calibration then
                                Shield_1hit_Calibration = false
                                    
                                TEMPtableS = DPStable
                                            
                                            table.sort(DPStable, function(a,b)
                             return a > b
                            end)
                                            
                                            
                                        if DPStable[1] == AM_rS 
                                                then
                                                system.print("ANTIMATTER POWER 100%")
                                                shield.setResistances(resMAX,0,0,0)
                                                AMres = 100
                                                EMres = 0
                                                KIres = 0
                                                THres = 0 
                                                end
                                                
                                         if DPStable[1] == EM_rS 
                                                then
                                                system.print("ELECTROMAGNETIC POWER 100%")
                                                shield.setResistances(0,resMAX,0,0)
                                                AMres = 0
                                                EMres = 100
                                                KIres = 0
                                                THres = 0 
                                                end 
                                                    
                                         if DPStable[1] == KI_rS then
                                                system.print("KINETIC POWER 100%")
                                                shield.setResistances(0,0,resMAX,0)
                                                AMres = 0
                                                EMres = 0
                                                KIres = 100
                                                THres = 0  
                                                end
                                                        
                                          if DPStable[1] == TH_rS 
                                                then
                                                system.print("THERMIC POWER 100%")
                                                shield.setResistances(0,0,0,resMAX)
                                                AMres = 0
                                                EMres = 0
                                                KIres = 0
                                                THres = 100 
                                                end   
                                end 
                                
                            else
                                AM_rS=0
                                EM_rS=0
                                KI_rS=0
                                TH_rS=0
                                
                                --system.print('DPS - AM: '..AM_rS..'%, EM: '..EM_rS..'%, KI: '.. KI_rS..'%, TH: '..TH_rS..'%')
                                end
                                DPStable = {}
                                TEMPtableS = {}
                                AM_rS=0
                                EM_rS=0
                                KI_rS=0
                                TH_rS=0
                                 --if summaG ~= 0 then
                                --system.print('DPM - AM: '..math.floor(AM_rM/summaG*100)..'%, EM: '..math.floor(EM_rM/summaG*100)..'%, KI: '..math.floor(KI_rM/summaG*100)..'%, TH: '..math.floor(TH_rM/summaG*100)..'%')
                                --end
        tick:
            args: ["hud"]
            lua: |
                renderNiceHud()
                throttle1 = math.floor(unit.getThrottle())
                if DisplayRadar==true then
                local x,y,z = table.unpack(core.getConstructWorldOrientationForward())
                local xoc = math.floor(math.atan(x, y)*180/math.pi+180)
                local yoc = math.floor(math.atan(y, z)*180/math.pi+180)
                hudver1 = hudang1 .. [[<div class="hudversion1">X: ]]..xoc..[[</div>]]
                hudver2 = hudang2 .. [[<div class="hudversion2">Y: ]]..yoc..[[</div>]]
                                     message=[[
                                                <style>
                                                .svg {
                                                    position:absolute;
                                                    left: 0;
                                                    top: 6vh;
                                                    height: 100vh;
                                                    width: 100vw;
                                                .wptxt {
                                                    fill: white;
                                                    font-size: ]].. YScreenRes/80 ..[[;
                                                    font-family: sans-serif;
                                                    text-anchor: end;
                                                .shiptxt {
                                                    fill: white;
                                                    font-size: ]].. YScreenRes/80 ..[[;
                                                    font-family: sans-serif;
                                                    text-anchor: start;
                                                }
                                                </style>]]
                                  message=message..[[<svg class="svg">]]
                                  svgradar=""
                                    RadarX=XScreenRes*1/6
                                    RadarY=XScreenRes*1/6
                                    RadarR=XScreenRes*1/6
                                    
                                    svgradar=svgradar..string.format([[<line x1="%f" y1="%f" x2="%f" y2="%f" stroke-width="2" stroke="black" />]],RadarX,RadarY-RadarR,RadarX,RadarY+RadarR)
                                    svgradar=svgradar..string.format([[<line x1="%f" y1="%f" x2="%f" y2="%f" stroke-width="2" stroke="black" />]],RadarX-RadarR,RadarY,RadarX+RadarR,RadarY)
                                    svgradar=svgradar..string.format([[<circle  cx="%f" cy="%f" r="%f" stroke="black" fill="transparent" stroke-width="5"/>]],
                                    RadarX,RadarY,RadarR/2)
                                    svgradar=svgradar..string.format([[<circle  cx="%f" cy="%f" r="%f" stroke="black" fill-opacity="0.2" fill="green" stroke-width="5"/>]],
                                    RadarX,RadarY,RadarR)
                                    
                                    for BodyId in pairs(atlas[0]) do
                                                            planet=atlas[0][BodyId]
                                                            if string.find(planet.name[1],"Moon") == nil then
                                                                drawonradar(vec3(planet.center),planet.name[1])
                                                            end
                                                        end
                                    drawonradar(safeWorldPos,"SAFE ZONE")
                                message=message..svgradar..hudver1..hudver2
                                message=message.."</svg>"
                        else
                        message = ''
                        end
        tick:
            args: ["cleaner"]
            lua: |
                                collectgarbage("collect")
        tick:
            args: ["braketime"]
            lua: |
                                accel = math.floor((json.decode(unit.getData()).acceleration/9.80665)*10)/10
                                shieldHP = string.format('%0.0f',math.floor(shield.getShieldHitpoints()/shieldMaxHP*100))
                                fuel1 = json.decode(spacefueltank_1.getData()).percentage
                                local c = 8333.333
                                local m0 = core.getConstructMass()
                                local v0 = vec3(core.getWorldVelocity())
                                local controllerData = json.decode(unit.getData())
                                local maxBrakeThrust = controllerData.maxBrake
                                local time = 0.0
                                dis = 0.0
                                local v = v0:len()
                                while v>1.0 do
                                  time = time + 1
                                  local m = m0 / (math.sqrt(1 - (v * v) / (c * c)))
                                  local a = maxBrakeThrust / m
                                  if v > a then
                                    v = v - a --*1 sec
                                    dis = dis + v + a / 2.0
                                  elseif a ~= 0 then
                                    local t = v/a
                                    dis = dis + v * t + a*t*t/2
                                    v = v - a
                                  end
                                end
                                resString = ""
                                if dis > 100000 then
                                  resString = resString..string.format(math.floor((dis/200000) * 10)/10)
                                  brakeText = "SU"  
                                elseif dis > 1000 then
                                  resString = resString..string.format(math.floor((dis/1000)*10)/10)
                                  brakeText = "KM"  
                                else
                                  resString = resString..string.format(math.floor(dis))
                                  brakeText = "M"  
                                end
                                coroutine.resume(refreshCoroutine, vec3(core.getConstructWorldPos()))
                                if coratinka==1 then
                                if coroutine.status(ck) ~= "dead" and coroutine.status(ck) == "suspended" then
                                   coroutine.resume(ck)
                                   end
                                end
                                function safeZone()
                                local WorldPos = core.getConstructWorldPos()
                                closestPlanet1 = helios[helios:closestBody(core.getConstructWorldPos()).bodyId]
                                    local mabs = math.abs
                                                local safeRadius = 18000000
                                                local szradius = 500000
                                                local distsz, distp = math.huge
                                                szsafe = false
                                                distsz = vec3(WorldPos):dist(safeWorldPos)
                                                if distsz < safeRadius then
                                        safew='::pos{0,0,13771471,7435803,-128971}'
                                        szsafe=true
                                            distS = mabs(distsz - safeRadius)
                                        if distS > 100000 then
                                  distS = ''..string.format('%0.2f', distS/200000)..' su' 
                                elseif distS > 1000 and distS < 100000 then
                                  distS = ''..string.format('%0.1f', distS/1000)..' km'  
                                else
                                  distS = ''..string.format('%0.0f', distS)..' m'     
                                end
                                            return 'PVP ZONE: '..distS..''
                                                end
                                        
                                                distp = vec3(WorldPos):dist(vec3(closestPlanet1.center))
                                                if distp < szradius then szsafe = true else szsafe = false end
                                                if mabs(distp - szradius) < mabs(distsz - safeRadius) then 
                                        safew='::pos{0,0,'..closestPlanet1.center.x..','..closestPlanet1.center.y..','..closestPlanet1.center.z..'}'
                                             distS = mabs(distp - szradius)
                                        if distS > 100000 then
                                  distS = ''..string.format('%0.2f', distS/200000)..' su' 
                                elseif distS > 1000 and distS < 100000 then
                                  distS = ''..string.format('%0.1f', distS/1000)..' km'  
                                else
                                  distS = ''..string.format('%0.0f', distS)..' m'     
                                end
                                if szsafe == true then
                                return ''..closestPlanet1.name[1]..' PVP: '..distS..''
                                else
                                return ''..closestPlanet1.name[1]..' SAFE: '..distS..''
                                end
                                            else
                                           safew='::pos{0,0,13771471,7435803,-128971}'
                                        distS = mabs(distsz - safeRadius)
                                        if distS > 100000 then
                                  distS = ''..string.format('%0.2f', distS/200000)..' su' 
                                elseif distS > 1000 and distS < 100000 then
                                  distS = ''..string.format('%0.1f', distS/1000)..' km'  
                                else
                                  distS = ''..string.format('%0.0f', distS)..' m'     
                                end
                                                    return 'SAFE ZONE: '..distS..''
                                                end
                                            end
                                if szsafe == true then
                                safetext='<greencolor1>'..safeZone()..'</greencolor1>'
                                    else
                                    safetext='<redcolor1>'..safeZone()..'</redcolor1>'
                                    end
        stop:
            lua: |
                _autoconf.hideCategoryPanels()
                if antigrav ~= nil then antigrav.hide() end
                if warpdrive ~= nil then warpdrive.hide() end
                if gyro ~= nil then gyro.hide() end
                core.hide()
                Nav.control.switchOffHeadlights()
    shield:
        absorbed(hitpoints,rawHitpoints):
            lua: |
                data1 = shield.getStressRatio()
                newhit=1
                timeD = 1
                AM_rSH = tonumber(data1[1])
                EM_rSH = tonumber(data1[2])
                KI_rSH = tonumber(data1[3])
                TH_rSH = tonumber(data1[4])
                if AM_rSH == 0.0 then AM_rSH = 0 end
                if AM_rSH == 1.0 then AM_rSH = 1 end
                if EM_rSH == 0.0 then EM_rSH = 0 end
                if EM_rSH == 1.0 then EM_rSH = 1 end
                if KI_rSH == 0.0 then KI_rSH = 0 end
                if KI_rSH == 1.0 then KI_rSH = 1 end
                if TH_rSH == 0.0 then TH_rSH = 0 end
                if TH_rSH == 1.0 then TH_rSH = 1 end
                --system.print("before")
                --system.print('AM_rS1 = '..AM_rS1.. ' - rsH =' ..AM_rSH)
                --system.print('EM_rS1 = '..EM_rS1.. ' - rsH =' ..EM_rSH)
                --system.print('KI_rS1 = '..KI_rS1.. ' - rsH =' ..KI_rSH)
                --system.print('TH_rS1 = '..TH_rS1.. ' - rsH =' ..TH_rSH)
                if AM_rSH > AM_rS1 then 
                    AM_rS1 = AM_rSH
                    AM_rS=1
                    AMcolor = "#ff0000"
                    if timeD == 1 then     
                    AM_rM=AM_rM+1
                        end
                else
                    
                    if AM_rSH == 0 or AM_rSH < AM_rS1 then
                    AM_rS1 = AM_rSH
                    AM_rS=0  
                        end
                    end
                    
                if EM_rSH > EM_rS1 then 
                    EM_rS1 = EM_rSH
                    EM_rS=1
                    EMcolor = "#ff0000"
                     if timeD == 1 then     
                    EM_rM=EM_rM+1
                        end
                else
                    
                    if EM_rSH == 0 or EM_rSH < EM_rS1 then
                    EM_rS1 = EM_rSH
                    EM_rSH=0
                        end
                    end
                if KI_rSH > KI_rS1 then 
                    KI_rS1 = KI_rSH
                    KI_rS=1 
                    KIcolor = "#ff0000"
                     if timeD == 1 then     
                    KI_rM=KI_rM+1
                        end
                else
                  
                   if KI_rSH == 0 or KI_rSH < KI_rS1 then
                    KI_rS1 = KI_rSH
                    KI_rS=0
                        end
                    end
                if TH_rSH > TH_rS1 then 
                    TH_rS1 = TH_rSH
                    TH_rS=1
                    THcolor = "#ff0000"
                     if timeD == 1 then     
                    TH_rM=TH_rM+1
                        end
                else
                   
                   if TH_rSH == 0 or TH_rSH < TH_rS1 then
                    TH_rS1 = TH_rSH
                    TH_rS=0
                        end
                    end
                if AM_rSH == AM_rS1 and AM_rSH == 1 then
                        AM_rS1 = AM_rSH
                    AM_rS=1
                    AMcolor = "#ff0000"
                     if timeD == 1 then     
                    AM_rM=AM_rM+1
                        end
                    end
                    
                    if EM_rSH == EM_rS1 and EM_rSH == 1 then 
                        EM_rS1 = EM_rSH
                    EM_rS=1
                    EMcolor = "#ff0000"
                     if timeD == 1 then     
                    EM_rM=EM_rM+1
                        end
                        end
                        
                        if KI_rSH == KI_rS1 and KI_rSH == 1 then 
                        KI_rS1 = KI_rSH
                    KI_rS=1
                    KIcolor = "#ff0000"
                     if timeD == 1 then    
                    KI_rM=KI_rM+1
                        end
                            end
                            
                            if TH_rSH == TH_rS1 and TH_rSH == 1 then 
                        TH_rS1 = TH_rSH
                    TH_rS=1
                    THcolor = "#ff0000"
                     if timeD == 1 then     
                    TH_rM=TH_rM+1
                        end
                                end
                --system.print("after")
                --system.print('AM_rS1 = '..AM_rS1.. ' - rsH =' ..AM_rSH)
                --system.print('EM_rS1 = '..EM_rS1.. ' - rsH =' ..EM_rSH)
                --system.print('KI_rS1 = '..KI_rS1.. ' - rsH =' ..KI_rSH)
                --system.print('TH_rS1 = '..TH_rS1.. ' - rsH =' ..TH_rSH)
        restored:
            lua: |
             system.print("SHIELD READY")
        toggled(active):
            lua: |
             if shield.getState() == 0 then shieldColor = "#fc033d" else shieldColor = "#2ebac9" end
    system:
        update:
            lua: |
              Nav:update()
              if mybr then brakeInput = 1 end
              ThrottleLevel = 0
              if unit.getThrottle()>0 then ThrottleLevel = 100000000 end
              unit.setEngineThrust('maneuver',ThrottleLevel)
        actionStart:
            args: [gear]
            lua: |
                gearExtended = not gearExtended
                if gearExtended then
                    Nav.control.extendLandingGears()
                    Nav.axisCommandManager:setTargetGroundAltitude(0)
                else
                    Nav.control.retractLandingGears()
                    Nav.axisCommandManager:setTargetGroundAltitude(500)
                end
                --data5 = shield.getStressRatio()
                --system.print("-----------------------")
                --system.print(tonumber(data5[1])..'/'..tonumber(data5[2]).. '/'..tonumber(data5[3])..'/' ..tonumber(data5[4]))
                --data6 = shield.getStressRatioRaw()
                --system.print(tonumber(data6[1])..'/'..tonumber(data6[2]).. '/'..tonumber(data6[3])..'/' ..tonumber(data6[4]))
                --system.print('AM_rS1 = '..AM_rS1)
                --system.print('EM_rS1 = '..EM_rS1)
                --system.print('KI_rS1 = '..KI_rS1)
                --system.print('TH_rS1 = '..TH_rS1)
                --system.print(math.floor(core.getPvPTimer()))
        actionStart:
            args: [light]
            lua: |
                if Nav.control.isAnyHeadlightSwitchedOn() == 1 then
                    Nav.control.switchOffHeadlights()
                else
                    Nav.control.switchOnHeadlights()
                end
        actionStart:
            args: [forward]
            lua: |
              pitchInput = pitchInput - 1
        actionStop:
            args: [forward]
            lua: |
              pitchInput = pitchInput + 1
        actionStart:
            args: [backward]
            lua: |
              pitchInput = pitchInput + 1
        actionStop:
            args: [backward]
            lua: |
              pitchInput = pitchInput - 1
        actionStart:
            args: [left]
            lua: |
              rollInput = rollInput - 1
        actionStop:
            args: [left]
            lua: |
              rollInput = rollInput + 1
        actionStart:
            args: [right]
            lua: |
              rollInput = rollInput + 1
        actionStop:
            args: [right]
            lua: |
              rollInput = rollInput - 1
        actionStart:
            args: [straferight]
            lua: |
              Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, 1.0)
        actionStop:
            args: [straferight]
            lua: |
              Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, -1.0)
        actionStart:
            args: [strafeleft]
            lua: |
              Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, -1.0)
        actionStop:
            args: [strafeleft]
            lua: |
              Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, 1.0)
        actionStart:
            args: [up]
            lua: |
                Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
                Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, 1.0)
                if tz1 ~= 2 then tz2=1 end
                if tz1 == 1 and tz2 == 1 then tz1=2 mybr = true end
        actionStop:
            args: [up]
            lua: |
                Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, -1.0)
                Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)
        actionStart:
            args: [down]
            lua: |
                Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
                Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, -1.0)
        actionStop:
            args: [down]
            lua: |
                Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, 1.0)
                Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)
        actionStart:
            args: [groundaltitudeup]
            lua: |
              Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)
        actionLoop:
            args: [groundaltitudeup]
            lua: |
              Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)
        actionStart:
            args: [groundaltitudedown]
            lua: |
              Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)
        actionLoop:
            args: [groundaltitudedown]
            lua: |
              Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)
        actionStart:
            args: [yawright]
            lua: |
              yawInput = yawInput - 1
        actionStop:
            args: [yawright]
            lua: |
              yawInput = yawInput + 1
        actionStart:
            args: [yawleft]
            lua: |
              yawInput = yawInput + 1
        actionStop:
            args: [yawleft]
            lua: |
              yawInput = yawInput - 1
        actionStart:
            args: [brake]
            lua: |
                if tz1 ~= 2 then
                brakeInput = brakeInput + 1
                local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                if (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                    local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)
                    if (math.abs(targetSpeed) > constants.epsilon) then
                        Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, - utils.sign(targetSpeed))
                    end
                    end
                mybr=true
                tz1=1
                    end
                if tz1 == 2 and tz2 == 1 then tz2=0 tz1=0 mybr = false end
        actionStop:
            args: [brake]
            lua: |
                brakeInput = brakeInput - 1
                if tz1==1 then tz1=0 mybr = false end
        actionLoop:
            args: [brake]
            lua: |
                local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                if (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                    local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)
                    if (math.abs(targetSpeed) > constants.epsilon) then
                        Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, - utils.sign(targetSpeed))
                    end
                end
        actionStart:
            args: [booster]
            lua: |
              Nav:toggleBoosters()
        actionStart:
            args: [stopengines]
            lua: |
              Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)
        actionStart:
            args: [speedup]
            lua: |
              Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, 5.0)
        actionLoop:
            args: [speedup]
            lua: |
              Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, 1.0)
        actionStart:
            args: [speeddown]
            lua: |
              Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, -5.0)
        actionLoop:
            args: [speeddown]
            lua: |
              Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, -1.0)
        actionStart:
            args: [antigravity]
            lua: |
              if antigrav ~= nil then antigrav.toggle() end
        actionStop:
            args: [option5]
            lua: |
                  map = 0
                  system.lockView(0)
        actionStart:
            args: [option5]
            lua: |
                if map == 0 then 
                    map = 1
                    system.lockView(1)
                local htmlRadar1 = htmlRadar .. drawMap()
                system.setScreen(htmlRadar1)
                    end
        actionLoop:
            args: [option5]
            lua: |
                if map == 1 then
                local htmlRadar1 = htmlRadar .. drawMap()
                system.setScreen(htmlRadar1)
                xDelta = xDelta + system.getMouseDeltaX()
                yDelta = yDelta + system.getMouseDeltaY()
                end
        actionStart:
            args: [light]
            lua: |
                                if db.getStringValue(15) ~= "" then
                                local way = (db.getStringValue(15)):sub(2)
                                system.setWaypoint(way)
                                end
        actionStart:
            args: [option9]
            lua: |
                if shield.isVenting() == 1 then 
                shield.stopVenting()
                system.print("Shield regeneration has been stopped!") 
                    else
                    if venttime < venttimemax and venttime ~= 0 then
                        system.print("Shield regeneration has already been stopped!")
                        else
                shield.startVenting()
                system.print("Shield regeneration started!") 
                        end
                end
        actionStop:
            args: [lshift]
            lua: |
                  lalt=false
        actionStart:
            args: [lshift]
            lua: |
                --varvw = varvw + 0.1
                --system.print('VW:' ..varvw)
                lalt=true
        actionStart:
            args: [option8]
            lua: |
                                        if lalt == false then
                                        if shield.getState() == 0 then 
                                            shield.activate()
                                            system.print("SHIELD ONLINE")
                                        else
                                            shield.deactivate()
                                            system.print("SHIELD OFFLINE")
                                            end
                                        else
                                        if timeF ~= 62 then
                                        timeD=0
                                        timeF=62
                                        AM_rM=0
                                        EM_rM=0
                                        KI_rM=0
                                        TH_rM=0
                                        summaG=0
                                        system.print("DPM calculation has been reset")
                                        end
                                        end
        actionStart:
            args: [option6]
            lua: |
                if summaG ~= 0 and resisttime == 0 then
                local manualTable = {AM_rM, EM_rM, KI_rM, TH_rM}
                          
                            if Shield_Calibration_Max == true then 
                            table.sort(manualTable, function(a,b)
                 return a > b
                end)
                                
                            if manualTable[1] == manualTable[2] then
                                    --system.print("50%")
                                   shield.setResistances((math.floor(AM_rM/summaG*100)*resMAX)/100,(math.floor(EM_rM/summaG*100)*resMAX)/100,(math.floor(KI_rM/summaG*100)*resMAX)/100,(math.floor(TH_rM/summaG*100)*resMAX)/100)
                                   AMres = math.floor(AM_rM/summaG*100)
                                   EMres = math.floor(EM_rM/summaG*100)
                                   KIres = math.floor(KI_rM/summaG*100)
                                   THres = math.floor(TH_rM/summaG*100) 
                                else
                                
                            if manualTable[1] == AM_rM 
                                    then
                                    system.print("ANTIMATTER POWER 100%")
                                    shield.setResistances(resMAX,0,0,0)
                                    AMres = 100
                                    EMres = 0
                                    KIres = 0
                                    THres = 0 
                                    end
                                    
                             if manualTable[1] == EM_rM 
                                    then
                                    system.print("ELECTROMAGNETIC POWER 100%")
                                    shield.setResistances(0,resMAX,0,0)
                                    AMres = 0
                                    EMres = 100
                                    KIres = 0
                                    THres = 0 
                                    end 
                                        
                             if manualTable[1] == KI_rM then
                                    system.print("KINETIC POWER 100%")
                                    shield.setResistances(0,0,resMAX,0)
                                    AMres = 0
                                    EMres = 0
                                    KIres = 100
                                    THres = 0  
                                    end
                                            
                              if manualTable[1] == TH_rM 
                                    then
                                    system.print("THERMIC POWER 100%")
                                    shield.setResistances(0,0,0,resMAX)
                                    AMres = 0
                                    EMres = 0
                                    KIres = 0
                                    THres = 100 
                                    end       
                            
                            end   
                            
                            else
                            shield.setResistances((math.floor(AM_rM/summaG*100)*resMAX)/100,(math.floor(EM_rM/summaG*100)*resMAX)/100,(math.floor(KI_rM/summaG*100)*resMAX)/100,(math.floor(TH_rM/summaG*100)*resMAX)/100)
                    AMres =  math.floor(AM_rM/summaG*100)
                        EMres =  math.floor(EM_rM/summaG*100)
                        KIres =  math.floor(KI_rM/summaG*100)
                        THres =  math.floor(TH_rM/summaG*100)
                            
                   end
                    timeD=0
                    timeF=62
                    
                    AM_rM=0
                    EM_rM=0
                    KI_rM=0
                    TH_rM=0
                    
                    summaG=0
                    end
        actionStart:
            args: [option7]
            lua: |
                                   if Shield_Auto_Calibration == true then 
                                   Shield_Auto_Calibration = false
                                   else
                                   Shield_Auto_Calibration = true
                                   end
        actionStart:
            args: [option3]
            lua: |
                local DestWaypoint = "::pos{0,0," ..math.floor(Planet[Destination_export].center.x)..","..math.floor(Planet[Destination_export].center.y)..","..math.floor(Planet[Destination_export].center.z).."}"
                if lalt==true then
                system.print(DestinationCenterName)
                system.setWaypoint(DestWaypoint)
                else
                system.print(_stellarObjects[sortestPipeKeyId].name[pipelocalization])
                system.setWaypoint("::pos{0,0," ..math.floor(_stellarObjects[sortestPipeKeyId].center.x).. "," ..math.floor(_stellarObjects[sortestPipeKeyId].center.y).. "," ..math.floor(_stellarObjects[sortestPipeKeyId].center.z).. "}")
                end
        actionStart:
            args: [option4]
            lua: |
                                 DisplayRadar = not(DisplayRadar)
        actionStart:
            args: [option2]
            lua: |
                if lalt==true then
                local function getPipeDistance() 
                             local worldPos = vec3(core.getConstructWorldPos())
                                local pipe = (DestinationCenter - DepartureCenter):normalize()
                                local r = (worldPos -DepartureCenter):dot(pipe) / pipe:dot(pipe)
                                if r <= 0. then
                                   return (worldPos-DepartureCenter):len()
                                elseif r >= (DestinationCenter - DepartureCenter):len() then
                                   return (worldPos-DestinationCenter):len()
                                end
                                local L = DepartureCenter + (r * pipe)
                                --pipeDistance = (L - worldPos):len()
                                local PipeWaypoint = "::pos{0,0," ..math.floor(L.x).. "," ..math.floor(L.y).. "," ..math.floor(L.z).. "}"
                                return PipeWaypoint
                            end
                system.print("PIPE CENTER: " ..DepartureCenterName.. " - " ..DestinationCenterName)
                system.setWaypoint(getPipeDistance())
                else
                local function getPipeDistance() 
                        local DestinationCenter = vec3(_stellarObjects[sortestPipeKeyId].center)
                        local DepartureCenter = vec3(_stellarObjects[sortestPipeKey2Id].center)
                             local worldPos = vec3(core.getConstructWorldPos())
                                local pipe = (DestinationCenter - DepartureCenter):normalize()
                                local r = (worldPos -DepartureCenter):dot(pipe) / pipe:dot(pipe)
                                if r <= 0. then
                                   return (worldPos-DepartureCenter):len()
                                elseif r >= (DestinationCenter - DepartureCenter):len() then
                                   return (worldPos-DestinationCenter):len()
                                end
                                local L = DepartureCenter + (r * pipe)
                                --pipeDistance = (L - worldPos):len()
                                local PipeWaypoint = "::pos{0,0," ..math.floor(L.x).. "," ..math.floor(L.y).. "," ..math.floor(L.z).. "}"
                                return PipeWaypoint
                            end 
                local clpipeMSG = "PIPE CENTER: ".._stellarObjects[sortestPipeKeyId].name[pipelocalization].. " - " .. _stellarObjects[sortestPipeKey2Id].name[pipelocalization]
                system.print(clpipeMSG)
                system.setWaypoint(getPipeDistance())
                end
        actionStart:
            args: [option1]
            lua: |
                local DepartureWaypoint = "::pos{0,0," ..math.floor(Planet[Departure_export].center.x)..","..math.floor(Planet[Departure_export].center.y)..","..math.floor(Planet[Departure_export].center.z).."}"
                if lalt==true then
                system.print(DepartureCenterName)
                system.setWaypoint(DepartureWaypoint)
                else
                system.print(_stellarObjects[sortestPipeKey2Id].name[pipelocalization])
                system.setWaypoint("::pos{0,0," ..math.floor(_stellarObjects[sortestPipeKey2Id].center.x).. "," ..math.floor(_stellarObjects[sortestPipeKey2Id].center.y).. "," ..math.floor(_stellarObjects[sortestPipeKey2Id].center.z).. "}")
                end
        inputText(text):
            lua: |
                    if text == "a" then
                            shield.setResistances(resMAX,0,0,0)
                            system.print("ANTIMATTER POWER: 100%")  
                            AMres = 100
                            EMres = 0
                            KIres = 0
                            THres = 0
                            
                            timeD=0
                            timeF=62
                            
                            AM_rM=0
                            EM_rM=0
                            KI_rM=0
                            TH_rM=0
                            
                            summaG=0
                                end
                            if text == "e" then
                            shield.setResistances(0,resMAX,0,0)
                            system.print("ELECTROMAGNETIC POWER: 100%")
                            AMres = 0
                            EMres = 100
                            KIres = 0
                            THres = 0
                            
                            timeD=0
                            timeF=62
                            
                            AM_rM=0
                            EM_rM=0
                            KI_rM=0
                            TH_rM=0
                            
                            summaG=0
                                end
                            if text == "k" then
                            shield.setResistances(0,0,resMAX,0)
                            system.print("KINETIC POWER: 100%")
                            AMres = 0
                            EMres = 0
                            KIres = 100
                            THres = 0
                            
                            timeD=0
                            timeF=62
                            
                            AM_rM=0
                            EM_rM=0
                            KI_rM=0
                            TH_rM=0
                            
                            summaG=0
                                end
                            if text == "t" then
                            shield.setResistances(0,0,0,resMAX)
                            system.print("THERMIC POWER: 100%")
                            AMres = 0
                            EMres = 0
                            KIres = 0
                            THres = 100 
                            
                            timeD=0
                            timeF=62
                            
                            AM_rM=0
                            EM_rM=0
                            KI_rM=0
                            TH_rM=0
                            
                            summaG=0
                                end
                            if text == "l" then
                            shield.setResistances(0,resMAX/2,0,resMAX/2)
                            system.print("LASER PROFILE: 50/50%")
                            AMres = 0
                            EMres = 50
                            KIres = 0
                            THres = 50 
                            
                            timeD=0
                            timeF=62
                            
                            AM_rM=0
                            EM_rM=0
                            KI_rM=0
                            TH_rM=0
                            
                            summaG=0
                                end
                            if text == "c" then
                            shield.setResistances(0,0,resMAX/2,resMAX/2)
                            system.print("CANNON PROFILE: 50/50%")
                            AMres = 0
                            EMres = 0
                            KIres = 50
                            THres = 50 
                            
                            timeD=0
                            timeF=62
                            
                            AM_rM=0
                            EM_rM=0
                            KI_rM=0
                            TH_rM=0
                            
                            summaG=0
                                end
                           if text == "m" then
                            shield.setResistances(resMAX/2,0,resMAX/2,0)
                            system.print("MISSILE PROFILE: 50/50%")
                            AMres = 50
                            EMres = 0
                            KIres = 50
                            THres = 0 
                            
                            timeD=0
                            timeF=62
                            
                            AM_rM=0
                            EM_rM=0
                            KI_rM=0
                            TH_rM=0
                            
                            summaG=0
                                end
                                
                            if text == "r" then
                            shield.setResistances(resMAX/2,resMAX/2,0,0)
                            system.print("RAILGUN PROFILE: 50/50%")
                            AMres = 50
                            EMres = 50
                            KIres = 0
                            THres = 0 
                            
                            timeD=0
                            timeF=62
                            
                            AM_rM=0
                            EM_rM=0
                            KI_rM=0
                            TH_rM=0
                            
                            summaG=0
                                end
                        if text =="drop" then
                        local listships = core.getDockedConstructs()
                        for i=1, #listships do
                        core.forceUndock(listships[i])
                        end
                        system.print("All ships were successfully undocked")
                                            end
                                        if text =="sw" then
                                            shield.show()
                                            end
                                            
                                        if text =="sz" then
                                        system.setWaypoint(safew)
                                        system.print("Closest safe zone")
                                            end
                                        if text =="szc" then
                                        system.setWaypoint("::pos{0,0,13771471,7435803,-128971}")
                                        system.print("Safe zone center")
                                            end
                                        if text =="max" then
                                        if Shield_Calibration_Max == true
                                            then
                                           Shield_Calibration_Max = false
                                            else
                                           Shield_Calibration_Max = true
                                        end
                                        end
                                        if text =="swd" then
                                        if warpdrive ~= nil then warpdrive.show() end
                                        end
                                        if text=="helper" then
                                        if bhelper == false then
                                        bhelper = true
                                        system.showHelper(1)
                                        else
                                        bhelper = false
                                        system.showHelper(0)
                                        end
                                        end
                                        if string.find (text,'m::pos') then
                                            coratinka=1
                                            asteroidPOS = ""..text..""
                                            db.setStringValue(15,asteroidPOS)
                                            asteroidcoord = zeroConvertToWorldCoordinatesG(asteroidPOS)
                                            system.print("POS was added to the map and saved to the databank")
                                            function ct()
                                                    while true do
                                                    local i=0
                                                    local ClosestPlanet={}
                                                    destination_bm=text
                                                    destination_wp=zeroConvertToWorldCoordinates(destination_bm,system)
                                                                ClosestPlanet.globalpipedistance=999999999999
                                                                
                                                                --trouve la planete la plus proche de la destination
                                                                ClosestPlanet.name, ClosestPlanet.distance = getClosestPlanet(destination_wp)
                                                                --ClosestDPlanetMessage="Your destination is ".. round(ClosestPlanet.distance/200000 , 2) .." from "..ClosestPlanet.name
                                                                
                                                                --trouve le pipe le plus proche de la destination
                                                                for BodyId in pairs(atlas[0]) do
                                                                i=i+1
                                                                    local startLocation=atlas[0][BodyId]
                                                                       ClosestPlanet.pipename, ClosestPlanet.pipedistance=getClosestPipe(destination_wp, startLocation)
                                                                       if ClosestPlanet.pipedistance<ClosestPlanet.globalpipedistance then
                                                                           ClosestPlanet.globalpipedistance=ClosestPlanet.pipedistance
                                                                           ClosestPlanet.globalpipestart=startLocation.name[1]
                                                                           ClosestPlanet.globalpipestop=ClosestPlanet.pipename
                                                                       end
                                                                   if i > 5 then
                                                                   i = 0
                                                                    coroutine.yield()
                                                                    end 
                                                                end
                                                                local SafeZoneDistance=getSafeZoneDistance(destination_wp)
                                                                if SafeZoneDistance < 0 then
                                                                     ClosestDSafeZoneMessage="in SAFE-ZONE!"
                                                                 else
                                                                     ClosestDSafeZoneMessage=customDistance(SafeZoneDistance).. " to SAFE-ZONE"
                                                                    
                                                                end
                                                posmessage="CLOSEST PIPE: "..ClosestPlanet.globalpipestart.." - "..ClosestPlanet.globalpipestop.." ("..customDistance(ClosestPlanet.globalpipedistance).."), CLOSEST PLANET: "..ClosestPlanet.name.." ("..customDistance(ClosestPlanet.distance).."), "..ClosestDSafeZoneMessage
                                        system.print(posmessage)
                                            
                                            coroutine.yield()
                                                   coratinka=0
                                            end
                                                
                                                        
                                            end
                                        ck = coroutine.create(ct)
                                        end
        flush:
            lua: |
                local pitchSpeedFactor = 0.8 --export: This factor will increase/decrease the player input along the pitch axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
                local yawSpeedFactor =  1 --export: This factor will increase/decrease the player input along the yaw axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
                local rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
                local brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
                local brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
                local autoRoll = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
                local autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
                local turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
                local turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
                local torqueFactor = 2 -- Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
                -- validate params
                pitchSpeedFactor = math.max(pitchSpeedFactor, 0.01)
                yawSpeedFactor = math.max(yawSpeedFactor, 0.01)
                rollSpeedFactor = math.max(rollSpeedFactor, 0.01)
                torqueFactor = math.max(torqueFactor, 0.01)
                brakeSpeedFactor = math.max(brakeSpeedFactor, 0.01)
                brakeFlatFactor = math.max(brakeFlatFactor, 0.01)
                autoRollFactor = math.max(autoRollFactor, 0.01)
                turnAssistFactor = math.max(turnAssistFactor, 0.01)
                -- final inputs
                local finalPitchInput = pitchInput + system.getControlDeviceForwardInput()
                local finalRollInput = rollInput + system.getControlDeviceYawInput()
                local finalYawInput = yawInput - system.getControlDeviceLeftRightInput()
                local finalBrakeInput = brakeInput
                -- Axis
                local worldVertical = vec3(core.getWorldVertical()) -- along gravity
                local constructUp = vec3(core.getConstructWorldOrientationUp())
                local constructForward = vec3(core.getConstructWorldOrientationForward())
                local constructRight = vec3(core.getConstructWorldOrientationRight())
                local constructVelocity = vec3(core.getWorldVelocity())
                local constructVelocityDir = vec3(core.getWorldVelocity()):normalize()
                local currentRollDeg = getRoll(worldVertical, constructForward, constructRight)
                local currentRollDegAbs = math.abs(currentRollDeg)
                local currentRollDegSign = utils.sign(currentRollDeg)
                -- Rotation
                local constructAngularVelocity = vec3(core.getWorldAngularVelocity())
                local targetAngularVelocity = finalPitchInput * pitchSpeedFactor * constructRight
                                                + finalRollInput * rollSpeedFactor * constructForward
                                                + finalYawInput * yawSpeedFactor * constructUp
                -- In atmosphere?
                if worldVertical:len() > 0.01 and unit.getAtmosphereDensity() > 0.0 then
                    local autoRollRollThreshold = 1.0
                    -- autoRoll on AND currentRollDeg is big enough AND player is not rolling
                    if autoRoll == true and currentRollDegAbs > autoRollRollThreshold and finalRollInput == 0 then
                        local targetRollDeg = utils.clamp(0,currentRollDegAbs-30, currentRollDegAbs+30);  -- we go back to 0 within a certain limit
                        if (rollPID == nil) then
                            rollPID = pid.new(autoRollFactor * 0.01, 0, autoRollFactor * 0.1) -- magic number tweaked to have a default factor in the 1-10 range
                        end
                        rollPID:inject(targetRollDeg - currentRollDeg)
                        local autoRollInput = rollPID:get()
                        targetAngularVelocity = targetAngularVelocity + autoRollInput * constructForward
                    end
                    local turnAssistRollThreshold = 20.0
                    -- turnAssist AND currentRollDeg is big enough AND player is not pitching or yawing
                    if turnAssist == true and currentRollDegAbs > turnAssistRollThreshold and finalPitchInput == 0 and finalYawInput == 0 then
                        local rollToPitchFactor = turnAssistFactor * 0.1 -- magic number tweaked to have a default factor in the 1-10 range
                        local rollToYawFactor = turnAssistFactor * 0.025 -- magic number tweaked to have a default factor in the 1-10 range
                        -- rescale (turnAssistRollThreshold -> 180) to (0 -> 180)
                        local rescaleRollDegAbs = ((currentRollDegAbs - turnAssistRollThreshold) / (180 - turnAssistRollThreshold)) * 180
                        local rollVerticalRatio = 0
                        if rescaleRollDegAbs < 90 then
                            rollVerticalRatio = rescaleRollDegAbs / 90
                        elseif rescaleRollDegAbs < 180 then
                            rollVerticalRatio = (180 - rescaleRollDegAbs) / 90
                        end
                        rollVerticalRatio = rollVerticalRatio * rollVerticalRatio
                        local turnAssistYawInput = - currentRollDegSign * rollToYawFactor * (1.0 - rollVerticalRatio)
                        local turnAssistPitchInput = rollToPitchFactor * rollVerticalRatio
                        targetAngularVelocity = targetAngularVelocity
                                            + turnAssistPitchInput * constructRight
                                            + turnAssistYawInput * constructUp
                    end
                end
                -- Engine commands
                local keepCollinearity = 1 -- for easier reading
                local dontKeepCollinearity = 0 -- for easier reading
                local tolerancePercentToSkipOtherPriorities = 1 -- if we are within this tolerance (in%), we don't go to the next priorities
                -- Rotation
                local angularAcceleration = torqueFactor * (targetAngularVelocity - constructAngularVelocity)
                local airAcceleration = vec3(core.getWorldAirFrictionAngularAcceleration())
                angularAcceleration = angularAcceleration - airAcceleration -- Try to compensate air friction
                Nav:setEngineTorqueCommand('torque', angularAcceleration, keepCollinearity, 'airfoil', '', '', tolerancePercentToSkipOtherPriorities)
                -- Brakes
                local brakeAcceleration = -finalBrakeInput * (brakeSpeedFactor * constructVelocity + brakeFlatFactor * constructVelocityDir)
                Nav:setEngineForceCommand('brake', brakeAcceleration)
                -- AutoNavigation regroups all the axis command by 'TargetSpeed'
                local autoNavigationEngineTags = ''
                local autoNavigationAcceleration = vec3()
                local autoNavigationUseBrake = false
                -- Longitudinal Translation
                local longitudinalEngineTags = 'thrust analog longitudinal'
                local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                if (longitudinalCommandType == axisCommandType.byThrottle) then
                    local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(longitudinalEngineTags,axisCommandId.longitudinal)
                    Nav:setEngineForceCommand(longitudinalEngineTags, longitudinalAcceleration, keepCollinearity)
                elseif  (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                    local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)
                    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. longitudinalEngineTags
                    autoNavigationAcceleration = autoNavigationAcceleration + longitudinalAcceleration
                    if (Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal) == 0 or -- we want to stop
                        Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal) < - Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal) * 0.5) -- if the longitudinal velocity would need some braking
                    then
                        autoNavigationUseBrake = true
                    end
                end
                -- Lateral Translation
                local lateralStrafeEngineTags = 'thrust analog lateral'
                local lateralCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)
                if (lateralCommandType == axisCommandType.byThrottle) then
                    local lateralStrafeAcceleration =  Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lateralStrafeEngineTags,axisCommandId.lateral)
                    Nav:setEngineForceCommand(lateralStrafeEngineTags, lateralStrafeAcceleration, keepCollinearity)
                elseif  (lateralCommandType == axisCommandType.byTargetSpeed) then
                    local lateralAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)
                    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. lateralStrafeEngineTags
                    autoNavigationAcceleration = autoNavigationAcceleration + lateralAcceleration
                end
                -- Vertical Translation
                local verticalStrafeEngineTags = 'thrust analog vertical'
                local verticalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)
                if (verticalCommandType == axisCommandType.byThrottle) then
                    local verticalStrafeAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(verticalStrafeEngineTags,axisCommandId.vertical)
                    Nav:setEngineForceCommand(verticalStrafeEngineTags, verticalStrafeAcceleration, keepCollinearity, 'airfoil', 'ground', '', tolerancePercentToSkipOtherPriorities)
                elseif  (verticalCommandType == axisCommandType.byTargetSpeed) then
                    local verticalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)
                    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. verticalStrafeEngineTags
                    autoNavigationAcceleration = autoNavigationAcceleration + verticalAcceleration
                end
                -- Auto Navigation (Cruise Control)
                if (autoNavigationAcceleration:len() > constants.epsilon) then
                    if (brakeInput ~= 0 or autoNavigationUseBrake or math.abs(constructVelocityDir:dot(constructForward)) < 0.95)  -- if the velocity is not properly aligned with the forward
                    then
                        autoNavigationEngineTags = autoNavigationEngineTags .. ', brake'
                    end
                    Nav:setEngineForceCommand(autoNavigationEngineTags, autoNavigationAcceleration, dontKeepCollinearity, '', '', '', tolerancePercentToSkipOtherPriorities)
                end
                -- Rockets
                Nav:setBoosterCommand('rocket_engine')