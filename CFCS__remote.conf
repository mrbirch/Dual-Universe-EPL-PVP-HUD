name: CFCS-Remote v1.3 (public)

slots:
    core:
        class: CoreUnit
    warpdrive:
        class: WarpDriveUnit
    atmofueltank:
        class: AtmoFuelContainer
        select: manual
    spacefueltank:
        class: SpaceFuelContainer
        select: manual
    rocketfueltank:
        class: RocketFuelContainer
        select: manual
    shield:
        class: ShieldGeneratorUnit
    weapon:
        class: WeaponUnit
        select: manual
    radar:
        class: RadarPVPUnit
        select: manual
handlers:
    library:
        start:
            lua: |
                function library.addEventHandlers(a)local b=0;a.onEvent=function(self,c,d)if not'function'==type(d)then error('Event handler must be a function!')end;if not self.__eventHandlers then self.__eventHandlers={}end;if not self.__eventHandlers[c]then self.__eventHandlers[c]={}end;b=b+1;self.__eventHandlers[c][b]=d;return b end;a.clearEvent=function(self,c,e)if seld.__eventHandlers and self.__eventHandlers[c]and self.__eventHandlers[c][e]then table.remove(self.__eventHandlers[c],e)end end;a.triggerEvent=function(self,c,...)if not self.__eventHandlers then return end;if self.__eventHandlers[c]then for f,d in pairs(self.__eventHandlers[c])do d(self,...)end end end end
                library.addEventHandlers(library)
        start:
            lua: |
                package.preload['du-pipe-distance:atlas']=function(...)_stellarObjects={[0]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=True,isSanctuary=False,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=True,isSanctuary=False,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=True,isSanctuary=False,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=True,isSanctuary=False,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=True,isSanctuary=False,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=True,isSanctuary=False,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=True,isSanctuary=True,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=True,isSanctuary=False,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=True,isSanctuary=False,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=True,isSanctuary=False,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=True,isSanctuary=False,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=True,isSanctuary=False,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=True,isSanctuary=False,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0}}end
    unit:
        start:
            lua: |
                local ok1 = pcall(require,'autoconf/custom/CFCS_HUD/helios')
                if not ok1 then
                system.print('Module "CFCS_HUD" not found!')
                unit.exit()
                end
                require('du-pipe-distance:atlas')
                function calcDistance(a,b,c)
                    local d=(b-a):normalize()
                    local e=(c-a):dot(d)/d:dot(d)
                    if e<=0.then return(c-a):len()elseif e>=(b-a):len()then return(c-b):len()end;
                    local f=a+e*d;pipeDistance=(f-c):len()return pipeDistance end;
                    
                function calcDistanceStellar(g,h,i)
                    local a=vec3(g.center)local b=vec3(h.center)return calcDistance(a,b,i)end;
                refreshPipeData=function(j)
                    while true do local k=nil;
                        local l=nil;for m in pairs(_stellarObjects)do
                            local n=vec3(_stellarObjects[m].center)local o=vec3(j-n):len()if k==nil or o<k then k=o;l=m end 
                        end;
                        if showClosestPlanet==true then planetInfoData.value=_stellarObjects[l].name;
                            system.updateData(planetInfoDataId,json.encode(planetInfoData))end;
                        if showClosestPipe==true or showClosestPipeDist==true or showAliothClosestPipe==true or showAliothClosestPipeDist==true then closestPlanet=_stellarObjects[l]nearestPipeDistance=nil;nearestAliothPipeDistance=nil;
                for m in pairs(_stellarObjects)do for p in pairs(_stellarObjects)do if p>m then pipeDistance=calcDistanceStellar(_stellarObjects[m],_stellarObjects[p],j)
                                        if nearestPipeDistance==nil or pipeDistance<nearestPipeDistance then nearestPipeDistance=pipeDistance;sortestPipeKeyId=m;sortestPipeKey2Id=p end;
                                        if _stellarObjects[m].name=="Alioth"and(nearestAliothPipeDistance==nil or pipeDistance<nearestAliothPipeDistance)then nearestAliothPipeDistance=pipeDistance;sortestAliothPipeKeyId=m;sortestAliothPipeKey2Id=p end end end end;
                            if showClosestPipe==true then closestPipeData.value=_stellarObjects[sortestPipeKeyId].name.." - ".._stellarObjects[sortestPipeKey2Id].name;system.updateData(closestPipeDataId,json.encode(closestPipeData))end;
                            if showClosestPipeDist==true then closestPipeDistData.value=string.format("%03.2f",nearestPipeDistance/200000.0)system.updateData(closestPipeDistDataId,json.encode(closestPipeDistData))end;
                            if showAliothClosestPipe==true then closestAliothPipeData.value=_stellarObjects[sortestAliothPipeKeyId].name.." - ".._stellarObjects[sortestAliothPipeKey2Id].name;system.updateData(closestAliothPipeDataId,json.encode(closestAliothPipeData))end;
                            if showAliothClosestPipeDist==true then closestAliothPipeDistData.value=string.format("%03.2f",nearestAliothPipeDistance/200000.0)
                                system.updateData(closestAliothPipeDistDataId,json.encode(closestAliothPipeDistData))end end;j=coroutine.yield()end end;
                local q="Pipe info"showClosestPlanet=true;showClosestPipe=true;showClosestPipeDist=true;showAliothClosestPipe=true;showAliothClosestPipeDist=true;
                --panelid=system.createWidgetPanel(q)
                if showClosestPlanet==true then 
                   widgetClosestPlanetId=system.createWidget(panelid,"value")
                    planetInfoData={value="XYZ",unit="",label="Closest planet"}
                    
                   planetInfoDataId=system.createData(json.encode(planetInfoData))
                    system.addDataToWidget(planetInfoDataId,widgetClosestPlanetId)end;
                if showClosestPipe==true then closestPipeId=system.createWidget(panelid,"value")
                    closestPipeData={value="XYZ",unit="",label="Closest Pipe"}
                    closestPipeDataId=system.createData(json.encode(closestPipeData))
                    system.addDataToWidget(closestPipeDataId,closestPipeId)end;
                if showClosestPipeDist==true then 
                    closestPipeDistId=system.createWidget(panelid,"value")
                    closestPipeDistData={value="0.0",unit="su",label="Pipe dist."}
                    closestPipeDistDataId=system.createData(json.encode(closestPipeDistData))
                    system.addDataToWidget(closestPipeDistDataId,closestPipeDistId)end;
                closestAliothPipeId=system.createWidget(panelid,"value")
                closestAliothPipeData={value="XYZ",unit="",label="Alioth Pipe"}
                closestAliothPipeDataId=system.createData(json.encode(closestAliothPipeData))
                system.addDataToWidget(closestAliothPipeDataId,closestAliothPipeId)
                if showAliothClosestPipeDist==true then 
                    closestAliothPipeDistId=system.createWidget(panelid,"value")
                    closestAliothPipeDistData={value="0.0",unit="SU",label="Alioth pipe dist."}
                    closestAliothPipeDistDataId=system.createData(json.encode(closestAliothPipeDistData))
                    system.addDataToWidget(closestAliothPipeDistDataId,closestAliothPipeDistId)end;
                refreshCoroutine=coroutine.create(refreshPipeData)
                coroutine.resume(refreshCoroutine,vec3(core.getConstructWorldPos()))
                
                pitchInput = 0
                rollInput = 0
                yawInput = 0
                brakeInput = 0
                
                Nav = Navigator.new(system, core, unit)
                Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal, {1000, 5000, 10000, 20000, 30000})
                Nav.axisCommandManager:setTargetGroundAltitude(4)
                
                -- Parenting widget
                --parentingPanelId = system.createWidgetPanel("Docking")
                --parentingWidgetId = system.createWidget(parentingPanelId,"parenting")
                --system.addDataToWidget(unit.getDataId(),parentingWidgetId)
                
                -- Combat stress widget
                --coreCombatStressPanelId = system.createWidgetPanel("Core combat stress")
                --coreCombatStressgWidgetId = system.createWidget(coreCombatStressPanelId,"core_stress")
                --system.addDataToWidget(core.getDataId(),coreCombatStressgWidgetId)
                
                -- element widgets
                -- For now we have to alternate between PVP and non-PVP widgets to have them on the same side.
                --_autoconf.displayCategoryPanel(weapon, weapon_size, L_TEXT("ui_lua_widget_weapon", "Weapons"), "weapon", true)
                --core.show()
                --_autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_periscope", "Periscope"), "periscope")
                --placeRadar = true
                if atmofueltank_size > 0 then
                    --_autoconf.displayCategoryPanel(atmofueltank, atmofueltank_size, L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"), "fuel_container")
                    if placeRadar then
                        --_autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_radar", "Radar"), "radar")
                        placeRadar = false
                    end
                end
                if spacefueltank_size > 0 then
                    --_autoconf.displayCategoryPanel(spacefueltank, spacefueltank_size, L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"), "fuel_container")
                    if placeRadar then
                        --_autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_radar", "Radar"), "radar")
                        placeRadar = false
                    end
                end
                _autoconf.displayCategoryPanel(rocketfueltank, rocketfueltank_size, L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"), "fuel_container")
                if placeRadar then -- We either have only rockets or no fuel tanks at all, uncommon for usual vessels
                    _autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_radar", "Radar"), "radar")
                    placeRadar = false
                end
                --if antigrav ~= nil then antigrav.show() end
                if warpdrive ~= nil then warpdrive.show() end
                --if gyro ~= nil then gyro.show() end
                --if shield ~= nil then shield.show() end
                
                -- freeze the player in he is remote controlling the construct
                if Nav.control.isRemoteControlled() == 1 then
                    system.freeze(1)
                end
                
                -- landing gear
                -- make sure every gears are synchonized with the first
                gearExtended = (Nav.control.isAnyLandingGearExtended() == 1) -- make sure it's a lua boolean
                if gearExtended then
                    Nav.control.extendLandingGears()
                else
                    Nav.control.retractLandingGears()
                end
                
                    referenceTableSource = require('autoconf/custom/CFCS_HUD/helios')
                    --numFormat = require('autoconf/custom/CFCS_HUD/numFormat')
                    PlanetaryReference = require('autoconf/custom/CFCS_HUD/planetref')
                    galaxyReference = PlanetaryReference(referenceTableSource)
                    helios = galaxyReference[0]
                    closestPlanet = helios[helios:closestBody(core.getConstructWorldPos()).bodyId]
                    safew=''
                    safeZones = {
                      {id = 1, name = "Madis", center = {17465536,22665536,-34464}},
                      {id = 10, name = "Madis Moon 1", center = {17448118.224,22966846.286,143078.82}},
                      {id = 11, name = "Madis Moon 2", center = {17194626,22243633.88,-214962.81}},
                      {id = 12, name = "Madis Moon 3", center = {17520614,22184730,-309989.99}},
                      {id = 2, name = "Alioth", center = {-8,-8,-126303}},
                      {id = 21, name = "Alioth Moon 1", center = {457933,-1509011,115524}},
                      {id = 22, name = "Alioth Moon 4", center = {-1692694,729681,-411464}},
                      {id = 26, name = "Sanctuary Moon", center = {-1404835,562655,-285074}},
                      {id = 3, name = "Thades", center = {29165536,10865536,65536}},
                      {id = 30, name = "Thades Moon 1", center = {29214402,10907080.695,433858.2}},
                      {id = 31, name = "Thades Moon 2", center = {29404193,10432768,19554.131}},
                      {id = 4, name = "Talemai", center = {-13234464,55765536,465536}},
                      {id = 42, name = "Talemai Moon 1", center = {-13058408,55781856,740177.76}},
                      {id = 40, name = "Talemai Moon 2", center = {-13503090,55594325,769838.64}},
                      {id = 41, name = "Talemai Moon 3", center = {-12800515,55700259,325207.84}},
                      {id = 5, name = "Feli", center = {-43534464,22565536,-48934464}},
                      {id = 50, name = "Feli Moon 1", center = {-43902841.78,22261034.7,-48862386}},
                      {id = 6, name = "Sicari", center = {52765536,27165538,52065535}},
                      {id = 7, name = "Sinnen", center = {58665538,29665535,58165535}},
                      {id = 70, name = "Sinnen Moon 1", center = {58969616,29797945,57969449}},
                      {id = 8, name = "Teoma", center = {80865538,54665536,-934463.94}},
                      {id = 9, name = "Jago", center = {-94134462,12765534,-3634464}},
                      {id = 100, name = "Lacobus", center = {98865536,-13534464,-934461.99}},
                      {id = 102, name = "Lacobus Moon 1", center = {99180968,-13783862,-926156.4}},
                      {id = 103, name = "Lacobus Moon 2", center = {99250052,-13629215,-1059341.4}},
                      {id = 101, name = "Lacobus Moon 3", center = {98905288.17,-13950921.1,-647589.53}},
                      {id = 110, name = "Symeon", center = {14165536,-85634465,-934464.3}},
                      {id = 120, name = "Ion", center = {2865536.7,-99034464,-934462.02}},
                      {id = 121, name = "Ion Moon 1", center = {2472916.8,-99133747,-1133582.8}},
                      {id = 122, name = "Ion Moon 2", center = {2995424.5,-99275010,-1378480.7}}
                    }
                    
                    function pD()
                    pipeD = ''
                    if nearestPipeDistance > 100000 then
                      pipeD = ''..string.format('%0.2f', nearestPipeDistance/200000)..'su' 
                    elseif nearestPipeDistance > 1000 and nearestPipeDistance < 100000 then
                      pipeD = ''..string.format('%0.1f', nearestPipeDistance/1000)..'km'  
                    else
                      pipeD = ''..string.format('%0.0f', nearestPipeDistance)..'m'  
                    end
                        if nearestPipeDistance > 600000 then
                        return closestPipeData.value.. '<br>' .. '<greencolor1>'..pipeD..'</greencolor1>'
                            end
                        if nearestPipeDistance > 400000 and nearestPipeDistance < 600000 then
                        return closestPipeData.value.. '<br>' .. '<orangecolor>'..pipeD..'</orangecolor>'
                            end
                        if nearestPipeDistance < 400000 then
                        return closestPipeData.value.. '<br>' .. '<redcolor1>'..pipeD..'<redcolor1>'
                            end
                        end
                    cPlan = ''
                    distS = ''
                    safetext=''
                    szsafe=true
                    distZ = 0
                    function safeZone()
                    end
                    tz1=0
                    tz2=0
                    varvw = 0
                    varvh = 0
                    varcombat=math.floor(core.getPvPTimer())
                    if varcombat > 0 then varcombat = 1 end
                    lalt=false
                    AMcolor = "#6affb1"
                    EMcolor = "#6affb1"
                    KIcolor = "#6affb1"
                    THcolor = "#6affb1"
                    Shield_1hit_Calibration = false
                    Shield_Auto_Calibration = false --export: (AUTO/MANUAL) shield mode
                    Shield_Calibration_Max = false --export: (MAX/EQ) calibration of the entire shield power by the largest resistы based on DPM
                    Show_vanilla_shield_widget = false --export:
                    Show_combatstress_widget = false --export:
                    Departure_export = 4 --export:
                    Destination_export = 27 --export:
                    local CFCS_Background_Color = "#142027" --export: Backgroung color CFCS system
                    local CFCS_PipeText_Color = "#FFFFFF" --export: Pipe text color
                    local CFCS_PipeY = -0.1 --export:
                    local CFCS_PipeX = 15.5 --export:
                    local CFCS_Y = 50 --export:
                    local CFCS_TextY = 12 --export:
                    local CFCS_RightBlock_X = 30 --export:
                    local CFCS_LeftBlock_X = 12 --export:
                    if Show_vanilla_shield_widget then shield.show() end
                    if Show_combatstress_widget then
                    coreCombatStressPanelId = system.createWidgetPanel("Core combat stress")
                    coreCombatStressgWidgetId = system.createWidget(coreCombatStressPanelId,"core_stress")
                    system.addDataToWidget(core.getDataId(),coreCombatStressgWidgetId)
                    end
                    newhit=0
                    AM_rSH = 0
                    EM_rSH = 0
                    KI_rSH = 0
                    TH_rSH = 0
                    docki=0
                    data3 = shield.getStressRatio()
                    AM_rS1 = tonumber(data3[1])
                    EM_rS1 = tonumber(data3[2])
                    KI_rS1 = tonumber(data3[3])
                    TH_rS1 = tonumber(data3[4])
                    if AM_rS1 == 0.0 then AM_rS1 = 0 end
                    if AM_rS1 == 1.0 then AM_rS1 = 1 end
                    if EM_rS1 == 0.0 then EM_rS1 = 0 end
                    if EM_rS1 == 1.0 then EM_rS1 = 1 end
                    if KI_rS1 == 0.0 then KI_rS1 = 0 end
                    if KI_rS1 == 1.0 then KI_rS1 = 1 end
                    if TH_rS1 == 0.0 then TH_rS1 = 0 end
                    if TH_rS1 == 1.0 then TH_rS1 = 1 end
                    --system.print("start")
                    --system.print('AM_rS1 = '..AM_rS1)
                    --system.print('EM_rS1 = '..EM_rS1)
                    --system.print('KI_rS1 = '..KI_rS1)
                    --system.print('TH_rS1 = '..TH_rS1)
                    dpstimer = ""
                    resCLWN = ""
                    ventCLWN = ""
                    damageText = ""
                    AMval = 0
                    EMval = 0
                    KIval = 0
                    THval = 0
                    if Shield_Auto_Calibration
                        then
                        if Shield_Calibration_Max then
                    shieldText = "SHIELD (AUTO,MAX)"
                    end
                    
                    if not Shield_Calibration_Max then
                    shieldText = "SHIELD (AUTO,EQ)"
                    end
                        
                        else
                        
                    if Shield_Calibration_Max then
                    shieldText = "SHIELD (MANUAL,MAX)"
                    end
                    
                    if not Shield_Calibration_Max then
                    shieldText = "SHIELD (MANUAL,EQ)"
                    end
                        
                    end
                    
                brakeText = ""
                if shield.getState() == 0 then 
                    shieldColor = "#fc033d"
                else
                    shieldColor = "#2ebac9"
                    end
                resisttime = 0
                venttime = 0
                venttimemax = shield.getVentingMaxCooldown()
                resisttimemax = shield.getResistancesMaxCooldown()
                AM_r=0
                EM_r=0
                KI_r=0
                TH_r=0
                AM_rS=0
                EM_rS=0
                KI_rS=0
                TH_rS=0
                AM_rM=0
                EM_rM=0
                KI_rM=0
                TH_rM=0
                timeD=0
                timeF=62
                resMAX = 0.6
                tormoz=0
                manualTable = {}
                TEMPtable = {}
                DPMtable = {}
                DPStable = {}
                --top: ]]..varvh..[[vh;
                -- left: ]]..varvw..[[vw;
                shieldHP = 0
                shieldMaxHP = shield.getMaxShieldHitpoints()
                --data2 = json.decode(shield.getData())
                --tableStart = {tonumber(data2.resistances.antimatter.value), tonumber(data2.resistances.electromagnetic.value), tonumber(data2.resistances.kinetic.value), tonumber(data2.resistances.thermic.value)}
                --AMres = math.floor((tableStart[1]-0.1)/resMAX*100)
                --EMres = math.floor((tableStart[2]-0.1)/resMAX*100)
                --KIres = math.floor((tableStart[3]-0.1)/resMAX*100)
                --THres = math.floor((tableStart[4]-0.1)/resMAX*100)
                data2=shield.getResistances()
                AMres = math.floor((tonumber(data2[1]))/resMAX*100)
                EMres = math.floor((tonumber(data2[2]))/resMAX*100)
                KIres = math.floor((tonumber(data2[3]))/resMAX*100)
                THres = math.floor((tonumber(data2[4]))/resMAX*100)
                    Planet = {
                      [1]={
                        GM=6930729684,
                        bodyId=1,
                        center={x=17465536.000,y=22665536.000,z=-34464.000},
                        name='Madis',
                        planetarySystemId=0,
                        radius=44300
                      },
                      [2]={
                        GM=157470826617,
                        bodyId=2,
                        center={x=-8.000,y=-8.000,z=-126303.000},
                        name='Alioth',
                        planetarySystemId=0,
                        radius=126068
                      },
                      [3]={
                        GM=11776905000,
                        bodyId=3,
                        center={x=29165536.000,y=10865536.000,z=65536.000},
                        name='Thades',
                        planetarySystemId=0,
                        radius=49000
                      },
                      [4]={
                        GM=14893847582,
                        bodyId=4,
                        center={x=-13234464.000,y=55765536.000,z=465536.000},
                        name='Talemai',
                        planetarySystemId=0,
                        radius=57450
                      },
                      [5]={
                        GM=16951680000,
                        bodyId=5,
                        center={x=-43534464.000,y=22565536.000,z=-48934464.000},
                        name='Feli',
                        planetarySystemId=0,
                        radius=60000
                      },
                      [6]={
                        GM=10502547741,
                        bodyId=6,
                        center={x=52765536.000,y=27165538.000,z=52065535.000},
                        name='Sicari',
                        planetarySystemId=0,
                        radius=51100
                      },
                      [7]={
                        GM=13033380591,
                        bodyId=7,
                        center={x=58665538.000,y=29665535.000,z=58165535.000},
                        name='Sinnen',
                        planetarySystemId=0,
                        radius=54950
                      },
                      [8]={
                        GM=18477723600,
                        bodyId=8,
                        center={x=80865538.000,y=54665536.000,z=-934463.940},
                        name='Teoma',
                        planetarySystemId=0,
                        radius=62000
                      },
                      [9]={
                        GM=18606274330,
                        bodyId=9,
                        center={x=-94134462.000,y=12765534.000,z=-3634464.000},
                        name='Jago',
                        planetarySystemId=0,
                        radius=61590
                      },
                      [10]={
                        GM=78480000,
                        bodyId=10,
                        center={x=17448118.224,y=22966846.286,z=143078.820},
                        name='Madis Moon 1',
                        planetarySystemId=0,
                        radius=10000
                      },
                      [11]={
                        GM=237402000,
                        bodyId=11,
                        center={x=17194626.000,y=22243633.880,z=-214962.810},
                        name='Madis Moon 2',
                        planetarySystemId=0,
                        radius=11000
                      },
                      [12]={
                        GM=265046609,
                        bodyId=12,
                        center={x=17520614.000,y=22184730.000,z=-309989.990},
                        name='Madis Moon 3',
                        planetarySystemId=0,
                        radius=15005
                      },
                      [13]={
                        GM=2118960000,
                        bodyId=21,
                        center={x=457933.000,y=-1509011.000,z=115524.000},
                        name='Alioth Moon 1',
                        planetarySystemId=0,
                        radius=30000
                      },
                      [14]={
                        GM=2165833514,
                        bodyId=22,
                        center={x=-1692694.000,y=729681.000,z=-411464.000},
                        name='Alioth Moon 4',
                        planetarySystemId=0,
                        radius=30330
                      },
                      [15]={
                        GM=68234043600,
                        bodyId=26,
                        center={x=-1404835.000,y=562655.000,z=-285074.000},
                        name='Sanctuary',
                        planetarySystemId=0,
                        radius=83400
                      },
                      [16]={
                        GM=211564034,
                        bodyId=30,
                        center={x=29214402.000,y=10907080.695,z=433858.200},
                        name='Thades Moon 1',
                        planetarySystemId=0,
                        radius=14002
                      },
                      [17]={
                        GM=264870000,
                        bodyId=31,
                        center={x=29404193.000,y=10432768.000,z=19554.131},
                        name='Thades Moon 2',
                        planetarySystemId=0,
                        radius=15000
                      },
                      [18]={
                        GM=141264000,
                        bodyId=40,
                        center={x=-13503090.000,y=55594325.000,z=769838.640},
                        name='Talemai Moon 2',
                        planetarySystemId=0,
                        radius=12000
                      },
                      [19]={
                        GM=106830900,
                        bodyId=41,
                        center={x=-12800515.000,y=55700259.000,z=325207.840},
                        name='Talemai Moon 3',
                        planetarySystemId=0,
                        radius=11000
                      },
                      [20]={
                        GM=264870000,
                        bodyId=42,
                        center={x=-13058408.000,y=55781856.000,z=740177.760},
                        name='Talemai Moon 1',
                        planetarySystemId=0,
                        radius=15000
                      },
                      [21]={
                        GM=499917600,
                        bodyId=50,
                        center={x=-43902841.780,y=22261034.700,z=-48862386.000},
                        name='Feli Moon 1',
                        planetarySystemId=0,
                        radius=14000
                      },
                      [22]={
                        GM=396912600,
                        bodyId=70,
                        center={x=58969616.000,y=29797945.000,z=57969449.000},
                        name='Sinnen Moon 1',
                        planetarySystemId=0,
                        radius=17000
                      },
                      [23]={
                        GM=13975172474,
                        bodyId=100,
                        center={x=98865536.000,y=-13534464.000,z=-934461.990},
                        name='Lacobus',
                        planetarySystemId=0,
                        radius=55650
                      },
                      [24]={
                        GM=264870000,
                        bodyId=101,
                        center={x=98905288.170,y=-13950921.100,z=-647589.530},
                        name='Lacobus Moon 3',
                        planetarySystemId=0,
                        radius=15000
                      },
                      [25]={
                        GM=444981600,
                        bodyId=102,
                        center={x=99180968.000,y=-13783862.000,z=-926156.400},
                        name='Lacobus Moon 1',
                        planetarySystemId=0,
                        radius=18000
                      },
                      [26]={
                        GM=211503600,
                        bodyId=103,
                        center={x=99250052.000,y=-13629215.000,z=-1059341.400},
                        name='Lacobus Moon 2',
                        planetarySystemId=0,
                        radius=14000
                      },
                      [27]={
                        GM=9204742375,
                        bodyId=110,
                        center={x=14165536.000,y=-85634465.000,z=-934464.300},
                        name='Symeon',
                        planetarySystemId=0,
                        radius=49050
                      },
                      [28]={
                        GM=7135606629,
                        bodyId=120,
                        center={x=2865536.700,y=-99034464.000,z=-934462.020},
                        name='Ion',
                        planetarySystemId=0,
                        radius=44950
                      },
                      [29]={
                        GM=106830900,
                        bodyId=121,
                        center={x=2472916.800,y=-99133747.000,z=-1133582.800},
                        name='Ion Moon 1',
                        planetarySystemId=0,
                        radius=11000
                      },
                      [30]={
                        GM=176580000,
                        bodyId=122,
                        center={x=2995424.500,y=-99275010.000,z=-1378480.700},
                        name='Ion Moon 2',
                        planetarySystemId=0,
                        radius=15000
                      }  
                    }
                    DepartureCenter = vec3(Planet[Departure_export].center)
                    DestinationCenter = vec3(Planet[Destination_export].center)
                    DepartureCenterName = Planet[Departure_export].name
                    DestinationCenterName = Planet[Destination_export].name
                    unit.hide()
                    mybr=false
                    thr = [[
                                    <style> 
                                    .throt {
                                    color: white;
                                    position: fixed;
                                    font-family: Ebrima;
                                    font-size: 1.5em;              
                                    font-weight: bold;
                                    top: -0.2vh;
                                    right: 0.3vw;
                                    }
                    </style>]]
                    spd = [[
                                    <style> 
                                    .sped {
                                    color: white;
                                    position: fixed;
                                    font-family: Ebrima;
                                    font-size: 1.5em;              
                                    font-weight: bold;
                                    top: -0.2vh;
                                    right: 3.7vw;
                                    }</style>]]
                    html1 = [[
                                        <style> 
                                            .main1 {
                                        position: fixed;
                                        width: 13em; /* Ширина элемента в пикселах */
                                        padding: 1vh; /* Поля вокруг текста */
                                        top: 0vh;
                                        left: 50%;
                                        transform: translateX(-50%);
                                        text-align: center;
                                        background: #142027; /* Цвет фона */
                                        color: white;
                                        font-family: "Lucida" Grande, sans-serif;
                                        font-size: 1.5em;
                                        border-radius: 5vh;
                                            border: 0.2vh solid;
                                            border-color: orange;
                                        </style>
                                        <div class="main1">BRAKE ENGAGED</div>]]
                    dis=0
                    accel=0
                    resString = ""
                    streamtext2=""
                    thr1=""
                    throttle1=0
                    fuel1=0
                    system.showScreen(1)
                    --safeZone()
                    --pD()
                    function renderNiceHud()
                     local speed = math.floor(vec3(core.getWorldVelocity()):len() * 3.6)
                     --local accel = math.floor(vec3(core.getWorldAcceleration()):len())
                      
                         --local accel = math.floor((vec3(core.getWorldAcceleration()):len()/9.80665)*10)/10
                         --local accel = math.floor(vec3(core.getWorldAcceleration()):len()/9.80665)
                         
                        if lalt == true and newhit == 1 then
                            htmlm = [[
                    <style>
                       html, body {
                        margin: 0;
                        padding: 0;
                        background: transparent;
                        position: relative;
                       }
                       .telemetry {
                                    width: 100vw;
                        height: 100vh;
                        position: fixed;
                        top: ]]..CFCS_Y..[[vh;
                        right: ]]..CFCS_RightBlock_X..[[vw;
                        white-space:nowrap;
                           width: 400px;
                       }
                       .telemetry > div.numbers {
                        margin-bottom: 10px;
                        display: flex;
                        width: 100%;
                                        justify-content: flex-end;
                                         margin-bottom: 0px;
                       }
                       .telemetry > div.numbers > h2 {
                        font-size: 10px;
                        font-weight: 900;
                        margin-bottom:-3px;
                        text-align: left;
                        width: 60px;
                       }
                       .telemetry > div.numbers > div {
                        font-weight: 500;
                        font-size: 26px;
                        text-align: right;
                        color: #6affb1;
                                        margin-right: 4px;
                                        margin-top: ]]..CFCS_TextY..[[px;
                       }
                       .telemetry > div.numbers > h2 > span {
                        display:block;
                        font-size: 20px;
                       } 
                                
                                .telemetry2 {
                                    width: 100vw;
                        height: 100vh;
                        position: fixed;
                        top: ]]..CFCS_Y..[[vh;
                        left: ]]..CFCS_LeftBlock_X..[[vw;
                        white-space:nowrap;
                           width: 400px;
                       }
                       .telemetry2 > div.numbers2 {
                        margin-bottom: 10px;
                        display: flex;
                        width: 100%;
                                        justify-content: flex-end;
                                         margin-bottom: 0px;
                       }
                       .telemetry2 > div.numbers2 > h2 {
                        font-size: 10px;
                        font-weight: 900;
                        margin-bottom:-3px;
                        text-align: right;
                        width: 60px;
                       }
                       .telemetry2 > div.numbers2 > div {
                        font-weight: 500;
                        font-size: 26px;
                        text-align: right;
                        color: #6affb1;
                                        margin-right: -40.4px;
                                        margin-top: ]]..CFCS_TextY..[[px;
                       }
                       .telemetry2 > div.numbers2 > h2 > span {
                        display:block;
                        font-size: 20px;
                                    text-align: right;
                       }
                                     .shield
                                     {
                                     margin-left:403.2px;
                                     margin-top:-237.2px;
                                     }
                                            .fuel
                                     {
                                     margin-left:347px;
                                     margin-top:-104px;
                                     }
                                     orangecolor {
                                      color: orange;
                                    } 
                                     redcolor {
                                      color: #fc033d;
                                     }
                                     greencolor {
                                      color: #2ebac9;
                                     }
                                     amcolor {
                                      color: ]]..AMcolor..[[;
                                     }
                                     emcolor {
                                      color: ]]..EMcolor..[[;
                                     }
                                     
                                     kicolor {
                                      color: ]]..KIcolor..[[;
                                     }
                                     thcolor {
                                      color: ]]..THcolor..[[;
                                     }
                                     powercolor {
                                     font-size: 15px;
                                     color: #b6dfed;
                                     }
                                     .helper {
                        width: 18em; /* Ширина элемента в пикселах */
                        padding: 2px; /* Поля вокруг текста */
                        position:fixed;
                        top:6vh;
                        left:1vw;
                        text-align: left;
                        background:  #2C2F33; /* Цвет фона */
                        color: #FFFFFF;
                        font-family: "Times New Roman", Times, serif;
                        font-size: 0.9em;
                        border-radius: 5px;
                        border: 2px solid black;    
                                }
                             .safez {
                        width: auto; /* Ширина элемента в пикселах */
                        padding: 2px; /* Поля вокруг текста */
                        position:fixed;
                        top:-0.1vh;
                        right:0;
                        text-align: right;
                        color: #FFFFFF;
                        font-size: 1.2em;
                        font-weight: bold; 
                        background: ]]..CFCS_Background_Color..[[;
                        border: 0.2px solid black; 
                                }
                            .pipe {
                        width: 12em; /* Ширина элемента в пикселах */
                        padding: 2px; /* Поля вокруг текста */
                        position:fixed;
                        top: ]]..CFCS_PipeY..[[vh;
                        right: ]]..CFCS_PipeX..[[vw;
                        text-align: center;
                        color: ]]..CFCS_PipeText_Color..[[;
                        font-size: 1.2em;
                        font-weight: bold; 
                        background: ]]..CFCS_Background_Color..[[;
                        border: 0.2px solid black;  
                                }
                            redcolor1 {
                                      color: red;
                                     }
                                     greencolor1 {
                                      color: #6affb1;
                                     }
                      </style>
                       <div class="telemetry">
                                        <div class="numbers">
                         <div>]]..throttle1..[[</div>
                         <h2>THRUST<span>%</span></h2>
                        </div>
                        <div class="numbers">
                         <div>]]..speed..[[</div>
                         <h2>SPEED<span>Km/h</span></h2>
                        </div>
                        <div class="numbers">
                         <div>]]..accel..[[</div>
                         <h2>ACCEL<span>G</span></h2>
                        </div>
                        <div class="numbers">
                         <div>]]..resString..[[</div>
                         <h2>Brake-distance<span>]]..brakeText..[[</span></h2>
                        </div>
                       </div>
                       <div class="telemetry2">
                                        <div class="numbers2">
                                        <div><redcolor>]]..ventCLWN..[[</redcolor> <orangecolor>]]..resCLWN..[[</orangecolor> <greencolor>]]..dpstimer..[[</greencolor> ]]..shieldHP..[[</div>
                                              <h2>]]..shieldText..[[<span>%</span></h2>
                        </div>
                                        <div class="numbers2">
                                         <div>]]..fuel1..[[</div>
                         <h2>FUEL<span>%</span></h2>
                        </div>
                                        <div class="numbers2">
                                        <div>]]..AMres..[[<powercolor>PW </powercolor><amcolor>]]..AMval..[[</amcolor></div>
                         <h2>AM<span>%</span></h2>
                        </div>
                                        <div class="numbers2">
                                        <div>]]..EMres..[[<powercolor>PW </powercolor><emcolor>]]..EMval..[[</emcolor></div>
                         <h2>EM<span>%</span></h2>
                        </div>
                                        <div class="numbers2">
                                        <div>]]..KIres..[[<powercolor>PW </powercolor><kicolor>]]..KIval..[[</kicolor></div>
                         <h2>KI<span>%</span></h2>
                        </div>
                                         <div class="numbers2">
                                        <div>]]..THres..[[<powercolor>PW </powercolor><thcolor>]]..THval..[[</thcolor></div>
                         <h2>TH<span>%</span></h2>
                        </div>
                             <div class="shield">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100" fill="none" stroke="]]..shieldColor..[[" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round" class="feather feather-shield"><path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path></svg>
                    </div>
                            <div class="fuel">   
                     <svg viewBox="0 0 100 100" width="100" height="100" xmlns="http://www.w3.org/2000/svg">
                        <g fill="none" fill-rule="evenodd">
                            <path d="M68 63c3.038 0 5.5-2.493 5.5-5.567 0-2.05-1.833-5.861-5.5-11.433-3.667 5.572-5.5 9.383-5.5 11.433C62.5 60.507 64.962 63 68 63z" fill="#FFB12C"/>
                        </g>
                    </svg>
                    </div>
                       </div>
                        <div class="helper">
                        Option-1: marker to the destination<br>
                        Option-2: marker on the center of the pipe between the departure and destination<br>
                        Option-3: marker for the departure<br>
                        Option-4: reset DPM calculation<br>
                        Option-5: Open the map<br>
                        Option-6: Install the shield resists manually based on the calculated DPM<br>
                        Option-7: (MAX/EQ) calibration of the entire shield power by the largest resist based on DPM<br>
                        Option-8: (AUTO/MANUAL) shield mode<br>
                        Option-9: Start/stop shield ventilation<br>
                        Shift+L: asteroid destination<br>
                        <br>LUA commands:<br>
                        s - enable/disable the shield<br>
                        a - 100% shield power on AM resist<br>
                        e - 100% shield power on EM resist<br>
                        k - 100% of the shield power on the KI resist<br>
                        t - 100% shield power on TH resist<br>
                        /:pos - add an asteroid position to the map<br>
                        safe - enable/disable notifications in the safe zone<br>
                        ang - enable/disable the angular velocity info<br>
                        drop - undock all constructs<br>
                        sw - show the shield widget<br>
                        sz - marker to the nearest safe zone<br>
                        szs - marker on the center of the safe zone<br>
                        <br>Profiles for resists 50/50%:<br>
                        l - lasers<br>
                        c - cannons<br>
                        m - rockets<br>
                        r - railguns</div>
                            <div class="safez">]]..safetext..[[</div>
                            <div class="pipe">]]..pD()..[[</div>]]
                            
                            end
                        
                        if lalt == false and newhit == 1 then
                            htmlm = [[
                    <style>
                       html, body {
                        margin: 0;
                        padding: 0;
                        background: transparent;
                        position: relative;
                       }
                       .telemetry {
                                    width: 100vw;
                        height: 100vh;
                        position: fixed;
                        top: ]]..CFCS_Y..[[vh;
                        right: ]]..CFCS_RightBlock_X..[[vw;
                        white-space:nowrap;
                           width: 400px;
                       }
                       .telemetry > div.numbers {
                        margin-bottom: 10px;
                        display: flex;
                        width: 100%;
                                        justify-content: flex-end;
                                         margin-bottom: 0px;
                       }
                       .telemetry > div.numbers > h2 {
                        font-size: 10px;
                        font-weight: 900;
                        margin-bottom:-3px;
                        text-align: left;
                        width: 60px;
                       }
                       .telemetry > div.numbers > div {
                        font-weight: 500;
                        font-size: 26px;
                        text-align: right;
                        color: #6affb1;
                                        margin-right: 4px;
                                        margin-top: ]]..CFCS_TextY..[[px;
                       }
                       .telemetry > div.numbers > h2 > span {
                        display:block;
                        font-size: 20px;
                       } 
                                
                                .telemetry2 {
                                    width: 100vw;
                        height: 100vh;
                        position: fixed;
                        top: ]]..CFCS_Y..[[vh;
                        left: ]]..CFCS_LeftBlock_X..[[vw;
                        white-space:nowrap;
                           width: 400px;
                       }
                       .telemetry2 > div.numbers2 {
                        margin-bottom: 10px;
                        display: flex;
                        width: 100%;
                                        justify-content: flex-end;
                                         margin-bottom: 0px;
                       }
                       .telemetry2 > div.numbers2 > h2 {
                        font-size: 10px;
                        font-weight: 900;
                        margin-bottom:-3px;
                        text-align: right;
                        width: 60px;
                       }
                       .telemetry2 > div.numbers2 > div {
                        font-weight: 500;
                        font-size: 26px;
                        text-align: right;
                        color: #6affb1;
                                        margin-right: -40.4px;
                                        margin-top: ]]..CFCS_TextY..[[px;
                       }
                       .telemetry2 > div.numbers2 > h2 > span {
                        display:block;
                        font-size: 20px;
                                    text-align: right;
                       }
                                     .shield
                                     {
                                     margin-left:403.2px;
                                     margin-top:-237.2px;
                                     }
                                            .fuel
                                     {
                                     margin-left:347px;
                                     margin-top:-104px;
                                     }
                                     orangecolor {
                                      color: orange;
                                    } 
                                     redcolor {
                                      color: #fc033d;
                                     }
                                     greencolor {
                                      color: #2ebac9;
                                     }
                                     amcolor {
                                      color: ]]..AMcolor..[[;
                                     }
                                     emcolor {
                                      color: ]]..EMcolor..[[;
                                     }
                                     
                                     kicolor {
                                      color: ]]..KIcolor..[[;
                                     }
                                     thcolor {
                                      color: ]]..THcolor..[[;
                                     }
                                     powercolor {
                                     font-size: 15px;
                                     color: #b6dfed;
                                     }
                                     .helper {
                        width: 18em; /* Ширина элемента в пикселах */
                        padding: 2px; /* Поля вокруг текста */
                        position:fixed;
                        top:7vh;
                        left:1vw;
                        text-align: left;
                        background:  #2C2F33; /* Цвет фона */
                        color: #FFFFFF;
                        font-family: "Times New Roman", Times, serif;
                        font-size: 0.9em;
                        border-radius: 5px;
                        border: 2px solid black;    
                                }
                             .safez {
                        width: auto; /* Ширина элемента в пикселах */
                        padding: 2px; /* Поля вокруг текста */
                        position:fixed;
                        top:-0.1vh;
                        right:0;
                        text-align: right;
                        color: #FFFFFF;
                        font-size: 1.2em;
                        font-weight: bold;
                        background: ]]..CFCS_Background_Color..[[;
                        border: 0.2px solid black; 
                                }
                            .pipe {
                        width: 12em; /* Ширина элемента в пикселах */
                        padding: 2px; /* Поля вокруг текста */
                        position:fixed;
                        top: ]]..CFCS_PipeY..[[vh;
                        right: ]]..CFCS_PipeX..[[vw;
                        text-align: center;
                        color: ]]..CFCS_PipeText_Color..[[;
                        font-size: 1.2em;
                        font-weight: bold; 
                        background: ]]..CFCS_Background_Color..[[;
                        border: 0.2px solid black;  
                                }
                            redcolor1 {
                                      color: red;
                                     }
                                     greencolor1 {
                                      color: #6affb1;
                                     }
                      </style>
                       <div class="telemetry">
                                        <div class="numbers">
                         <div>]]..throttle1..[[</div>
                         <h2>THRUST<span>%</span></h2>
                        </div>
                        <div class="numbers">
                         <div>]]..speed..[[</div>
                         <h2>SPEED<span>Km/h</span></h2>
                        </div>
                        <div class="numbers">
                         <div>]]..accel..[[</div>
                         <h2>ACCEL<span>G</span></h2>
                        </div>
                        <div class="numbers">
                         <div>]]..resString..[[</div>
                         <h2>Brake-distance<span>]]..brakeText..[[</span></h2>
                        </div>
                       </div>
                       <div class="telemetry2">
                                        <div class="numbers2">
                                        <div><redcolor>]]..ventCLWN..[[</redcolor> <orangecolor>]]..resCLWN..[[</orangecolor> <greencolor>]]..dpstimer..[[</greencolor> ]]..shieldHP..[[</div>
                                              <h2>]]..shieldText..[[<span>%</span></h2>
                        </div>
                                        <div class="numbers2">
                                         <div>]]..fuel1..[[</div>
                         <h2>FUEL<span>%</span></h2>
                        </div>
                                        <div class="numbers2">
                                        <div>]]..AMres..[[<powercolor>PW </powercolor><amcolor>]]..AMval..[[</amcolor></div>
                         <h2>AM<span>%</span></h2>
                        </div>
                                        <div class="numbers2">
                                        <div>]]..EMres..[[<powercolor>PW </powercolor><emcolor>]]..EMval..[[</emcolor></div>
                         <h2>EM<span>%</span></h2>
                        </div>
                                        <div class="numbers2">
                                        <div>]]..KIres..[[<powercolor>PW </powercolor><kicolor>]]..KIval..[[</kicolor></div>
                         <h2>KI<span>%</span></h2>
                        </div>
                                         <div class="numbers2">
                                        <div>]]..THres..[[<powercolor>PW </powercolor><thcolor>]]..THval..[[</thcolor></div>
                         <h2>TH<span>%</span></h2>
                        </div>
                             <div class="shield">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100" fill="none" stroke="]]..shieldColor..[[" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round" class="feather feather-shield"><path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path></svg>
                    </div>
                            <div class="fuel">   
                     <svg viewBox="0 0 100 100" width="100" height="100" xmlns="http://www.w3.org/2000/svg">
                        <g fill="none" fill-rule="evenodd">
                            <path d="M68 63c3.038 0 5.5-2.493 5.5-5.567 0-2.05-1.833-5.861-5.5-11.433-3.667 5.572-5.5 9.383-5.5 11.433C62.5 60.507 64.962 63 68 63z" fill="#FFB12C"/>
                        </g>
                    </svg>
                    </div>
                       </div>
                            <div class="safez">]]..safetext..[[</div>
                            <div class="pipe">]]..pD()..[[</div>]]
                            
                        end
                        
                        if lalt == true and newhit == 0 then
                            htmlm = [[
                    <style>
                       html, body {
                        margin: 0;
                        padding: 0;
                        background: transparent;
                        position: relative;
                       }
                       .telemetry {
                                    width: 100vw;
                        height: 100vh;
                        position: fixed;
                        top: ]]..CFCS_Y..[[vh;
                        right: ]]..CFCS_RightBlock_X..[[vw;
                        white-space:nowrap;
                           width: 400px;
                       }
                       .telemetry > div.numbers {
                        margin-bottom: 10px;
                        display: flex;
                        width: 100%;
                                        justify-content: flex-end;
                                         margin-bottom: 0px;
                       }
                       .telemetry > div.numbers > h2 {
                        font-size: 10px;
                        font-weight: 900;
                        margin-bottom:-3px;
                        text-align: left;
                        width: 60px;
                       }
                       .telemetry > div.numbers > div {
                        font-weight: 500;
                        font-size: 26px;
                        text-align: right;
                        color: #6affb1;
                                        margin-right: 4px;
                                        margin-top: ]]..CFCS_TextY..[[px;
                       }
                       .telemetry > div.numbers > h2 > span {
                        display:block;
                        font-size: 20px;
                       } 
                                
                                .telemetry2 {
                                    width: 100vw;
                        height: 100vh;
                        position: fixed;
                        top: ]]..CFCS_Y..[[vh;
                        left: ]]..CFCS_LeftBlock_X..[[vw;
                        white-space:nowrap;
                           width: 400px;
                       }
                       .telemetry2 > div.numbers2 {
                        margin-bottom: 10px;
                        display: flex;
                        width: 100%;
                                        justify-content: flex-end;
                                         margin-bottom: 0px;
                       }
                       .telemetry2 > div.numbers2 > h2 {
                        font-size: 10px;
                        font-weight: 900;
                        margin-bottom:-3px;
                        text-align: right;
                        width: 60px;
                       }
                       .telemetry2 > div.numbers2 > div {
                        font-weight: 500;
                        font-size: 26px;
                        text-align: right;
                        color: #6affb1;
                                        margin-right: -40.4px;
                                        margin-top: ]]..CFCS_TextY..[[px;
                       }
                       .telemetry2 > div.numbers2 > h2 > span {
                        display:block;
                        font-size: 20px;
                                    text-align: right;
                       }
                 .shield
                 {
                 margin-left:403.2px;
                 margin-top:-237.2px;
                 }
                        .fuel
                 {
                 margin-left:347px;
                 margin-top:-104px;
                 }
                 orangecolor {
                  color: orange;
                } 
                 redcolor {
                  color: #fc033d;
                 }
                 greencolor {
                  color: #2ebac9;
                 }
                 amcolor {
                  color: ]]..AMcolor..[[;
                 }
                 emcolor {
                  color: ]]..EMcolor..[[;
                 }
                 
                 kicolor {
                  color: ]]..KIcolor..[[;
                 }
                 thcolor {
                  color: ]]..THcolor..[[;
                 }
                 powercolor {
                 font-size: 15px;
                 color: #b6dfed;
                 }
                redcolor1 {
                          color: red;
                         }
                         greencolor1 {
                          color: #6affb1;
                         }
                    .helper {
                    width: 18em; /* Ширина элемента в пикселах */
                    padding: 2px; /* Поля вокруг текста */
                    position:fixed;
                    top:6vh;
                    left:1vw;
                    text-align: left;
                    background:  #2C2F33; /* Цвет фона */
                    color: #FFFFFF;
                    font-family: "Times New Roman", Times, serif;
                    font-size: 0.9em;
                    border-radius: 5px;
                    border: 2px solid black;    
                            }
                         .safez {
                    width: auto; /* Ширина элемента в пикселах */
                    padding: 2px; /* Поля вокруг текста */
                    position:fixed;
                    top:-0.1vh;
                    right:0;
                    text-align: right;
                    color: #FFFFFF;
                    font-size: 1.2em;
                    font-weight: bold; 
                    background: ]]..CFCS_Background_Color..[[;
                    border: 0.2px solid black; 
                            }
                        .pipe {
                    width: 12em; /* Ширина элемента в пикселах */
                    padding: 2px; /* Поля вокруг текста */
                    position:fixed;
                    top: ]]..CFCS_PipeY..[[vh;
                    right: ]]..CFCS_PipeX..[[vw;
                    text-align: center;
                    color: ]]..CFCS_PipeText_Color..[[;
                    font-size: 1.2em;
                    font-weight: bold; 
                    background: ]]..CFCS_Background_Color..[[;
                    border: 0.2px solid black;  
                            }
                  </style>
                   <div class="telemetry">
                                    <div class="numbers">
                     <div>]]..throttle1..[[</div>
                     <h2>THRUST<span>%</span></h2>
                    </div>
                    <div class="numbers">
                     <div>]]..speed..[[</div>
                     <h2>SPEED<span>Km/h</span></h2>
                    </div>
                    <div class="numbers">
                     <div>]]..accel..[[</div>
                     <h2>ACCEL<span>G</span></h2>
                    </div>
                    <div class="numbers">
                     <div>]]..resString..[[</div>
                     <h2>Brake-distance<span>]]..brakeText..[[</span></h2>
                    </div>
                   </div>
                   <div class="telemetry2">
                                    <div class="numbers2">
                                    <div><redcolor>]]..ventCLWN..[[</redcolor> <orangecolor>]]..resCLWN..[[</orangecolor> <greencolor>]]..dpstimer..[[</greencolor> ]]..shieldHP..[[</div>
                                          <h2>]]..shieldText..[[<span>%</span></h2>
                    </div>
                                    <div class="numbers2">
                                     <div>]]..fuel1..[[</div>
                     <h2>FUEL<span>%</span></h2>
                    </div>
                                    <div class="numbers2">
                                    <div>]]..AMres..[[<powercolor>PW </powercolor><amcolor>]]..AMval..[[</amcolor></div>
                     <h2>AM<span>%</span></h2>
                    </div>
                                    <div class="numbers2">
                                    <div>]]..EMres..[[<powercolor>PW </powercolor><emcolor>]]..EMval..[[</emcolor></div>
                     <h2>EM<span>%</span></h2>
                    </div>
                                    <div class="numbers2">
                                    <div>]]..KIres..[[<powercolor>PW </powercolor><kicolor>]]..KIval..[[</kicolor></div>
                     <h2>KI<span>%</span></h2>
                    </div>
                                     <div class="numbers2">
                                    <div>]]..THres..[[<powercolor>PW </powercolor><thcolor>]]..THval..[[</thcolor></div>
                     <h2>TH<span>%</span></h2>
                    </div>
                         <div class="shield">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100" fill="none" stroke="]]..shieldColor..[[" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round" class="feather feather-shield"><path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path></svg>
                </div>
                        <div class="fuel">   
                 <svg viewBox="0 0 100 100" width="100" height="100" xmlns="http://www.w3.org/2000/svg">
                    <g fill="none" fill-rule="evenodd">
                        <path d="M68 63c3.038 0 5.5-2.493 5.5-5.567 0-2.05-1.833-5.861-5.5-11.433-3.667 5.572-5.5 9.383-5.5 11.433C62.5 60.507 64.962 63 68 63z" fill="#FFB12C"/>
                    </g>
                </svg>
                </div>
                   </div>
                <div class="helper">
                Option-1: marker to the destination<br>
                Option-2: marker on the center of the pipe between the departure and destination<br>
                Option-3: marker for the departure<br>
                Option-4: reset DPM calculation<br>
                Option-5: Open the map<br>
                Option-6: Install the shield resists manually based on the calculated DPM<br>
                Option-7: (MAX/EQ) calibration of the entire shield power by the largest resist based on DPM<br>
                Option-8: (AUTO/MANUAL) shield mode<br>
                Option-9: Start/stop shield ventilation<br>
                Shift+L: asteroid destination<br>
                <br>LUA commands:<br>
                s - enable/disable the shield<br>
                a - 100% shield power on AM resist<br>
                e - 100% shield power on EM resist<br>
                k - 100% of the shield power on the KI resist<br>
                t - 100% shield power on TH resist<br>
                /:pos - add an asteroid position to the map<br>
                safe - enable/disable notifications in the safe zone<br>
                ang - enable/disable the angular velocity info<br>
                drop - undock all constructs<br>
                sw - show the shield widget<br>
                sz - marker to the nearest safe zone<br>
                szs - marker on the center of the safe zone<br>
                <br>Profiles for resists 50/50%:<br>
                l - lasers<br>
                c - cannons<br>
                m - rockets<br>
                r - railguns</div>
                        <div class="safez">]]..safetext..[[</div>
                        <div class="pipe">]]..pD()..[[</div>]]
                            
                    end
                            
                     if lalt == false and newhit == 0 then
                        htmlm = [[
                <style>
                   html, body {
                    margin: 0;
                    padding: 0;
                    background: transparent;
                    position: relative;
                   }
                   .telemetry {
                                width: 100vw;
                    height: 100vh;
                    position: fixed;
                    top: ]]..CFCS_Y..[[vh;
                    right: ]]..CFCS_RightBlock_X..[[vw;
                    white-space:nowrap;
                       width: 400px;
                   }
                   .telemetry > div.numbers {
                    margin-bottom: 10px;
                    display: flex;
                    width: 100%;
                                    justify-content: flex-end;
                                     margin-bottom: 0px;
                   }
                   .telemetry > div.numbers > h2 {
                    font-size: 10px;
                    font-weight: 900;
                    margin-bottom:-3px;
                    text-align: left;
                    width: 60px;
                   }
                   .telemetry > div.numbers > div {
                    font-weight: 500;
                    font-size: 26px;
                    text-align: right;
                    color: #6affb1;
                                    margin-right: 4px;
                                    margin-top: ]]..CFCS_TextY..[[px;
                   }
                   .telemetry > div.numbers > h2 > span {
                    display:block;
                    font-size: 20px;
                   } 
                            
                            .telemetry2 {
                                width: 100vw;
                    height: 100vh;
                    position: fixed;
                    top: ]]..CFCS_Y..[[vh;
                    left: ]]..CFCS_LeftBlock_X..[[vw;
                    white-space:nowrap;
                       width: 400px;
                   }
                   .telemetry2 > div.numbers2 {
                    margin-bottom: 10px;
                    display: flex;
                    width: 100%;
                                    justify-content: flex-end;
                                     margin-bottom: 0px;
                   }
                   .telemetry2 > div.numbers2 > h2 {
                    font-size: 10px;
                    font-weight: 900;
                    margin-bottom:-3px;
                    text-align: right;
                    width: 60px;
                   }
                   .telemetry2 > div.numbers2 > div {
                    font-weight: 500;
                    font-size: 26px;
                    text-align: right;
                    color: #6affb1;
                                    margin-right: -40.4px;
                                    margin-top: ]]..CFCS_TextY..[[px;
                   }
                   .telemetry2 > div.numbers2 > h2 > span {
                    display:block;
                    font-size: 20px;
                                text-align: right;
                   }
                 .shield
                 {
                 margin-left:403.2px;
                 margin-top:-69px;
                 }
                        .fuel
                 {
                 margin-left:347px;
                 margin-top:-104px;
                 }
                 orangecolor {
                  color: orange;
                } 
                 redcolor {
                  color: #fc033d;
                 }
                 greencolor {
                  color: #2ebac9;
                 }
                 redcolor1 {
                  color: red;
                 }
                 greencolor1 {
                  color: #6affb1;
                 }
                 amcolor {
                  color: ]]..AMcolor..[[;
                 }
                 emcolor {
                  color: ]]..EMcolor..[[;
                 }
                 
                 kicolor {
                  color: ]]..KIcolor..[[;
                 }
                 thcolor {
                  color: ]]..THcolor..[[;
                 }
                 powercolor {
                 font-size: 15px;
                 color: #b6dfed;
                 }
                        .helper {
                        width: 18em; /* Ширина элемента в пикселах */
                        padding: 2px; /* Поля вокруг текста */
                        position:fixed;
                        top:7vh;
                        left:1vw;
                        text-align: left;
                        background:  #2C2F33; /* Цвет фона */
                        color: #FFFFFF;
                        font-family: "Times New Roman", Times, serif;
                        font-size: 0.9em;
                        border-radius: 5px;
                        border: 2px solid black;    
                                }
                             .safez {
                        width: auto; /* Ширина элемента в пикселах */
                        padding: 2px; /* Поля вокруг текста */
                        position:fixed;
                        top:-0.1vh;
                        right:0;
                        text-align: right;
                        color: #FFFFFF;
                        font-size: 1.2em;
                        font-weight: bold;
                        background: ]]..CFCS_Background_Color..[[;
                        border: 0.2px solid black;     
                                }
                            .pipe {
                        width: 12em; /* Ширина элемента в пикселах */
                        padding: 2px; /* Поля вокруг текста */
                        position:fixed;
                        top: ]]..CFCS_PipeY..[[vh;
                        right: ]]..CFCS_PipeX..[[vw;
                        text-align: center;
                        color: ]]..CFCS_PipeText_Color..[[;
                        font-size: 1.2em;
                        font-weight: bold; 
                        background: ]]..CFCS_Background_Color..[[;
                        border: 0.2px solid black;  
                                }
                      </style>
                       <div class="telemetry">
                                        <div class="numbers">
                         <div>]]..throttle1..[[</div>
                         <h2>THRUST<span>%</span></h2>
                        </div>
                        <div class="numbers">
                         <div>]]..speed..[[</div>
                         <h2>SPEED<span>Km/h</span></h2>
                        </div>
                        <div class="numbers">
                         <div>]]..accel..[[</div>
                         <h2>ACCEL<span>G</span></h2>
                        </div>
                        <div class="numbers">
                         <div>]]..resString..[[</div>
                         <h2>Brake-distance<span>]]..brakeText..[[</span></h2>
                        </div>
                       </div>
                       <div class="telemetry2">
                                        <div class="numbers2">
                                       <div><redcolor>]]..ventCLWN..[[</redcolor> <orangecolor>]]..resCLWN..[[</orangecolor> <greencolor>]]..dpstimer..[[</greencolor> ]]..shieldHP..[[</div>
                                              <h2>]]..shieldText..[[<span>%</span></h2>
                        </div>
                                        <div class="numbers2">
                                         <div>]]..fuel1..[[</div>
                         <h2>FUEL<span>%</span></h2>
                        </div>
                            <div class="shield">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100" fill="none" stroke="]]..shieldColor..[[" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round" class="feather feather-shield"><path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path></svg>
                    </div>
                            <div class="fuel">   
                     <svg viewBox="0 0 100 100" width="100" height="100" xmlns="http://www.w3.org/2000/svg">
                        <g fill="none" fill-rule="evenodd">
                            <path d="M68 63c3.038 0 5.5-2.493 5.5-5.567 0-2.05-1.833-5.861-5.5-11.433-3.667 5.572-5.5 9.383-5.5 11.433C62.5 60.507 64.962 63 68 63z" fill="#FFB12C"/>
                        </g>
                    </svg>
                    </div>
                    </div>
                            <div class="safez">]]..safetext..[[</div>
                            <div class="pipe">]]..pD()..[[</div>]]
                            
                        end  
                        
                        if mybr==true then
                      system.setScreen(htmlm .. html1)
                      
                        else
                        
                      system.setScreen(htmlm)
                    end
                    end
                        
                    unit.setTimer("shield",1)
                    unit.setTimer("DPS",1)
                    unit.setTimer("braketime",0.15)
                    unit.setTimer("hud",0.018)
        tick:
            args: ["shield"]
            lua: |
                --data2 = json.decode(shield.getData())
                --tableStart = {tonumber(data2.resistances.antimatter.value), tonumber(data2.resistances.electromagnetic.value), tonumber(data2.resistances.kinetic.value), tonumber(data2.resistances.thermic.value)}
                --AMres = math.floor((tableStart[1]-0.1)/resMAX*100)
                --EMres = math.floor((tableStart[2]-0.1)/resMAX*100)
                --KIres = math.floor((tableStart[3]-0.1)/resMAX*100)
                --THres = math.floor((tableStart[4]-0.1)/resMAX*100)
                
                  data2=shield.getResistances()
                  
                    AMres = math.floor((tonumber(data2[1]))/resMAX*100)
                    EMres = math.floor((tonumber(data2[2]))/resMAX*100)
                    KIres = math.floor((tonumber(data2[3]))/resMAX*100)
                    THres = math.floor((tonumber(data2[4]))/resMAX*100)
                    varcombat=math.floor(core.getPvPTimer())
                    if varcombat < 300 and varcombat ~= 0 then 
                        AM_rS1=0
                        EM_rS1=0
                        KI_rS1=0
                        TH_rS1=0
                        newhit=0
                        end
                    if varcombat > 0 then varcombat = 1 end
                     if shield.getState() == 0 then shieldColor = "#fc033d" else shieldColor = "#2ebac9" end
                    if Shield_Auto_Calibration
                        then
                        if Shield_Calibration_Max then
                    shieldText = "SHIELD (AUTO,MAX)"
                    end
                    if not Shield_Calibration_Max then
                    shieldText = "SHIELD (AUTO,EQ)"
                    end
                        
                        else
                        
                    if Shield_Calibration_Max then
                    shieldText = "SHIELD (MANUAL,MAX)"
                    end
                           
                    if not Shield_Calibration_Max then
                    shieldText = "SHIELD (MANUAL,EQ)"
                    end
                        
                    end
                    if timeF == 62 then dpstimer = "" else dpstimer = timeF.. 's' end
                    resisttime = shield.getResistancesCooldown()
                    if resisttime ~= 0 then
                    if resisttime < resisttimemax  then 
                        --system.print('RESISTANCE COOLDOWN: '..math.floor(resisttime).. ' sec')
                        resCLWN = math.floor(resisttime).. 's'   
                        --system.print(resCLWN)    
                        end
                        else
                        resCLWN = ""
                        end
                    if shield.isVenting() then
                        venttime = shield.getVentingCooldown()
                        if venttime < venttimemax and venttime ~= 0 then
                        --system.print('VENTING COOLDOWN: '..math.floor(venttime).. ' sec')
                        ventCLWN = math.floor(venttime).. 's'  
                        else
                        ventCLWN = ""
                            end
                        end
        tick:
            args: ["DPS"]
            lua: |
                            DPStable = {AM_rS, EM_rS, KI_rS, TH_rS}
                            summaS = AM_rS + EM_rS + KI_rS + TH_rS
                            summaG = AM_rM + EM_rM + KI_rM + TH_rM
                            if AM_rS ~= 0 then AMcolor = "#ff0000" else AMcolor = "#6affb1" end
                            if EM_rS ~= 0 then EMcolor = "#ff0000" else EMcolor = "#6affb1" end
                            if KI_rS ~= 0 then KIcolor = "#ff0000" else KIcolor = "#6affb1" end
                            if TH_rS ~= 0 then THcolor = "#ff0000" else THcolor = "#6affb1" end
                            if AM_rM ~= 0 then
                                
                                    AMval = math.floor(AM_rM/summaG*100) 
                                    else 
                                    AMval = 0
                                end
                                
                            if EM_rM ~= 0 then
                                
                                    EMval = math.floor(EM_rM/summaG*100) 
                                    else 
                                    EMval = 0
                                end
                                
                            if KI_rM ~= 0 then
                                
                                    KIval = math.floor(KI_rM/summaG*100)
                                    else 
                                    KIval = 0
                                end
                                
                            if TH_rM ~= 0 then
                                
                                    THval = math.floor(TH_rM/summaG*100)
                                    else 
                                    THval = 0
                                end
                            if timeD ~= 0 then
                                timeF = timeF - 1
                                end
                                if timeF == 0 then
                                timeF=62
                                
                                DPMtable = {AM_rM, EM_rM, KI_rM, TH_rM}
                                summaM = AM_rM + EM_rM + KI_rM + TH_rM
                                
                                if summaM ~= 0 then
                            --system.print('DPM - AM: '..math.floor(AM_rM/summaM*100)..'%, EM: '..math.floor(EM_rM/summaM*100)..'%, KI: '..math.floor(KI_rM/summaM*100)..'%, TH: '..math.floor(TH_rM/summaM*100)..'%')
                                    --table.sort(DPMtable)
                            --system.print('MAX is '..math.floor((DPMtable[#DPMtable])/summaM*100)..'%')
                            if Shield_Auto_Calibration then
                                        
                                        
                                        if Shield_Calibration_Max then
                                            
                                            TEMPtable = DPMtable
                                            
                                            table.sort(DPMtable, function(a,b)
                             return a > b
                            end)
                                            
                                        if DPMtable[1] == DPMtable[2] then
                                                --system.print("50%")
                                               shield.setResistances((math.floor(AM_rM/summaM*100)*resMAX)/100,(math.floor(EM_rM/summaM*100)*resMAX)/100,(math.floor(KI_rM/summaM*100)*resMAX)/100,(math.floor(TH_rM/summaM*100)*resMAX)/100)
                                               AMres = math.floor(AM_rM/summaM*100)
                                               EMres = math.floor(EM_rM/summaM*100)
                                               KIres = math.floor(KI_rM/summaM*100)
                                               THres = math.floor(TH_rM/summaM*100) 
                                            else
                                            
                                        if DPMtable[1] == AM_rM 
                                                then
                                                system.print("ANTIMATTER POWER 100%")
                                                shield.setResistances(resMAX,0,0,0)
                                                AMres = 100
                                                EMres = 0
                                                KIres = 0
                                                THres = 0 
                                                end
                                                
                                         if DPMtable[1] == EM_rM 
                                                then
                                                system.print("ELECTROMAGNETIC POWER 100%")
                                                shield.setResistances(0,resMAX,0,0)
                                                AMres = 0
                                                EMres = 100
                                                KIres = 0
                                                THres = 0 
                                                end 
                                                    
                                         if DPMtable[1] == KI_rM then
                                                system.print("KINETIC POWER 100%")
                                                shield.setResistances(0,0,resMAX,0)
                                                AMres = 0
                                                EMres = 0
                                                KIres = 100
                                                THres = 0  
                                                end
                                                        
                                          if DPMtable[1] == TH_rM 
                                                then
                                                system.print("THERMIC POWER 100%")
                                                shield.setResistances(0,0,0,resMAX)
                                                AMres = 0
                                                EMres = 0
                                                KIres = 0
                                                THres = 100 
                                                end       
                                                
                               end
                               else
                               
                               shield.setResistances((math.floor(AM_rM/summaM*100)*resMAX)/100,(math.floor(EM_rM/summaM*100)*resMAX)/100,(math.floor(KI_rM/summaM*100)*resMAX)/100,(math.floor(TH_rM/summaM*100)*resMAX)/100)
                                AMres =  math.floor(AM_rM/summaM*100)
                                            EMres =  math.floor(EM_rM/summaM*100)
                                            KIres =  math.floor(KI_rM/summaM*100)
                                            THres =  math.floor(TH_rM/summaM*100) 
                               end
                                else
                                AM_rM=0
                                EM_rM=0
                                KI_rM=0
                                TH_rM=0
                                --system.print('DPM - AM: '..AM_rM..'%, EM: '..EM_rM..'%, KI: '.. KI_rM..'%, TH: '..TH_rM..'%')
                                end
                             end
                                
                                DPMtable = {}
                                TEMPtable = {}
                                AM_rM=0
                                EM_rM=0
                                KI_rM=0
                                TH_rM=0
                                timeD=0
                                
                            end
                            if summaS ~= 0 then
                            --system.print('DPS - AM: '..math.floor(AM_rS/summaS*100)..'%, EM: '..math.floor(EM_rS/summaS*100)..'%, KI: '..math.floor(KI_rS/summaS*100)..'%, TH: '..math.floor(TH_rS/summaS*100)..'%')
                            --table.sort(DPStable)
                            --system.print('MAX is '..math.floor((DPStable[#DPStable])/summaS*100)..'%')
                            if Shield_Auto_Calibration and Shield_1hit_Calibration then
                                Shield_1hit_Calibration = false
                                    
                                TEMPtableS = DPStable
                                            
                                            table.sort(DPStable, function(a,b)
                             return a > b
                            end)
                                            
                                            
                                        if DPStable[1] == AM_rS 
                                                then
                                                system.print("ANTIMATTER POWER 100%")
                                                shield.setResistances(resMAX,0,0,0)
                                                AMres = 100
                                                EMres = 0
                                                KIres = 0
                                                THres = 0 
                                                end
                                                
                                         if DPStable[1] == EM_rS 
                                                then
                                                system.print("ELECTROMAGNETIC POWER 100%")
                                                shield.setResistances(0,resMAX,0,0)
                                                AMres = 0
                                                EMres = 100
                                                KIres = 0
                                                THres = 0 
                                                end 
                                                    
                                         if DPStable[1] == KI_rS then
                                                system.print("KINETIC POWER 100%")
                                                shield.setResistances(0,0,resMAX,0)
                                                AMres = 0
                                                EMres = 0
                                                KIres = 100
                                                THres = 0  
                                                end
                                                        
                                          if DPStable[1] == TH_rS 
                                                then
                                                system.print("THERMIC POWER 100%")
                                                shield.setResistances(0,0,0,resMAX)
                                                AMres = 0
                                                EMres = 0
                                                KIres = 0
                                                THres = 100 
                                                end   
                                end 
                                
                            else
                                AM_rS=0
                                EM_rS=0
                                KI_rS=0
                                TH_rS=0
                                
                                --system.print('DPS - AM: '..AM_rS..'%, EM: '..EM_rS..'%, KI: '.. KI_rS..'%, TH: '..TH_rS..'%')
                                end
                                DPStable = {}
                                TEMPtableS = {}
                                AM_rS=0
                                EM_rS=0
                                KI_rS=0
                                TH_rS=0
                                 --if summaG ~= 0 then
                                --system.print('DPM - AM: '..math.floor(AM_rM/summaG*100)..'%, EM: '..math.floor(EM_rM/summaG*100)..'%, KI: '..math.floor(KI_rM/summaG*100)..'%, TH: '..math.floor(TH_rM/summaG*100)..'%')
                                --end
        tick:
            args: ["hud"]
            lua: |
                renderNiceHud()
                throttle1 = math.floor(unit.getThrottle())
        tick:
            args: ["braketime"]
            lua: |
                --accel = math.floor((vec3(core.getWorldAcceleration()):len()/9.80665)*10)/10
                accel = math.floor((json.decode(unit.getData()).acceleration/9.80665)*10)/10
                shieldHP = string.format('%0.0f',math.floor(shield.getShieldHitpoints()/shieldMaxHP*100))
                fuel1 = json.decode(spacefueltank_1.getData()).percentage
                local c = 8333.333
                local m0 = core.getConstructMass()
                local v0 = vec3(core.getWorldVelocity())
                local controllerData = json.decode(unit.getData())
                local maxBrakeThrust = controllerData.maxBrake
                local time = 0.0
                dis = 0.0
                local v = v0:len()
                while v>1.0 do
                  time = time + 1
                  local m = m0 / (math.sqrt(1 - (v * v) / (c * c)))
                  local a = maxBrakeThrust / m
                  if v > a then
                    v = v - a --*1 sec
                    dis = dis + v + a / 2.0
                  elseif a ~= 0 then
                    local t = v/a
                    dis = dis + v * t + a*t*t/2
                    v = v - a
                  end
                end
                resString = ""
                --if dis > 200000 then--su
                  --resString = resString..string.format("%.2f", (dis/200000))..'su '
                --elseif dis > 1000 then--km
                  --resString = resString..string.format("%.2f", (dis/1000))..'км '
                --else--m
                  --resString = resString..string.format("%.2f",dis)..'м '
                --end
                --resString = resString..'Время: '..(time//60)..'м '..(time%60)..'с'
                if dis > 100000 then
                  resString = resString..string.format(math.floor((dis/200000) * 10)/10)
                  brakeText = "SU"  
                elseif dis > 1000 then
                  resString = resString..string.format(math.floor((dis/1000)*10)/10)
                  brakeText = "KM"  
                else
                  resString = resString..string.format(math.floor(dis))
                  brakeText = "M"  
                end
                coroutine.resume(refreshCoroutine,vec3(core.getConstructWorldPos()))
                function safeZone()
                local WorldPos = core.getConstructWorldPos()
                closestPlanet = helios[helios:closestBody(core.getConstructWorldPos()).bodyId]
                  
                local safeWorldPos = vec3({13771471,7435803,-128971})
                    local mabs = math.abs
                                local safeRadius = 18000000
                                local szradius = 500000
                                local distsz, distp = math.huge
                                szsafe = false
                                distsz = vec3(WorldPos):dist(safeWorldPos)
                                if distsz < safeRadius then
                        safew='::pos{0,0,13771471,7435803,-128971}'
                        szsafe=true
                            distS = mabs(distsz - safeRadius)
                        if distS > 100000 then
                  distS = ''..string.format('%0.2f', distS/200000)..'su' 
                elseif distS > 1000 and distS < 100000 then
                  distS = ''..string.format('%0.1f', distS/1000)..'km'  
                else
                  distS = ''..string.format('%0.0f', distS)..'m'     
                end
                            return 'PVP: '..distS..''
                                end
                        
                                distp = vec3(WorldPos):dist(vec3(closestPlanet.center))
                                if distp < szradius then szsafe = true else szsafe = false end
                                if mabs(distp - szradius) < mabs(distsz - safeRadius) then 
                        safew='::pos{0,0,'..closestPlanet.center.x..','..closestPlanet.center.y..','..closestPlanet.center.z..'}'
                             distS = mabs(distp - szradius)
                        if distS > 100000 then
                  distS = ''..string.format('%0.2f', distS/200000)..'su' 
                elseif distS > 1000 and distS < 100000 then
                  distS = ''..string.format('%0.1f', distS/1000)..'km'  
                else
                  distS = ''..string.format('%0.0f', distS)..'m'     
                end
                if szsafe == true then
                return ''..closestPlanet.name..' PVP: '..distS..''
                else
                return ''..closestPlanet.name..' SAFE: '..distS..''
                end
                            else
                           safew='::pos{0,0,13771471,7435803,-128971}'
                        distS = mabs(distsz - safeRadius)
                        if distS > 100000 then
                  distS = ''..string.format('%0.2f', distS/200000)..'su' 
                elseif distS > 1000 and distS < 100000 then
                  distS = ''..string.format('%0.1f', distS/1000)..'km'  
                else
                  distS = ''..string.format('%0.0f', distS)..'m'     
                end
                                    return 'SAFE: '..distS..''
                                end
                            end
                if szsafe == true then
                safetext='<greencolor1>'..safeZone()..'</greencolor1>'
                    else
                    safetext='<redcolor1>'..safeZone()..'</redcolor1>'
                    end
        stop:
            lua: |
                _autoconf.hideCategoryPanels()
                if antigrav ~= nil then antigrav.hide() end
                if warpdrive ~= nil then warpdrive.hide() end
                if gyro ~= nil then gyro.hide() end
                core.hide()
                Nav.control.switchOffHeadlights()
    shield:
        absorbed(hitpoints,rawHitpoints):
            lua: |
                data1 = shield.getStressRatio()
                newhit=1
                timeD = 1
                AM_rSH = tonumber(data1[1])
                EM_rSH = tonumber(data1[2])
                KI_rSH = tonumber(data1[3])
                TH_rSH = tonumber(data1[4])
                if AM_rSH == 0.0 then AM_rSH = 0 end
                if AM_rSH == 1.0 then AM_rSH = 1 end
                if EM_rSH == 0.0 then EM_rSH = 0 end
                if EM_rSH == 1.0 then EM_rSH = 1 end
                if KI_rSH == 0.0 then KI_rSH = 0 end
                if KI_rSH == 1.0 then KI_rSH = 1 end
                if TH_rSH == 0.0 then TH_rSH = 0 end
                if TH_rSH == 1.0 then TH_rSH = 1 end
                --system.print("before")
                --system.print('AM_rS1 = '..AM_rS1.. ' - rsH =' ..AM_rSH)
                --system.print('EM_rS1 = '..EM_rS1.. ' - rsH =' ..EM_rSH)
                --system.print('KI_rS1 = '..KI_rS1.. ' - rsH =' ..KI_rSH)
                --system.print('TH_rS1 = '..TH_rS1.. ' - rsH =' ..TH_rSH)
                if AM_rSH > AM_rS1 then 
                    AM_rS1 = AM_rSH
                    AM_rS=1
                    AMcolor = "#ff0000"
                    if timeD == 1 then     
                    AM_rM=AM_rM+1
                        end
                else
                    
                    if AM_rSH == 0 or AM_rSH < AM_rS1 then
                    AM_rS1 = AM_rSH
                    AM_rS=0  
                        end
                    end
                    
                if EM_rSH > EM_rS1 then 
                    EM_rS1 = EM_rSH
                    EM_rS=1
                    EMcolor = "#ff0000"
                     if timeD == 1 then     
                    EM_rM=EM_rM+1
                        end
                else
                    
                    if EM_rSH == 0 or EM_rSH < EM_rS1 then
                    EM_rS1 = EM_rSH
                    EM_rSH=0
                        end
                    end
                if KI_rSH > KI_rS1 then 
                    KI_rS1 = KI_rSH
                    KI_rS=1 
                    KIcolor = "#ff0000"
                     if timeD == 1 then     
                    KI_rM=KI_rM+1
                        end
                else
                  
                   if KI_rSH == 0 or KI_rSH < KI_rS1 then
                    KI_rS1 = KI_rSH
                    KI_rS=0
                        end
                    end
                if TH_rSH > TH_rS1 then 
                    TH_rS1 = TH_rSH
                    TH_rS=1
                    THcolor = "#ff0000"
                     if timeD == 1 then     
                    TH_rM=TH_rM+1
                        end
                else
                   
                   if TH_rSH == 0 or TH_rSH < TH_rS1 then
                    TH_rS1 = TH_rSH
                    TH_rS=0
                        end
                    end
                if AM_rSH == AM_rS1 and AM_rSH == 1 then
                        AM_rS1 = AM_rSH
                    AM_rS=1
                    AMcolor = "#ff0000"
                     if timeD == 1 then     
                    AM_rM=AM_rM+1
                        end
                    end
                    
                    if EM_rSH == EM_rS1 and EM_rSH == 1 then 
                        EM_rS1 = EM_rSH
                    EM_rS=1
                    EMcolor = "#ff0000"
                     if timeD == 1 then     
                    EM_rM=EM_rM+1
                        end
                        end
                        
                        if KI_rSH == KI_rS1 and KI_rSH == 1 then 
                        KI_rS1 = KI_rSH
                    KI_rS=1
                    KIcolor = "#ff0000"
                     if timeD == 1 then    
                    KI_rM=KI_rM+1
                        end
                            end
                            
                            if TH_rSH == TH_rS1 and TH_rSH == 1 then 
                        TH_rS1 = TH_rSH
                    TH_rS=1
                    THcolor = "#ff0000"
                     if timeD == 1 then     
                    TH_rM=TH_rM+1
                        end
                                end
                --system.print("after")
                --system.print('AM_rS1 = '..AM_rS1.. ' - rsH =' ..AM_rSH)
                --system.print('EM_rS1 = '..EM_rS1.. ' - rsH =' ..EM_rSH)
                --system.print('KI_rS1 = '..KI_rS1.. ' - rsH =' ..KI_rSH)
                --system.print('TH_rS1 = '..TH_rS1.. ' - rsH =' ..TH_rSH)
        restored:
            lua: |
             system.print("SHIELD READY")
        toggled(active):
            lua: |
             if shield.getState() == 0 then shieldColor = "#fc033d" else shieldColor = "#2ebac9" end
    system:
        update:
            lua: |
              Nav:update()
              if mybr then brakeInput = 1 endThrottleLevel = 0 end
              if unit.getThrottle()>0 then ThrottleLevel = 100000000 end
              unit.setEngineThrust('maneuver',engine.getMaxThrustBase()*ThrottleLevel)
        actionStart:
            args: [gear]
            lua: |
                gearExtended = not gearExtended
                if gearExtended then
                    Nav.control.extendLandingGears()
                    Nav.axisCommandManager:setTargetGroundAltitude(0)
                else
                    Nav.control.retractLandingGears()
                    Nav.axisCommandManager:setTargetGroundAltitude(500)
                end
                --data5 = shield.getStressRatio()
                --system.print("-----------------------")
                --system.print(tonumber(data5[1])..'/'..tonumber(data5[2]).. '/'..tonumber(data5[3])..'/' ..tonumber(data5[4]))
                --data6 = shield.getStressRatioRaw()
                --system.print(tonumber(data6[1])..'/'..tonumber(data6[2]).. '/'..tonumber(data6[3])..'/' ..tonumber(data6[4]))
                --system.print('AM_rS1 = '..AM_rS1)
                --system.print('EM_rS1 = '..EM_rS1)
                --system.print('KI_rS1 = '..KI_rS1)
                --system.print('TH_rS1 = '..TH_rS1)
                --system.print(math.floor(core.getPvPTimer()))
        actionStart:
            args: [light]
            lua: |
                if Nav.control.isAnyHeadlightSwitchedOn() == 1 then
                    Nav.control.switchOffHeadlights()
                else
                    Nav.control.switchOnHeadlights()
                end
        actionStart:
            args: [forward]
            lua: |
              pitchInput = pitchInput - 1
        actionStop:
            args: [forward]
            lua: |
              pitchInput = pitchInput + 1
        actionStart:
            args: [backward]
            lua: |
              pitchInput = pitchInput + 1
        actionStop:
            args: [backward]
            lua: |
              pitchInput = pitchInput - 1
        actionStart:
            args: [left]
            lua: |
              rollInput = rollInput - 1
        actionStop:
            args: [left]
            lua: |
              rollInput = rollInput + 1
        actionStart:
            args: [right]
            lua: |
              rollInput = rollInput + 1
        actionStop:
            args: [right]
            lua: |
              rollInput = rollInput - 1
        actionStart:
            args: [straferight]
            lua: |
              Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, 1.0)
        actionStop:
            args: [straferight]
            lua: |
              Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, -1.0)
        actionStart:
            args: [strafeleft]
            lua: |
              Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, -1.0)
        actionStop:
            args: [strafeleft]
            lua: |
              Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, 1.0)
        actionStart:
            args: [up]
            lua: |
                Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
                Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, 1.0)
                if tz1 ~= 2 then tz2=1 end
                if tz1 == 1 and tz2 == 1 then tz1=2 mybr = true end
        actionStop:
            args: [up]
            lua: |
                Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, -1.0)
                Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)
        actionStart:
            args: [down]
            lua: |
                Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
                Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, -1.0)
        actionStop:
            args: [down]
            lua: |
                Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, 1.0)
                Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)
        actionStart:
            args: [groundaltitudeup]
            lua: |
              Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)
        actionLoop:
            args: [groundaltitudeup]
            lua: |
              Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)
        actionStart:
            args: [groundaltitudedown]
            lua: |
              Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)
        actionLoop:
            args: [groundaltitudedown]
            lua: |
              Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)
        actionStart:
            args: [yawright]
            lua: |
              yawInput = yawInput - 1
        actionStop:
            args: [yawright]
            lua: |
              yawInput = yawInput + 1
        actionStart:
            args: [yawleft]
            lua: |
              yawInput = yawInput + 1
        actionStop:
            args: [yawleft]
            lua: |
              yawInput = yawInput - 1
        actionStart:
            args: [brake]
            lua: |
                if tz1 ~= 2 then

                if brakeInput == 0 then
                    brakeInput = 1
                    mybr=true
                else
                    brakeInput = 0
                    mybr=false
                end

                --brakeInput = brakeInput + 1
                local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                if (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                    local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)
                    if (math.abs(targetSpeed) > constants.epsilon) then
                        Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, - utils.sign(targetSpeed))
                    end
                    end
                --mybr=true
                tz1=1
                    end
                if tz1 == 2 and tz2 == 1 then tz2=0 tz1=0 mybr = false end
        actionStop:
            args: [brake]
            lua: |
                --brakeInput = brakeInput - 1
                --if tz1==1 then tz1=0 mybr = false end
        actionLoop:
            args: [brake]
            lua: |
                local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                if (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                    local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)
                    if (math.abs(targetSpeed) > constants.epsilon) then
                        Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, - utils.sign(targetSpeed))
                    end
                end
        actionStart:
            args: [booster]
            lua: |
              Nav:toggleBoosters()
        actionStart:
            args: [stopengines]
            lua: |
              Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)
        actionStart:
            args: [speedup]
            lua: |
              Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, 5.0)
        actionLoop:
            args: [speedup]
            lua: |
              Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, 1.0)
        actionStart:
            args: [speeddown]
            lua: |
              Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, -5.0)
        actionLoop:
            args: [speeddown]
            lua: |
              Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, -1.0)
        actionStart:
            args: [antigravity]
            lua: |
              if antigrav ~= nil then antigrav.toggle() end
        actionStop:
            args: [option5]
            lua: |
                  system.showScreen(1)
        actionStart:
            args: [option5]
            lua: |
                  system.showScreen(0)
        actionStart:
            args: [option9]
            lua: |
                if shield.isVenting() == 1 then 
                shield.stopVenting()
                system.print("Shield regeneration has been stopped!") 
                    else
                    if venttime < venttimemax and venttime ~= 0 then
                        system.print("Shield regeneration has already been stopped!")
                        else
                shield.startVenting()
                system.print("Shield regeneration started!") 
                        end
                end
        actionStop:
            args: [lshift]
            lua: |
                  lalt=false
        actionStart:
            args: [lshift]
            lua: |
                --varvw = varvw + 0.1
                --system.print('VW:' ..varvw)
                lalt=true
        actionStart:
            args: [option8]
            lua: |
                if Shield_Auto_Calibration == true then 
                    Shield_Auto_Calibration = false
                else
                    Shield_Auto_Calibration = true
                    end
        actionStart:
            args: [option6]
            lua: |
                if summaG ~= 0 and resisttime == 0 then
                local manualTable = {AM_rM, EM_rM, KI_rM, TH_rM}
                          
                            if Shield_Calibration_Max == true then 
                            table.sort(manualTable, function(a,b)
                 return a > b
                end)
                                
                            if manualTable[1] == manualTable[2] then
                                    --system.print("50%")
                                   shield.setResistances((math.floor(AM_rM/summaG*100)*resMAX)/100,(math.floor(EM_rM/summaG*100)*resMAX)/100,(math.floor(KI_rM/summaG*100)*resMAX)/100,(math.floor(TH_rM/summaG*100)*resMAX)/100)
                                   AMres = math.floor(AM_rM/summaG*100)
                                   EMres = math.floor(EM_rM/summaG*100)
                                   KIres = math.floor(KI_rM/summaG*100)
                                   THres = math.floor(TH_rM/summaG*100) 
                                else
                                
                            if manualTable[1] == AM_rM 
                                    then
                                    system.print("ANTIMATTER POWER 100%")
                                    shield.setResistances(resMAX,0,0,0)
                                    AMres = 100
                                    EMres = 0
                                    KIres = 0
                                    THres = 0 
                                    end
                                    
                             if manualTable[1] == EM_rM 
                                    then
                                    system.print("ELECTROMAGNETIC POWER 100%")
                                    shield.setResistances(0,resMAX,0,0)
                                    AMres = 0
                                    EMres = 100
                                    KIres = 0
                                    THres = 0 
                                    end 
                                        
                             if manualTable[1] == KI_rM then
                                    system.print("KINETIC POWER 100%")
                                    shield.setResistances(0,0,resMAX,0)
                                    AMres = 0
                                    EMres = 0
                                    KIres = 100
                                    THres = 0  
                                    end
                                            
                              if manualTable[1] == TH_rM 
                                    then
                                    system.print("THERMIC POWER 100%")
                                    shield.setResistances(0,0,0,resMAX)
                                    AMres = 0
                                    EMres = 0
                                    KIres = 0
                                    THres = 100 
                                    end       
                            
                            end   
                            
                            else
                            shield.setResistances((math.floor(AM_rM/summaG*100)*resMAX)/100,(math.floor(EM_rM/summaG*100)*resMAX)/100,(math.floor(KI_rM/summaG*100)*resMAX)/100,(math.floor(TH_rM/summaG*100)*resMAX)/100)
                    AMres =  math.floor(AM_rM/summaG*100)
                        EMres =  math.floor(EM_rM/summaG*100)
                        KIres =  math.floor(KI_rM/summaG*100)
                        THres =  math.floor(TH_rM/summaG*100)
                            
                   end
                    timeD=0
                    timeF=62
                    
                    AM_rM=0
                    EM_rM=0
                    KI_rM=0
                    TH_rM=0
                    
                    summaG=0
                    end
        actionStart:
            args: [option7]
            lua: |
                if Shield_Calibration_Max == true
                    then
                   Shield_Calibration_Max = false
                    else
                   Shield_Calibration_Max = true
                end
        actionStart:
            args: [option4]
            lua: |
                timeD=0
                timeF=62
                AM_rM=0
                EM_rM=0
                KI_rM=0
                TH_rM=0
                summaG=0
                system.print("DPM calculation has been reset")
        actionStart:
            args: [option3]
            lua: |
                DepartureWaypoint = "::pos{0,0," ..math.floor(Planet[Departure_export].center.x)..","..math.floor(Planet[Departure_export].center.y)..","..math.floor(Planet[Departure_export].center.z).."}"
                system.print(DepartureCenterName)
                system.setWaypoint(DepartureWaypoint)
        actionStart:
            args: [option2]
            lua: |
                local function getPipeDistance() 
                             local worldPos = vec3(core.getConstructWorldPos())
                                local pipe = (DestinationCenter - DepartureCenter):normalize()
                                local r = (worldPos -DepartureCenter):dot(pipe) / pipe:dot(pipe)
                                if r <= 0. then
                                   return (worldPos-DepartureCenter):len()
                                elseif r >= (DestinationCenter - DepartureCenter):len() then
                                   return (worldPos-DestinationCenter):len()
                                end
                                local L = DepartureCenter + (r * pipe)
                                pipeDistance = (L - worldPos):len()
                                PipeWaypoint = "::pos{0,0," ..math.floor(L.x).. "," ..math.floor(L.y).. "," ..math.floor(L.z).. "}"
                                return PipeWaypoint
                            end
                system.print("Pipe center: " ..DepartureCenterName.. " - " ..DestinationCenterName)
                system.setWaypoint(getPipeDistance())
        actionStart:
            args: [option1]
            lua: |
                DestWaypoint = "::pos{0,0," ..math.floor(Planet[Destination_export].center.x)..","..math.floor(Planet[Destination_export].center.y)..","..math.floor(Planet[Destination_export].center.z).."}"
                system.print(DestinationCenterName)
                system.setWaypoint(DestWaypoint)
        inputText(text):
            lua: |
                    if text == "a" then
                            shield.setResistances(resMAX,0,0,0)
                            system.print("ANTIMATTER POWER: 100%")  
                            AMres = 100
                            EMres = 0
                            KIres = 0
                            THres = 0
                            
                            timeD=0
                            timeF=62
                            
                            AM_rM=0
                            EM_rM=0
                            KI_rM=0
                            TH_rM=0
                            
                            summaG=0
                                end
                            if text == "e" then
                            shield.setResistances(0,resMAX,0,0)
                            system.print("ELECTROMAGNETIC POWER: 100%")
                            AMres = 0
                            EMres = 100
                            KIres = 0
                            THres = 0
                            
                            timeD=0
                            timeF=62
                            
                            AM_rM=0
                            EM_rM=0
                            KI_rM=0
                            TH_rM=0
                            
                            summaG=0
                                end
                            if text == "k" then
                            shield.setResistances(0,0,resMAX,0)
                            system.print("KINETIC POWER: 100%")
                            AMres = 0
                            EMres = 0
                            KIres = 100
                            THres = 0
                            
                            timeD=0
                            timeF=62
                            
                            AM_rM=0
                            EM_rM=0
                            KI_rM=0
                            TH_rM=0
                            
                            summaG=0
                                end
                            if text == "t" then
                            shield.setResistances(0,0,0,resMAX)
                            system.print("THERMIC POWER: 100%")
                            AMres = 0
                            EMres = 0
                            KIres = 0
                            THres = 100 
                            
                            timeD=0
                            timeF=62
                            
                            AM_rM=0
                            EM_rM=0
                            KI_rM=0
                            TH_rM=0
                            
                            summaG=0
                                end
                            if text == "l" then
                            shield.setResistances(0,resMAX/2,0,resMAX/2)
                            system.print("LASER PROFILE: 50/50%")
                            AMres = 0
                            EMres = 50
                            KIres = 0
                            THres = 50 
                            
                            timeD=0
                            timeF=62
                            
                            AM_rM=0
                            EM_rM=0
                            KI_rM=0
                            TH_rM=0
                            
                            summaG=0
                                end
                            if text == "c" then
                            shield.setResistances(0,0,resMAX/2,resMAX/2)
                            system.print("CANNON PROFILE: 50/50%")
                            AMres = 0
                            EMres = 0
                            KIres = 50
                            THres = 50 
                            
                            timeD=0
                            timeF=62
                            
                            AM_rM=0
                            EM_rM=0
                            KI_rM=0
                            TH_rM=0
                            
                            summaG=0
                                end
                           if text == "m" then
                            shield.setResistances(resMAX/2,0,resMAX/2,0)
                            system.print("MISSILE PROFILE: 50/50%")
                            AMres = 50
                            EMres = 0
                            KIres = 50
                            THres = 0 
                            
                            timeD=0
                            timeF=62
                            
                            AM_rM=0
                            EM_rM=0
                            KI_rM=0
                            TH_rM=0
                            
                            summaG=0
                                end
                                
                            if text == "r" then
                            shield.setResistances(resMAX/2,resMAX/2,0,0)
                            system.print("RAILGUN PROFILE: 50/50%")
                            AMres = 50
                            EMres = 50
                            KIres = 0
                            THres = 0 
                            
                            timeD=0
                            timeF=62
                            
                            AM_rM=0
                            EM_rM=0
                            KI_rM=0
                            TH_rM=0
                            
                            summaG=0
                                end
                        if text == "s" then
                        if shield.getState() == 0 then 
                            shield.activate()
                            system.print("SHIELD ONLINE")
                        else
                            shield.deactivate()
                            system.print("SHIELD OFFLINE")
                            end
                        end
                        if text =="drop" then
                        local listships = core.getDockedConstructs()
                        for i=1, #listships do
                        core.forceUndock(listships[i])
                        system.print("All ships were successfully undocked")
                        end
                                            end
                                        if text =="sw" then
                                            shield.show()
                                            end
                                            
                                        if text =="sz" then
                                        system.setWaypoint(safew)
                                        system.print("Closest safe zone")
                                            end
                                        if text =="szc" then
                                        system.setWaypoint("::pos{0,0,13771471,7435803,-128971}")
                                        system.print("Safe zone center")
                                            end
        flush:
            lua: |
                local pitchSpeedFactor = 0.8 --export: This factor will increase/decrease the player input along the pitch axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
                local yawSpeedFactor =  1 --export: This factor will increase/decrease the player input along the yaw axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
                local rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
                local brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
                local brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
                local autoRoll = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
                local autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
                local turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
                local turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
                local torqueFactor = 2 -- Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
                -- validate params
                pitchSpeedFactor = math.max(pitchSpeedFactor, 0.01)
                yawSpeedFactor = math.max(yawSpeedFactor, 0.01)
                rollSpeedFactor = math.max(rollSpeedFactor, 0.01)
                torqueFactor = math.max(torqueFactor, 0.01)
                brakeSpeedFactor = math.max(brakeSpeedFactor, 0.01)
                brakeFlatFactor = math.max(brakeFlatFactor, 0.01)
                autoRollFactor = math.max(autoRollFactor, 0.01)
                turnAssistFactor = math.max(turnAssistFactor, 0.01)
                -- final inputs
                local finalPitchInput = pitchInput + system.getControlDeviceForwardInput()
                local finalRollInput = rollInput + system.getControlDeviceYawInput()
                local finalYawInput = yawInput - system.getControlDeviceLeftRightInput()
                local finalBrakeInput = brakeInput
                -- Axis
                local worldVertical = vec3(core.getWorldVertical()) -- along gravity
                local constructUp = vec3(core.getConstructWorldOrientationUp())
                local constructForward = vec3(core.getConstructWorldOrientationForward())
                local constructRight = vec3(core.getConstructWorldOrientationRight())
                local constructVelocity = vec3(core.getWorldVelocity())
                local constructVelocityDir = vec3(core.getWorldVelocity()):normalize()
                local currentRollDeg = getRoll(worldVertical, constructForward, constructRight)
                local currentRollDegAbs = math.abs(currentRollDeg)
                local currentRollDegSign = utils.sign(currentRollDeg)
                -- Rotation
                local constructAngularVelocity = vec3(core.getWorldAngularVelocity())
                local targetAngularVelocity = finalPitchInput * pitchSpeedFactor * constructRight
                                                + finalRollInput * rollSpeedFactor * constructForward
                                                + finalYawInput * yawSpeedFactor * constructUp
                -- In atmosphere?
                if worldVertical:len() > 0.01 and unit.getAtmosphereDensity() > 0.0 then
                    local autoRollRollThreshold = 1.0
                    -- autoRoll on AND currentRollDeg is big enough AND player is not rolling
                    if autoRoll == true and currentRollDegAbs > autoRollRollThreshold and finalRollInput == 0 then
                        local targetRollDeg = utils.clamp(0,currentRollDegAbs-30, currentRollDegAbs+30);  -- we go back to 0 within a certain limit
                        if (rollPID == nil) then
                            rollPID = pid.new(autoRollFactor * 0.01, 0, autoRollFactor * 0.1) -- magic number tweaked to have a default factor in the 1-10 range
                        end
                        rollPID:inject(targetRollDeg - currentRollDeg)
                        local autoRollInput = rollPID:get()
                        targetAngularVelocity = targetAngularVelocity + autoRollInput * constructForward
                    end
                    local turnAssistRollThreshold = 20.0
                    -- turnAssist AND currentRollDeg is big enough AND player is not pitching or yawing
                    if turnAssist == true and currentRollDegAbs > turnAssistRollThreshold and finalPitchInput == 0 and finalYawInput == 0 then
                        local rollToPitchFactor = turnAssistFactor * 0.1 -- magic number tweaked to have a default factor in the 1-10 range
                        local rollToYawFactor = turnAssistFactor * 0.025 -- magic number tweaked to have a default factor in the 1-10 range
                        -- rescale (turnAssistRollThreshold -> 180) to (0 -> 180)
                        local rescaleRollDegAbs = ((currentRollDegAbs - turnAssistRollThreshold) / (180 - turnAssistRollThreshold)) * 180
                        local rollVerticalRatio = 0
                        if rescaleRollDegAbs < 90 then
                            rollVerticalRatio = rescaleRollDegAbs / 90
                        elseif rescaleRollDegAbs < 180 then
                            rollVerticalRatio = (180 - rescaleRollDegAbs) / 90
                        end
                        rollVerticalRatio = rollVerticalRatio * rollVerticalRatio
                        local turnAssistYawInput = - currentRollDegSign * rollToYawFactor * (1.0 - rollVerticalRatio)
                        local turnAssistPitchInput = rollToPitchFactor * rollVerticalRatio
                        targetAngularVelocity = targetAngularVelocity
                                            + turnAssistPitchInput * constructRight
                                            + turnAssistYawInput * constructUp
                    end
                end
                -- Engine commands
                local keepCollinearity = 1 -- for easier reading
                local dontKeepCollinearity = 0 -- for easier reading
                local tolerancePercentToSkipOtherPriorities = 1 -- if we are within this tolerance (in%), we don't go to the next priorities
                -- Rotation
                local angularAcceleration = torqueFactor * (targetAngularVelocity - constructAngularVelocity)
                local airAcceleration = vec3(core.getWorldAirFrictionAngularAcceleration())
                angularAcceleration = angularAcceleration - airAcceleration -- Try to compensate air friction
                Nav:setEngineTorqueCommand('torque', angularAcceleration, keepCollinearity, 'airfoil', '', '', tolerancePercentToSkipOtherPriorities)
                -- Brakes
                local brakeAcceleration = -finalBrakeInput * (brakeSpeedFactor * constructVelocity + brakeFlatFactor * constructVelocityDir)
                Nav:setEngineForceCommand('brake', brakeAcceleration)
                -- AutoNavigation regroups all the axis command by 'TargetSpeed'
                local autoNavigationEngineTags = ''
                local autoNavigationAcceleration = vec3()
                local autoNavigationUseBrake = false
                -- Longitudinal Translation
                local longitudinalEngineTags = 'thrust analog longitudinal'
                local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                if (longitudinalCommandType == axisCommandType.byThrottle) then
                    local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(longitudinalEngineTags,axisCommandId.longitudinal)
                    Nav:setEngineForceCommand(longitudinalEngineTags, longitudinalAcceleration, keepCollinearity)
                elseif  (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                    local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)
                    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. longitudinalEngineTags
                    autoNavigationAcceleration = autoNavigationAcceleration + longitudinalAcceleration
                    if (Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal) == 0 or -- we want to stop
                        Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal) < - Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal) * 0.5) -- if the longitudinal velocity would need some braking
                    then
                        autoNavigationUseBrake = true
                    end
                end
                -- Lateral Translation
                local lateralStrafeEngineTags = 'thrust analog lateral'
                local lateralCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)
                if (lateralCommandType == axisCommandType.byThrottle) then
                    local lateralStrafeAcceleration =  Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lateralStrafeEngineTags,axisCommandId.lateral)
                    Nav:setEngineForceCommand(lateralStrafeEngineTags, lateralStrafeAcceleration, keepCollinearity)
                elseif  (lateralCommandType == axisCommandType.byTargetSpeed) then
                    local lateralAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)
                    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. lateralStrafeEngineTags
                    autoNavigationAcceleration = autoNavigationAcceleration + lateralAcceleration
                end
                -- Vertical Translation
                local verticalStrafeEngineTags = 'thrust analog vertical'
                local verticalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)
                if (verticalCommandType == axisCommandType.byThrottle) then
                    local verticalStrafeAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(verticalStrafeEngineTags,axisCommandId.vertical)
                    Nav:setEngineForceCommand(verticalStrafeEngineTags, verticalStrafeAcceleration, keepCollinearity, 'airfoil', 'ground', '', tolerancePercentToSkipOtherPriorities)
                elseif  (verticalCommandType == axisCommandType.byTargetSpeed) then
                    local verticalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)
                    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. verticalStrafeEngineTags
                    autoNavigationAcceleration = autoNavigationAcceleration + verticalAcceleration
                end
                -- Auto Navigation (Cruise Control)
                if (autoNavigationAcceleration:len() > constants.epsilon) then
                    if (brakeInput ~= 0 or autoNavigationUseBrake or math.abs(constructVelocityDir:dot(constructForward)) < 0.95)  -- if the velocity is not properly aligned with the forward
                    then
                        autoNavigationEngineTags = autoNavigationEngineTags .. ', brake'
                    end
                    Nav:setEngineForceCommand(autoNavigationEngineTags, autoNavigationAcceleration, dontKeepCollinearity, '', '', '', tolerancePercentToSkipOtherPriorities)
                end
                -- Rockets
                Nav:setBoosterCommand('rocket_engine')