name: CFCS-Gunner v1.3 (public) coroutine
pvp: true

slots:
    core:
        class: CoreUnit
        select: all
    weapon:
        class: WeaponUnit
        select: manual
    radar:
        class: RadarPVPUnit
        select: manual
    db:
        class: DatabankUnit
        select: manual
handlers:
    unit:
        start:
            lua: |
                radarWidgetScale = 2
                radarWidgetScaleDisplay = ''
                for slot_name, slot in pairs(unit) do
                if
                    type(slot) == "table"
                    and type(slot.export) == "table"
                    and slot.getElementClass
                then
                    if slot.getElementClass():lower():find("databank") then
                         db = slot
                    end
                    if string.find(slot.getElementClass(), 'Radar') ~= nil then
                            if string.find(slot.getElementClass(), 'Space') ~= nil then
                                radarWidgetScale = 2
                                radarWidgetScaleDisplay = '<div class="measures"><span>0 SU</span><span>1 SU</span><span>2 SU</span></div>'
                            else
                                radarWidgetScale = 160
                                radarWidgetScaleDisplay = '<div class="measures"><span>0 KM</span><span>2.5 KM</span><span>5 KM</span></div>'
                            end

                        -- Periscope
                        radar = {}
                        radar[1] = radar_1
                        radar_size = 1
                        _autoconf.displayCategoryPanel(radar, radar_size, "Periscope", "periscope")

                        end
                end
                end
                local ok1 = pcall(require,'autoconf/custom/CFCS_HUD/helios')
                if not ok1 then
                system.print('Module "CFCS_HUD" not found!')
                db.clear()
                unit.exit()
                end
                referenceTableSource = require('autoconf/custom/CFCS_HUD/helios')
                numFormat = require('autoconf/custom/CFCS_HUD/numFormat')
                PlanetaryReference = require('autoconf/custom/CFCS_HUD/planetref')
                icons = require('autoconf/custom/CFCS_HUD/icons')
                galaxyReference = PlanetaryReference(referenceTableSource)
                helios = galaxyReference[0]
                
                function zeroConvertToWorldCoordinates(cl)
                local q = ' *([+-]?%d+%.?%d*e?[+-]?%d*)'
                local cm = '::pos{' .. q .. ',' .. q .. ',' .. q .. ',' .. q .. ',' .. q .. '}'
                local cn, co, ci, cj, ch = string.match(cl, cm)
                if cn == '0' and co == '0' then
                    return {tonumber(ci), tonumber(cj), tonumber(ch)}
                end
                cj = math.rad(cj)
                ci = math.rad(ci)
                atlas=PlanetaryReference(referenceTableSource)
                local planet = atlas[tonumber(cn)][tonumber(co)]
                    
                    local cp = math.cos(ci)
                    local cq = vec3(cp * math.cos(cj), cp * math.sin(cj), math.sin(ci))
                    return {(planet.center + (planet.radius + ch) * cq):unpack()}
                end
                system.showScreen(1)
                newid1 = 0
                newTarget1 = 0 
                speed12 = 0
                hudversion = 'CFCS V1.3'
                newcolor = "#6affb1"    
                endload = 0
                dist1=0
                dist3=0 
                znak=''    
                firstload = 0  
                firstload1 = 0    
                constructSelected=0
                probil='0'
                wep2=""
                wep3=""
                wep4=""
                wep5=""
                wep6=""

                globalid=0
                increment = 5
                heightBetweenAngles = 30
                playerName = system.getPlayerName(unit.getMasterPlayerId())
                xDelta = -238
                yDelta = -108
                wheelDelta = -200
                mapScale = .99999
                planetScale = 1200
                aliothsize = 8000
                moonScale = 3000
                map = 0
                warpScan = 0
                targetList = ''
                mys1 = ''
                radarTarget = nil
                radarStatic = {}
                radarDynamic = {}
                radarStaticWidget = {}
                radarStaticData = {}
                radarDynamicWidget = {}
                radarDynamicData = {}
                radarWidget = ''
                rrstatus=false
                --t_radarEnter = {}
                    conID = core_1.getConstructId()
                    conID = (""..conID..""):sub(-3)
                    if db.getStringValue(15) ~= "" then
                    asteroidPOS = db.getStringValue(15)
                            else
                            asteroidPOS = ''
                            end
                                markerName = "Asteroid" --export:
                                if markerName == "" then markerName = "Asteroid" end
                                asteroidcoord = {}
                        if asteroidPOS ~= "" then
                        asteroidcoord = zeroConvertToWorldCoordinates(asteroidPOS)
                            else
                            asteroidcoord = {0,0,0}
                            end
                -- End of auto-generated code 
                CFCS_Angular_Radial = false --export: Show angular and radial speed
                CFCS_ShowWeapons = true --export: Show 3rd person weapon widget
                CFCS_ShowRadar = true --export: Show 3rd person radar widget
                CFCS_ShowAllies = true --export: Show allies
                CFCS_ShowEcho = true --export: Show targets echo
                CFCS_Radar_Only_Enemies = true
                CFCS_Notifications = true --export: LUA radar notifications
                CFCS_SafeNotifications = false --export: Show notifications in the safe zone
                CFCS_EnterPOS = true --export: LUA radar enter notifications
                CFCS_SelectBorder_Color = "#00b9c9" --export:
                CFCS_Allies_Color = "#0cf27b" --export:
                CFCS_Allied_Names_Color = "#0cf27b" --export:
                CFCS_Targets_Color = "#fc033d" --export:
                CFCS_Target_Names_Color = "#fc033d" --export: Color for target names
                CFCS_Chance_Color = "#0cf27b"
                CFCS_Allies_Distance_Color = "#00b9c9" --export:
                CFCS_Distance_Color = "#00b9c9" --export:
                CFCS_Speed_Color = "#00b9c9" --export:
                CFCS_Angular_Color = "#bccc06"
                CFCS_Radial_Color = "#bccc06"
                CFCS_Count_Color = "#00b9c9" --export:
                CFCS_Border_Color = "black" --export:
                CFCS_Border_Angular_Radial_Speed_Color = "black" --export:
                CFCS_Background_Color = "#142027" --export: Backgroung color CFCS system
                CFCS_BorderStyle_Angular_Radial_Speed_Color = "inset" --export:
                CFCS_AlliesY = 1.8 --export:
                CFCS_SelectedY = 50 --export:
                CFCS_SelectedX = 37.4 --export:
                CFCS_SelectedTextY = 12 --export:
                audiopack_location = "C:/test/audiopacks/" --export: Example: C:/test/audiopacks/
                
                    function WeaponWidgetCreate()
                        if type(weapon) == 'table' and #weapon > 0 then
                            local WeaponPanaelIdList = {}
                            for i = 1, #weapon do
                                if i%2 ~= 0 then
                                table.insert(WeaponPanaelIdList, system.createWidgetPanel(''))
                                end
                                    local WeaponWidgetDataId = weapon[i].getDataId()
                                    local WeaponWidgetType = weapon[i].getWidgetType()
                                    system.addDataToWidget(WeaponWidgetDataId, system.createWidget(WeaponPanaelIdList[#WeaponPanaelIdList], WeaponWidgetType))
                            end
                        end
                    end
                    if CFCS_ShowWeapons == true then 
                    WeaponWidgetCreate()
                    end
                    function seconds_to_clock(time_amount)
                        local start_seconds = time_amount
                        local start_minutes = math.modf(start_seconds/60)
                        local seconds = start_seconds - start_minutes*60
                        local start_hours = math.modf(start_minutes/60)
                        local minutes = start_minutes - start_hours*60
                        local start_days = math.modf(start_hours/24)
                        local hours = start_hours - start_days*24
                        local wrapped_time = {h=hours, m=minutes, s=seconds}
                        return string.format('%02.f:%02.f:%02.f', wrapped_time.h, wrapped_time.m, wrapped_time.s)
                    end
                    fm = 'Enemies'
                    rf = ''
                    CFCS_locked = false
                           if CFCS_ShowRadar == true then  
                        function updateRadar(r,match)
                            local data = radar_1.getData()
                            if string.len(data) < 120000 then  
                            --system.print('< '..string.len(data))     
                            local constructList = data:gmatch('({"constructId":".-%b{}.-})') 
                            local list = {}
                            for str in constructList do
                                local id = str:match('"constructId":"([%d]*)"')
                                local tagged = radar_1.hasMatchingTransponder(id) == 0 and true or false
                                local ident = radar_1.isConstructIdentified(id) == 1
                              if CFCS_locked then 
                                        if match and tagged and ident then    
                                    list[#list+1] = str
                                         elseif not match and not tagged and ident then
                                        list[#list+1] = str
                                end
                    else
                    if match and tagged then    
                                    list[#list+1] = str
                                         elseif not match and not tagged then
                                        list[#list+1] = str
                                end
                            end
                    end
                            return '{"constructsList":['..table.concat(list,',')..'],'..data:match('"elementId":".+')
                                        end
                        end
                        local _data = updateRadar(radar,CFCS_Radar_Only_Enemies)
                        local _panel = system.createWidgetPanel("RADAR")
                        local _widget = system.createWidget(_panel, "value")
                        radarFilter = system.createData('{"label":"Filter","'..fm..''..rf..'","unit": ""}') 
                        system.addDataToWidget(radarFilter, _widget)
                        local _widget = system.createWidget(_panel, "radar")
                        radarData = system.createData(_data) 
                        system.addDataToWidget(radarData, _widget)
                    end
                    --if CFCS_ShowWeapons == true then 
                    --WeaponWidgetCreate()
                    --end
                    unit.setTimer("radar",0.2)
                    local function cf()
                      --local decode = json.decode
                      local id = "" 
                            local idd2 = "" 
                      while true do
                        local i = 0
                        local htmltext = ""
                        local hudver = ""
                        local htmltext2 = ""
                        local friendlies = 0
                        local list, list2, lockList = "", "", ""
                        local islockList = ""
                        local caption = ""
                        local captionw = ""
                        local targetsele = ""
                        local tdists = ""        
                        local isILock, alarm = false, false 
                        --getData = radar_1.getData()    
                        --local radarData = getData
                        radarTarget = {}
                        radarStatic = {}
                        radarDynamic = {}
                        local constructRow = {}
                        radarDynamicData = radarDynamicWidget
                        radarDynamicWidget = {}
                        radarStaticData = radarStaticWidget
                        radarStaticWidget = {}
                        local worksInEnvironment = radar_1.isOperational()
                        local idN = #radar_1.getConstructIds()
                        --system.print(idN)
                        if worksInEnvironment == 0 then rrstatus = false else rrstatus = true end
                        --if getData ~= nil then
                           -- i = i + 1 
                           -- constructSelected = getData:match('"selectedConstruct":"([%d]*)"') 
                           -- if i > 50 then
                           -- i = 0
                            --coroutine.yield()
                           -- end 
                              -- end
                        speed12 = vec3(core_1.getWorldVelocity()):len()
                        for k,v in pairs(radar_1.getConstructIds()) do
                            i = i + 1
                            --local construct = decode(S)
                            --local dist = math.floor(tonumber(radar_1.getConstructDistance(v)))
                            local size = radar_1.getConstructCoreSize(v)   
                            local distkm = 0
                            local distSU = 0
                            local distm = 0 
                            local tdist = 0        
                            if newTarget1 == 1 and newid1 == v and size ~= "" then
                                    --if radar_1.hasMatchingTransponder(constID) == 0 and not contains(tablelist, id) then
                                    if radar_1.hasMatchingTransponder(v) == 0 then
                                    local name = radar_1.getConstructName(v)
                                    --local size = radar_1.getConstructCoreSize(v)
                                    local dist = math.floor(tonumber(radar_1.getConstructDistance(v)))
                                    system.print("---------------") 
                                    system.print('NEW TARGET: '..v..' - Name: '..name..' - Size: '..size..' - Time: '..seconds_to_clock(system.getTime())..'')
                                    if CFCS_EnterPOS and speed12 > 27 then
                                    system.print(system.getWaypointFromPlayerPos())
                                    end
                                    newTarget1 = 0
                                                end
                                                end
                            if CFCS_ShowEcho == true and size ~= "" then
                              --local constructRow = {}
                            -- constructRow.constructDistance = numFormat.distanceFormat(radar_1.getConstructDistance(v))
                             constructRow.widgetDist = math.ceil(radar_1.getConstructDistance(v) / 1000 * radarWidgetScale)
                                    end
                            
                     -- radarlist  
                                if CFCS_ShowAllies == true and size ~= "" then 
                                              if worksInEnvironment == 1 then   
                                                --if radar_1.hasMatchingTransponder(construct.constructId) == 1 or contains(tablelist, id) then
                                                if radar_1.hasMatchingTransponder(v) == 1 then
                                        local name = radar_1.getConstructName(v)
                            --local size = radar_1.getConstructCoreSize(v)
                            local dist = math.floor(tonumber(radar_1.getConstructDistance(v)))
                            local seldist = dist 
                                if (dist > 1000 and dist < 100000) then tdist = string.format('%0.1f', seldist/1000) tdists = 'KM' distkm = ' '..string.format('%0.1f', dist/1000)..'km' end
                            if dist < 1000 then tdist = seldist tdists = 'M' distm = ' '..dist..'m' end 
                            if dist > 100000 then tdist = string.format('%0.2f', seldist/200000) tdists = 'SU' distSU = ' '..string.format('%0.1f', dist/1000)..'km ('..string.format('%0.2f', dist/200000)..'SU)' end
                            if distkm ~= 0 then dist = distkm end
                            if distm ~= 0 then dist = distm end
                            if distSU ~= 0 then dist = distSU end 
                                                local allID = (""..v..""):sub(-3)
                                                local nameA = ''..allID..' '..name..''
                                                    friendlies = friendlies + 1
                                                    list = list..[[
                                                        <div class="table-row3 th3">
                                                          <div class="table-cell3">
                                        ]]..'['..size..'] '..nameA.. [[<br><distalliescolor>]] ..dist.. [[</distalliescolor>
                                        </div>
                                    </div>]] 
                                                end
                                            end 
                                    end
                                    -- targets
                            local speed = 0
                            local radspeed = 0
                            local angspeed = 0    
                                if radar_1.isConstructIdentified(v) == 1 and size ~= "" then
                                local name = radar_1.getConstructName(v)
                            --local size = radar_1.getConstructCoreSize(v)
                            local dist = math.floor(tonumber(radar_1.getConstructDistance(v)))
                            local seldist = dist 
                                if (dist > 1000 and dist < 100000) then tdist = string.format('%0.1f', seldist/1000) tdists = 'KM' distkm = ' '..string.format('%0.1f', dist/1000)..'km' end
                            if dist < 1000 then tdist = seldist tdists = 'M' distm = ' '..dist..'m' end 
                            if dist > 100000 then tdist = string.format('%0.2f', seldist/200000) tdists = 'SU' distSU = ' '..string.format('%0.1f', dist/1000)..'km ('..string.format('%0.2f', dist/200000)..'SU)' end
                            if distkm ~= 0 then dist = distkm end
                            if distm ~= 0 then dist = distm end
                            if distSU ~= 0 then dist = distSU end 
                                        local IDT = (""..v..""):sub(-3)
                                        local nameIDENT = ''..IDT..' '..name..''
                                        local nameT = string.sub((""..nameIDENT..""),1,11)
                                --table.insert(radarTarget, constructRow)
                                isILock = true
                                speed = math.floor(tonumber(radar_1.getConstructSpeed(v) * 3.6))
                                           if radar_1.getTargetId(v) == v then
                                                dist3=math.floor(tonumber(speed * 3.6))
                                                if CFCS_Angular_Radial == true then    
                                                radspeed = math.floor(tonumber(radar_1.getConstructRadialSpeed(v)) * 3.6)
                                                angspeed = math.floor(tonumber(radar_1.getConstructAngularSpeed(v)) * 3.6)
                                                                   -- islockList = islockList..[[
                                                    --<div class="table-row2 thS">
                                                        --<div class="table-cellS"> 
                                                           --]]..'['..size..'] '..name.. [[ <distcolor>]] ..dist.. [[</distcolor> <speedcolor> ]] ..speed.. [[km/h</speedcolor><br><angcolor>]]..angspeed..[[deg/s</angcolor> <radcolor> ]]..radspeed..[[km/h </radcolor><chancecolor>]]..probil..[[</chancecolor>
                                                       -- </div>
                                                   -- </div>]]               
                                                targetsele = targetstyle.. [[
                                                                
                                                              <div class="telemetry">
                                                        <div class="numbers">
                                         <div>]]..probil..[[</div>
                                         <h2><redcolor>]]..nameT..[[</redcolor><span>%</span></h2>
                                        </div>
                                        <div class="numbers">
                                         <div><style> newcolor {
                                                      color: ]]..newcolor..[[;
                                                     }</style><newcolor>]]..znak..[[]]..speed..[[</newcolor></div>
                                         <h2>SPEED<span>km/h</span></h2>
                                        </div>
                                        <div class="numbers">
                                         <div>]]..radspeed..[[</div>
                                         <h2>RADIAL<span>km/h</span></h2>
                                        </div>
                                        <div class="numbers">
                                         <div>]]..tdist..[[</div>
                                         <h2>Distance<span>]]..tdists..[[</span></h2>
                                        </div>
                                                        <div class="numbers">
                                         <div>]]..angspeed..[[</div>
                                         <h2>ANGULAR<span>°s</span></h2>
                                        </div>
                                       </div>
                                                                ]]
                                                                
                                                     islockList = islockList..[[
                                                    <div class="table-row2 thS">
                                                        <div class="table-cellS"> 
                                                           ]]..'['..size..'] '..nameIDENT.. [[ <tran>]] ..speed.. [[km/h<br>]] ..dist.. [[</tran>
                                                        </div>
                                                    </div>]] 
                                                        
                                                        else
                                                                
                                                targetsele = targetstyle.. [[
                                                                
                                                              <div class="telemetry">
                                                        <div class="numbers">
                                         <div>]]..probil..[[</div>
                                         <h2><redcolor>]]..nameT..[[</redcolor><span>%</span></h2>
                                        </div>
                                        <div class="numbers">
                                         <div><style> newcolor {
                                                      color: ]]..newcolor..[[;
                                                     }</style><newcolor>]]..znak..[[]]..speed..[[</newcolor></div>
                                         <h2>SPEED<span>km/h</span></h2>
                                        </div>
                                        <div class="numbers">
                                         <div>]]..tdist..[[</div>
                                         <h2>Distance<span>]]..tdists..[[</span></h2>
                                        </div>
                                       </div>
                                                                ]]
                                                       
                                                islockList = islockList..[[
                                                    <div class="table-row2 thS">
                                                        <div class="table-cellS"> 
                                                           ]]..'['..size..'] '..nameIDENT.. [[ <tran>]] ..speed.. [[km/h<br>]] ..dist.. [[</tran>
                                                        </div>
                                                    </div>]] 
                                                         
                                                    end
                                        else
                                               islockList = islockList..[[
                                                    <div class="table-row2 th2">
                                                        <div class="table-cell2"> 
                                                           ]]..'['..size..'] '..nameIDENT.. [[ <speedcolor> ]] ..speed.. [[km/h</speedcolor><br><distcolor>]] ..dist.. [[</distcolor>
                                                        </div>
                                                    </div>]] 
                                        end
                                                    else
                                                   
                                if CFCS_ShowEcho == true and size ~= "" then
                                                                    if radar_1.getConstructType(v) == 'dynamic' then
                                                                                            table.insert(radarDynamic, constructRow)
                                                                                          if radarDynamicWidget[constructRow.widgetDist] ~= nil then
                                                                                                radarDynamicWidget[constructRow.widgetDist] = radarDynamicWidget[constructRow.widgetDist] + 1
                                                                                            else
                                                                                               radarDynamicWidget[constructRow.widgetDist] = 1
                                                                                           end
                                                                                       else
                                                                                           table.insert(radarStatic, constructRow)
                                                                                           if radarStaticWidget[constructRow.widgetDist] ~= nil then
                                                                                               radarStaticWidget[constructRow.widgetDist] = radarStaticWidget[constructRow.widgetDist] + 1
                                                                                            else
                                                                                                radarStaticWidget[constructRow.widgetDist] = 1
                                                                                            end
                                                                                        end
                                        end
                                                        end
                                    -- lockstatus            
                                            if radar_1.getThreatFrom(v) ~= "none" and size ~= "" then
                                                local name = radar_1.getConstructName(v)
                            --local size = radar_1.getConstructCoreSize(v)
                            local dist = math.floor(tonumber(radar_1.getConstructDistance(v)))
                            local seldist = dist 
                                if (dist > 1000 and dist < 100000) then tdist = string.format('%0.1f', seldist/1000) tdists = 'KM' distkm = ' '..string.format('%0.1f', dist/1000)..'km' end
                            if dist < 1000 then tdist = seldist tdists = 'M' distm = ' '..dist..'m' end 
                            if dist > 100000 then tdist = string.format('%0.2f', seldist/200000) tdists = 'SU' distSU = ' '..string.format('%0.1f', dist/1000)..'km ('..string.format('%0.2f', dist/200000)..'SU)' end
                            if distkm ~= 0 then dist = distkm end
                            if distm ~= 0 then dist = distm end
                            if distSU ~= 0 then dist = distSU end 
                            local loclIDT = (""..v..""):sub(-3)
                                        local nameLOCK = ''..loclIDT..' '..name..''
                                                        alarm = true
                                        if radar_1.getThreatFrom(v) == "attacked" then
                                        lockList = lockList..[[
                                                            <div class="table-row th">
                                                                <div class="table-cell"> 
                                                                    ]]..'● ['..size..'] '..nameLOCK.. [[<br><distcolor>]] ..dist.. [[</distcolor>
                                                                </div>
                                                            </div>]]
                                            else
                                             lockList = lockList..[[
                                                            <div class="table-row th">
                                                                <div class="table-cell"> 
                                                                    ]]..'['..size..'] '..nameLOCK.. [[<br><distcolor>]] ..dist.. [[</distcolor>
                                                                </div>
                                                            </div>]]
                                            end
                                                    end
                                            if i > 80 then
                                                i = 0
                                                coroutine.yield()
                                           end
                                        end    
                                            if CFCS_ShowAllies == true then 
                                            if worksInEnvironment == 1 then           
                                                            if friendlies > 0 then
                                                                caption = "<alliescolor>Allies:</alliescolor><br><countcolor>"..friendlies.."</countcolor> <countcolor2>"..conID.."</countcolor2>"
                                                            else
                                                                caption = "<alliescolor>Allies:</alliescolor><br><countcolor>0</countcolor> <countcolor2>"..conID.."</countcolor2>"
                                                            end
                                                        else
                                                            caption = "<alliescolor>Radar Jammed</alliescolor><br><br>"
                                                        end
                                                        htmltext = htmlbasic .. [[
                                                                <style>
                                                .th3>.table-cell3 {
                                                    color: ]]..CFCS_Allied_Names_Color..[[;
                                                    font-weight: bold;
                                                }
                                            </style>
                                                                <div class="table3">
                                                                <div class="table-row3 th3">
                                                                    <div class="table-cell3">
                                                                        ]]..caption..[[
                                                                    </div>
                                                                </div>
                                                                ]]..list..[[
                                                            </div>]]
                                                end
                                            ---
                                        caption = "<targetscolor>Targets:</targetscolor>"
                                        target = targetshtml .. [[
                                            <style>
                                                .th2>.table-cell2 {
                                                    color: ]]..CFCS_Target_Names_Color..[[;
                                                    font-weight: bold;
                                                }
                                            </style>
                                            <div class="table2">
                                                  <div class="table-row2 th2">
                                                    <div class="table-cell2">     
                                                        ]] .. caption .. [[<br><countcolor>]]..idN-friendlies..[[</colorcount>
                                                    </div>
                                                </div>
                                                ]] .. islockList .. [[
                                            </div>]]
                                        local color = alarm and ""..CFCS_Target_Names_Color.."" or "#0cf27b"
                                        caption = alarm and "LOCKED" or "LOCK"
                                        locks = lockhtml .. [[
                                            <style>
                                                .th>.table-cell {
                                                    color: ]] .. color .. [[;
                                                    font-weight: bold;
                                                }
                                            </style>
                                            <div class="table">
                                                  <div class="table-row th">
                                                    <div class="table-cell">     
                                                        ]] .. caption .. [[
                                                    </div>
                                                </div>
                                                ]] .. lockList .. [[
                                            </div>]]  
                    if CFCS_ShowEcho == true then
                                         local dynamic = ''
                                                                            for k,v in pairs(radarDynamicData) do
                                                                                dynamic = dynamic .. '<span style="left:'..k..'px;height:'..v..'px;"></span>'
                                                                            end
                                                                            local static = ''
                                                                            for k,v in pairs(radarStaticData) do
                                                                                static = static .. '<span style="left:'..k..'px;height:'..v..'px;"></span>'
                                                                            end
                                                                            local htmlRadar = htmlRadar .. [[
                                                                            <div class="radar-widget">
                                                                                <div class="d-widget">]] .. dynamic .. [[</div>
                                                                                <div class="s-widget">]] .. static .. [[</div>
                                                                                <div class="labels">
                                                                                    <span style="color: #6fc9ff;">DYNAMIC</span>
                                                                                    <span style="color: #ff8d00;">STATIC</span>
                                                                                </div>
                                                                                ]]..radarWidgetScaleDisplay..[[
                                                                            </div>
                                                                            ]]
                                                                             radarWidget = htmlRadar 
                                else
                                radarWidget = ''
                                end
                                            
                                        hudver = hudvers .. [[<div class="hudversion">]]..hudversion..[[</div>]]
                                            
                                        if map == 0 then
                                        if CFCS_ShowEcho == true then
                                     if rrstatus == false then
                                                if CFCS_ShowAllies == true then  
                                        system.setScreen(htmltext .. target .. locks .. hudver ..targetsele)
                                                else
                                                system.setScreen(target .. locks .. hudver ..targetsele)
                                                end
                                       
                                       else
                                       
                                       if CFCS_ShowAllies == true then  
                                        system.setScreen(htmltext .. target .. locks .. hudver .. radarWidget ..targetsele)
                                                else
                                                system.setScreen(target .. locks .. hudver .. radarWidget ..targetsele)
                                                end
                                       end
                                       
                                                else
                                                if CFCS_ShowAllies == true then  
                                        system.setScreen(htmltext .. target .. locks .. hudver ..targetsele)
                                                else
                                                system.setScreen(target .. locks .. hudver ..targetsele)
                                                end
                                                end
                                                end
                                        coroutine.yield()
                                      end
                        end
                    lockhtml = [[<style>
                    .table {
                      display: table;
                      background: ]]..CFCS_Background_Color..[[;
                      right: 0;
                      top: 12vh;
                      position: fixed;
                    }
                    .table-row {
                      display: table-row;
                    }
                    .table-cell {
                      display: table-cell;
                      padding: 6px;
                      border: 1px solid ]]..CFCS_Border_Color..[[;
                      color: white;
                    }</style>]]
                    targetshtml = [[<style>
                    .table2 {
                     display: table;
                     background: ]]..CFCS_Background_Color..[[;
                     position: fixed;
                     top: 0;
                     left: 0;
                    }
                    .table-row2 {
                      display: table-row;
                      float: left;
                    }
                    .table-cell2 {
                      display: table-cell;
                      padding: 6px;
                      border: 1px solid ]]..CFCS_Border_Color..[[;
                      color: white;
                    }
                    .table-cellS {
                      display: table-cell;
                      padding: 6px;
                      border: 1px solid ]]..CFCS_SelectBorder_Color..[[;
                      color: white;
                    }
                    .thS>.table-cellS {
                                    color: ]]..CFCS_Target_Names_Color..[[;
                                    font-weight: bold;
                                }
                    distcolor {
                      font-weight: bold;
                      color: ]]..CFCS_Distance_Color..[[;
                    }
                    distalliescolor {
                      font-weight: bold;
                      color: ]]..CFCS_Allies_Distance_Color..[[;
                    }
                    speedcolor {
                      font-weight: bold;
                      color: ]]..CFCS_Speed_Color..[[;
                      outline: 1px ]]..CFCS_BorderStyle_Angular_Radial_Speed_Color..[[ ]]..CFCS_Border_Angular_Radial_Speed_Color..[[;  
                    }
                    angcolor {
                      font-weight: bold;
                      color: ]]..CFCS_Angular_Color..[[;
                      outline: 1px ]]..CFCS_BorderStyle_Angular_Radial_Speed_Color..[[ ]]..CFCS_Border_Angular_Radial_Speed_Color..[[;
                    }
                    radcolor {
                      font-weight: bold;
                      color: ]]..CFCS_Radial_Color..[[;
                      outline: 1px ]]..CFCS_BorderStyle_Angular_Radial_Speed_Color..[[ ]]..CFCS_Border_Angular_Radial_Speed_Color..[[; 
                    }
                    countcolor {
                      font-weight: bold;
                      color: ]]..CFCS_Count_Color..[[;
                    }
                    countcolor2 {
                      font-weight: bold;
                      color: ]]..CFCS_Count_Color..[[;
                      float: right;
                    }    
                    chancecolor {
                      color: #6affb1;
                    }
                    targetscolor {
                      color: ]]..CFCS_Targets_Color..[[;
                    }
                    alliescolor {
                      color: ]]..CFCS_Allies_Color..[[;
                    }
                    .txgrenright {
                      font-weight: bold;
                      text-align: right;
                      color: #0cf27b;
                    }
                    </style>]]
                    htmlbasic = [[<style>
                                    .table3 {
                                      display: table;
                                      background: ]]..CFCS_Background_Color..[[;
                                      font-weight: bold;
                                      position: fixed;
                                      bottom: ]]..CFCS_AlliesY..[[vh;
                                      left: 0;
                                    }
                                    .table-row3 {
                                      display: table-row;
                                      float: left;
                                    }
                                    .table-cell3 {
                                      display: table-cell;
                                      padding: 6px;
                                      border: 1px solid ]]..CFCS_Border_Color..[[;
                                      color: white;
                                      font-weight: bold;
                                    }</style>]]
                    hudvers = [[
                                    <style> 
                                    .hudversion {
                                    position: fixed;
                                    bottom: 2.7vh;
                                    color: white;
                                    right: 8vw;
                                    font-family: 'Open Sans';
                                    letter-spacing: 0.5px;
                                    font-size: 1.4em;
                                    font-weight: bold;
                                    }</style>]]
                                    
                htmlRadar = [[
                    <style>
                                    .top-panel {
                                        position: absolute;
                                        top: 160px;
                                        left: 0;
                                        right: 0;
                                        height: 200px;
                                        transform: perspective(1920px) rotateX(-18deg);
                                        transform-origin: top;
                                        display: flex;
                                        justify-content: center;
                                    }
                                    .top-panel .screen-panel {
                                        transform-style: preserve-3d;
                                        transform-origin: top;
                                        transform: perspective(120px) rotateX(-4deg);
                                    }
                                    .screen {
                                        background: rgba(0, 0, 0, .5);
                                        border-radius: 6px;
                                        padding: 5px 10px 10px;
                                        box-sizing: border-box;
                                        position: relative;
                                    }
                                    .screen::after {
                                        content: '';
                                        position: absolute;
                                        top: -6px;
                                        left: -6px;
                                        bottom: -6px;
                                        right: -6px;
                                        background: radial-gradient(110% 160% at 50% -40%, transparent 62%, rgba(255, 255, 255, .23)), radial-gradient(100% 70% at 50% 50%, #094075 -70%, transparent);
                                        border-radius: 10px;
                                        border: 1px solid #b7b7b7;
                                    }
                                    .screen.left::after {
                                        background: radial-gradient(farthest-corner at -20% 100%, transparent 62%, rgba(255, 255, 255, .43)), radial-gradient(farthest-corner at 50% -250%, #094075, transparent);
                                    }
                                    .data {
                                        white-space: nowrap;
                                        text-align: right;
                                    }
                                    .screen.dividers .data:nth-child(1) {
                                        margin-top: 0;
                                        padding-top: 0;
                                        border-top: none;
                                    }
                                    .data {
                                        display: flex;
                                        justify-content: space-between;
                                        align-items: baseline;
                                        width: 100%;
                                    }
                                    .screen.dividers .data {
                                        margin-top: 4px;
                                        border-top: 1px solid #496d8c;
                                        padding-top: 4px;
                                    }
                                    .data-header {
                                        font-weight: bold;
                                        font-size: 14px;
                                        display: flex;
                                        align-items: baseline;
                                        justify-content: space-between;
                                    }
                                    .data-content {
                                        font-size: 20px;
                                        display: flex;
                                        justify-content: flex-end;
                                        align-items: baseline;
                                        font-weight: normal;
                                        color: #edf7ff;
                                        font-family: monospace;
                                        font-weight: bold;
                                    }
                                    .data-unit {
                                        font-size: 12px;
                                        margin-left: 2px;
                                        color: #94ceff;
                                        font-weight: bold;
                                    }
                                    .data.speed {
                                        position: absolute;
                                        top: 7px;
                                        left: -5px;
                                        z-index: 10;
                                        right: -5px;
                                        height: 100%;
                                    }
                                    .speed .data-header {
                                        display: flex;
                                        justify-content: space-between;
                                        margin-top: 5px;
                                        align-items: baseline;
                                    }
                                    .tr-mode {
                                        background: #e9f5ff;
                                        border-radius: 2px;
                                        font-size: 12px;
                                        color: black;
                                        padding: 1px 3px;
                                        font-weight: bold;
                                        margin-right: 5px;
                                        height: 14px;
                                    }
                                    .data-bar {
                                        height: 6px;
                                        background: #284965;
                                        margin-top: 4px;
                                        margin-bottom: 4px;
                                        overflow: hidden;
                                        border-radius: 10px;
                                    }
                                    .data-bar>span {
                                        background: linear-gradient(90deg, transparent calc(100% - 30px), #f1f9ff), repeating-linear-gradient(90deg, #82c5ff 0px, #82c5ff 2px, transparent 2px, transparent 4px);
                                        display: block;
                                        position: relative;
                                        width: 100%;
                                        height: 100%;
                                        border-radius: 10px;
                                    }
                                    .disabled {
                                        opacity: .3;
                                    }
                                    .icon {
                                        fill: #94ceff;
                                        width: 50px;
                                    }
                                    .flex {
                                        display: flex;
                                    }
                                    .flex.align-bottom {
                                        align-items: baseline;
                                    }
                                    .flex.down {
                                        flex-direction: column;
                                    }
                                    .flex.align-top {
                                        align-items: flex-start;
                                    }
                    .flex.align-center {
                        align-items: center;
                    }
                    .flex.justify-end {
                        justify-content: flex-end;
                    }
                    .flex.space-between {
                        justify-content: space-between;
                    }
                    .hologram {
                        display: flex;
                        flex-direction: column;
                        align-items: flex-end;
                        filter: drop-shadow(0px 0px 6px rgba(255, 255, 255, .23)) drop-shadow(0px 0px 20px rgba(0, 0, 0, .20));
                        width: 100%;
                    }
                    .holo-wrap {
                        transform-origin: center right;
                        width: 100%;
                        margin-top: 20px;
                    }
                    .holo-wrap .data {
                        display: flex;
                        justify-content: space-between;
                        align-items: baseline;
                    }
                    .holo-wrap .data-content {
                        font-size: 12px;
                    }
                    .fuel-tank {
                        display: flex;
                        justify-content: space-between;
                        align-items: baseline;
                    }
                    .fuel-gauge {
                        width: 160px;
                        height: 5px;
                        position: relative;
                        background: rgba(255, 255, 255, .12);
                        border-radius: 15px;
                        overflow: hidden;
                    }
                    .fuel-gauge span {
                        position: absolute;
                        top: 0;
                        bottom: 0;
                        left: 0;
                        background: #e7f4ff;
                        border-radius: 10px;
                    }
                    .data.icon-panel {
                        display: flex;
                        align-items: center;
                    }
                    .icon-panel .icon {
                        height: 20px;
                        width: auto;
                        margin: 0px 0px;
                        fill: rgba(200, 230, 255, .16);
                    }
                    .icon-panel .icon.on {
                        fill: #94ceff;
                    }
                    .top-panel .screen-panel {
                        display: flex;
                        align-items: flex-start;
                    }
                    .screen.top-left {
                        width: 470px;
                        border-radius: 0px 0px 0px 6px;
                        margin-right: -40px;
                        height: 90px;
                        padding-right: 60px;
                        z-index: 0;
                    }
                    .top-left::after {
                        background: radial-gradient(110% 160% at 70% -40%, transparent 62%, rgba(255, 255, 255, .23)), radial-gradient(100% 70% at 50% 50%, #094075 -70%, transparent);
                        z-index: -1;
                    }
                    .screen.logo-screen {
                        width: 160px;
                        height: 160px;
                        border-radius: 100px;
                        margin-top: -40px;
                        display: flex;
                        justify-content: center;
                        align-items: center;
                        background: black;
                    }
                    .logo-screen::after {
                        border-radius: 120px;
                        background: radial-gradient(90% 136% at 50% -37%, transparent 86%, rgba(255, 255, 255, .33)), radial-gradient(100% 70% at 50% 65%, #094075 0%, transparent);
                    }
                    .screen.top-right {
                        width: 470px;
                        border-radius: 0px 0px 6px 0px;
                        margin-left: -40px;
                        height: 90px;
                        z-index: -1;
                        padding-left: 60px;
                    }
                    .top-right::after {
                        background: radial-gradient(110% 160% at 30% -40%, transparent 62%, rgba(255, 255, 255, .23)), radial-gradient(100% 70% at 50% 50%, #094075 -70%, transparent);
                        z-index: -1;
                    }
                    .radar-widget {
                        width: 800px;
                        height: 50px;
                        position: absolute;
                        margin-left: auto;
                        margin-right: auto;
                        left: 0;
                        right: 0;
                        top: 8vh;
                        background: radial-gradient(60% 50% at 50% 50%, rgba(60, 166, 255, .34), transparent);
                        border-right: 1px solid;
                        border-left: 1px solid;
                        transform-style: preserve-3d;
                        transform-origin: top;
                        transform: perspective(120px) rotateX(-4deg);
                    }
                    .d-widget,
                    .s-widget {
                        height: 25px;
                        width: 100%;
                        overflow: hidden;
                        position: relative;
                    }
                    .s-widget {
                        border-top: 1px solid;
                    }
                    .d-widget span {
                        background: linear-gradient(0deg, #b6ddff, #3ea7ff 25px);
                        width: 2px;
                        bottom: 0;
                        position: absolute;
                    }
                    .s-widget span {
                        background: linear-gradient(180deg, #ffd322, #ff7600 25px);
                        width: 2px;
                        top: 0;
                        position: absolute;
                    }
                    .measures {
                        display: flex;
                        justify-content: space-between;
                        font-size: 20px;
                    }
                    .measures span:first-child {
                        transform: translateX(-50%);
                    }
                    .measures span:last-child {
                        transform: translateX(50%);
                    }
                    .labels {
                        display: flex;
                        flex-direction: column;
                        position: absolute;
                        right: -60px;
                        top: 0;
                        height: 100%;
                        justify-content: space-evenly;
                        font-size: 12px;
                    }
                    .needle {
                        position: absolute;
                        top: -6px;
                        left: 50%;
                        transform: translateX(-50%);
                        width: 0px;
                        height: 0px;
                        border-left: 8px solid transparent;
                        border-right: 8px solid transparent;
                        border-bottom: 8px solid #ecf6ff;
                        filter: drop-shadow(0px 0px 30px #94ceff) drop-shadow(0px 0px 30px #94ceff) drop-shadow(0px 0px 5px #94ceff);
                        z-index: 1;
                    }
                    .compass {
                        position: absolute;
                        top: 0;
                        left: 0;
                        right: 0;
                        bottom: 0;
                        border-radius: 50%;
                        border: 2px;
                        border-style: solid;
                        transform-origin: center;
                        transform: rotate(0deg);
                    }
                    .compass span {
                        font-size: 20px;
                        position: absolute;
                        top: 50%;
                        left: 50%;
                    }
                    .left-panel {
                        position: absolute;
                        top: 300px;
                        left: 50%;
                        transform: perspective(1920px) translateX(-50%) translateX(-790px) rotateY(50deg) translateZ(20px);
                        transform-origin: center right;
                        display: flex;
                        flex-direction: column;
                        justify-content: flex-start;
                        align-items: flex-start;
                        bottom: 0;
                        width: 200px;
                    }
                    .left-panel.extended {
                        width: 330px;
                        transform: perspective(1920px) translateX(-50%) translateX(-700px) rotateY(50deg) translateZ(20px);
                        display: block;
                        top: 200px;
                    }
                    .pitch-roll-panel {
                        position: absolute;
                        top: 330px;
                        border-left: 2px solid;
                        left: 50%;
                        transform: translateX(-50%) translateX(-465px);
                        height: 300px;
                        overflow: hidden;
                        width: 400px;
                        font-family: monospace;
                        font-weight: bold;
                        filter: drop-shadow(0px 0px 6px rgba(255, 255, 255, .23)) drop-shadow(0px 0px 20px rgba(0, 0, 0, .20));
                    }
                    .pitch {
                        position: absolute;
                        top: 50%;
                        left: 0;
                        transform: translateY(-50%);
                    }
                    .pitch-line {
                        display: block;
                        position: relative;
                        height: 30px;
                    }
                    .pitch-line span {
                        position: absolute;
                        top: 50%;
                        transform: translateY(-50%);
                        display: flex;
                        justify-content: space-between;
                        align-items: center;
                        font-weight: bold;
                    }
                    .pitch-line span::before {
                        content: '';
                        margin-right: 10px;
                        height: 1px;
                        background: #94ceff;
                        flex-grow: 1;
                        width: 10px;
                    }
                    .pitch-roll {
                        position: absolute;
                        top: 50%;
                        left: 0;
                        transform: translateY(-50%);
                        display: flex;
                        flex-wrap: nowrap;
                        align-items: center;
                    }
                    .line {
                        height: 2px;
                        background: #c8e6ff;
                        width: 90px;
                    }
                    .number-display {
                        width: 50px;
                        font-size: 16px;
                        text-align: center;
                        font-weight: bold;
                        color: #c8e6ff;
                        border: 2px solid;
                        height: 21px;
                        margin: 0px 8px;
                        position: relative;
                    }
                    .number-head {
                        font-size: 11px;
                        position: relative;
                        top: -37px;
                        font-weight: bold;
                    }
                    .roll-lines {
                        position: absolute;
                        top: 50%;
                        left: 50%;
                        transform: translate(-50%, -50%) rotate(55deg);
                        width: 80px;
                        height: 80px;
                        border: 14px dashed rgba(200, 230, 255, .08);
                        border-radius: 100px;
                        border-style: dashed;
                    }
                    .roll-lines span {
                        width: 50px;
                        height: 0;
                        border-bottom: 3px dashed rgba(147, 205, 254, .50);
                        position: absolute;
                        top: 50%;
                        left: 50%;
                        transform: translate(-50%, -50%) rotate(-90deg) translateX(95px);
                        z-index: -1;
                    }
                    .roll-lines span:nth-child(2) {
                        transform: translate(-50%, -50%) rotate(0deg) translateX(95px);
                    }
                    .roll-lines span:nth-child(3) {
                        transform: translate(-50%, -50%) rotate(90deg) translateX(95px);
                    }
                    .roll-lines span:nth-child(4) {
                        transform: translate(-50%, -50%) rotate(180deg) translateX(95px);
                    }
                    .ship-orientation {
                        width: 100px;
                        height: 100px;
                        position: relative;
                        margin: 30px auto 0;
                        border-radius: 50%;
                        border: 1px solid;
                    }
                    .ship-orientation-gimbal {
                        width: 100px;
                        height: 100px;
                        position: relative;
                        transform-style: preserve-3d;
                        transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
                    }
                    .plane-z,
                    .plane-y,
                    .plane-x {
                        position: absolute;
                        top: 0;
                        left: 0;
                        right: 0;
                        bottom: 0;
                        border-radius: 50%;
                        /*background: repeating-linear-gradient(0deg, rgba(148,206,255, .28) 0px, rgba(148,206,255, .28) 1px, transparent 1px, transparent 5px);
                        border: 4px solid #94ceff;*/
                        transform-style: preserve-3d;
                    }
                    .plane-z {
                        transform: rotateY(90deg);
                    }
                    .plane-y {
                        transform: rotateX(90deg);
                        border: 2px solid #9dffab;
                    }
                    .plane-x {
                        transform: rotateZ(90deg);
                    }
                    .plane-z::after {
                        content: '';
                        position: absolute;
                        top: -30px;
                        bottom: -30px;
                        left: 50%;
                        transform: translateX(-50%);
                        width: 2px;
                        background: #94ceff;
                        border-radius: 10px;
                    }
                    .orient-z-axis {
                        position: absolute;
                        top: -30px;
                        bottom: -30px;
                        width: 2px;
                        background: #cce8ff;
                        left: 50%;
                        transform: translateX(-50%);
                    }
                    .orient-z-axis::before,
                    .orient-z-axis::after {
                        content: 'S';
                        position: absolute;
                        bottom: -16px;
                        left: 50%;
                        transform: translate(-50%, 0px);
                        font-size: 13px;
                        color: #c8e6ff;
                    }
                    .orient-z-axis::before {
                        content: 'N';
                        bottom: auto;
                        top: -16px;
                    }
                    .plane-x span {
                        position: absolute;
                        top: 0;
                        left: 0;
                        bottom: 0;
                        right: 0;
                        border: 1px solid;
                        border-radius: 50%;
                    }
                    .orient-x-axis {
                        position: absolute;
                        height: 2px;
                        top: 50%;
                        transform: translateY(-50%);
                        left: -30px;
                        right: -30px;
                        background: #cce8ff;
                    }
                    .orient-x-axis::before,
                    .orient-x-axis::after {
                        content: 'W';
                        position: absolute;
                        left: -16px;
                        top: 50%;
                        transform: translate(0%, -50%);
                        font-size: 13px;
                        color: #c8e6ff;
                    }
                    .orient-x-axis::after {
                        content: 'E';
                        right: -16px;
                        left: auto;
                    }
                    .ui {
                        position: absolute;
                        bottom: 0;
                        left: 50%;
                        transform: translateX(-50%);
                        height: 300px;
                        width: 900px;
                        background: rgb(0 0 0 / 53%);
                        border-radius: 5px;
                    }
                    .ui::before {
                        content: '';
                        position: absolute;
                        top: -6px;
                        left: -6px;
                        bottom: -6px;
                        right: -6px;
                        background: radial-gradient(110% 160% at 50% -40%, transparent 62%, rgba(255, 255, 255, .23)), radial-gradient(100% 70% at 50% 50%, #094075 -70%, transparent);
                        border-radius: 10px;
                        border: 1px solid #b7b7b7;
                        pointer-events: none;
                    }
                    .top-bar {
                        height: 25px;
                        background: radial-gradient(50% 150% at 50% 160%, #007ae2, transparent);
                        border-bottom: 1px solid rgba(148, 206, 255, .16);
                        padding: 0px 10px;
                        font-style: italic;
                    }
                    .ui-menu,
                    .ui-content {
                        height: 100%;
                        padding: 10px;
                        box-sizing: border-box;
                        font-family: monospace;
                    }
                    .ui-content {
                        width: 800px;
                    }
                    .ui-menu {
                        width: 100px;
                        background: radial-gradient(80% 120% at 50% 0%, rgba(0, 122, 226, .30), transparent);
                        border-right: 1px solid rgba(148, 206, 255, .16);
                        padding: 0;
                    }
                    .ui-menu>div {
                        padding: 20px 20px 20px;
                        font-size: 16px;
                        text-align: left;
                        border-bottom: 1px solid rgba(148, 206, 255, .20);
                    }
                    .ui-menu>div.active {
                        background: radial-gradient(70% 50% at 100% 50%, rgba(0, 134, 247, .95), transparent);
                        color: #87c8ff;
                    }
                    span.query {
                        padding: 2px 4px;
                        background: #294256;
                    }
                    .system-map {
                        position: absolute;
                        top: 0;
                        width: 100%;
                        height: 100%;
                        background: rgba(7, 44, 82, .81);
                        left: 0;
                    }
                    .planet {
                        width: 20px;
                        height: 20px;
                        border-radius: 50%;
                        border: 2px solid;
                        box-sizing: border-box;
                        background: rgba(148, 206, 255, .29);
                    }
                    .map-actual {
                        position: absolute;
                        width: 100%;
                        height: 100%;
                        top: 0;
                        left: 0;
                        transform-style: preserve-3d;
                    }
                    .map-center {
                        position: absolute;
                        content: '';
                        width: 2000px;
                        height: 2000px;
                        top: 50%;
                        left: 50%;
                        background: repeating-radial-gradient(rgba(0, 17, 35, .23), transparent 112px), repeating-radial-gradient(rgba(148, 206, 255, .34), transparent 75%);
                        border-radius: 50%;
                    }
                    .map-pin {
                        position: absolute;
                        top: 50%;
                        left: 50%;
                    }
                    .map-pin .icon,
                    .map-pin .planet {
                        height: 30px;
                        width: 30px;
                    }
                    .pin-data {
                        position: absolute;
                        bottom: 100%;
                        margin-bottom: 10px;
                        white-space: nowrap;
                        text-align: center;
                        width: 200px;
                        left: 50%;
                        transform: translateX(-50%);
                    }
                    .pin-data .name {
                        font-size: 16px;
                        color: white;
                        line-height: 16px;
                    }
                    .pin-data .units {
                        font-family: monospace;
                        font-size: 14px;
                        font-weight: bold;
                        line-height: 14px;
                    }
                    .map-pin.player {
                        filter: drop-shadow(0px 0px 20px #edf7ff);
                    }
                    .map-pin.player .icon {
                        fill: #ffde56;
                    }
                    .con-size {
                        width: 20px;
                        text-align: center;
                        background: #235f92;
                        margin-right: 4px;
                        color: white;
                        height: 18px;
                    }
                    .warp-scan {
                        width: 15px;
                        height: 15px;
                        border-radius: 50%;
                        box-sizing: border-box;
                        background: #ff3a56;
                    }
                    </style>]]
                                    function drawMap()
                                        asteroid=""
                                        planet=""
                                        asterunits=""
                                        asternumbers=""
                                                        local html5 = ''
                                                        if map == 0 then return html end
                                                            
                                                        html5 = [[
                                                        <div class="system-map">
                                                            <div class="map-actual" style="transform: perspective(1920px) translateZ(-250px);">
                                                                <div class="map-center" style="transform: translate(-50%, -50%) rotateX(]]..yDelta..[[deg) rotateY(0deg) rotateZ(]]..xDelta..[[deg);"></div>
                                                        ]]
                                                        
                                                        for k,v in pairs(helios) do
                                                            local planetBody = helios[v.bodyId]
                                      
                                                local planetName = string.upper(v.name)
                                                
                                                local distance = numFormat.distanceFormat(planetBody:getDistance(core_1.getConstructWorldPos()))
                                            
                                                            local coords = {x=v.center.x + (-v.center.x * mapScale), y=v.center.y + (-v.center.y * mapScale), z=v.center.z + (-v.center.z * mapScale)}
                                                            rotateY3D(coords, xDelta)
                                                            rotateX3D(coords, yDelta)
                                                            local mainPlanet = true;
                                                            local size = planetScale
                                            
                                                             if distance.number > 60 then
                                                             size = planetScale
                                                             else
                                                             size = aliothsize
                                                             end
                                                             
                                                            local display = "block"
                                                            if string.find(planetName, 'MOON') ~= nil then  
                                                               size = moonScale
                                                               display = "none"
                                                            end
                                            
                                                            local planet = [[
                                                            <div class="map-pin" style="display: ]]..display..[[; transform: translate(-50%, -50%) translateX(]]..coords.x..[[px) translateY(]]..coords.y..[[px) translateZ(]]..coords.z..[[px);">
                                                                <div class="pin-data" style="display: ]]..display..[[;">
                                                                    <div class="name">]]..planetName..[[</div>
                                                                    <div class="units">]]..distance.number..[[ ]]..distance.unit..[[</div>
                                                                </div>
                                                                <div class="planet" style="width: ]]..(v.radius/size)..[[px; height: ]]..(v.radius/size)..[[px;"></div>
                                                            </div>
                                                            ]]
                                           
                                                            html5 = html5 .. planet
                                                        end
                                                        
                                                        local shipPosition = core_1.getConstructWorldPos()
                                                        local shipCoords = {x=shipPosition[1] + (-shipPosition[1] * mapScale), y=shipPosition[2] + (-shipPosition[2] * mapScale), z=shipPosition[3] + (-shipPosition[3] * mapScale)}
                                                        rotateY3D(shipCoords, xDelta)
                                                        rotateX3D(shipCoords, yDelta)
                                        --local playerPosition = [[
                                                       -- <div class="map-pin player" style="transform: translate(-50%, -50%) translateX(]]..shipCoords.x..[[px) translateY(]]..shipCoords.y..[[px) translateZ(]]..shipCoords.z..[[px);">
                                                           -- <div class="pin-data">
                                                               -- <div class="name">]]..playerName..[[</div>
                                                           -- </div>
                                                           -- ]]..icons.player()..[[
                                                        --</div>
                                                        --]]
                                        
                                        local playerPosition = [[
                                                        <div class="map-pin player" style="transform: translate(-50%, -50%) translateX(]]..shipCoords.x..[[px) translateY(]]..shipCoords.y..[[px) translateZ(]]..shipCoords.z..[[px);">
                                                            <div class="pin-data">
                                                                <div class="name"></div>
                                                            </div>
                                                            ]]..icons.ship()..[[
                                                        </div>
                                                        ]]
                                                        html5 = html5.. playerPosition
                                        
                                        if asteroidPOS ~= "" then
                                           local shipPosition = asteroidcoord
                                           local distance = numFormat.distanceFormat((vec3(shipPosition) - vec3(core_1.getConstructWorldPos())):len())
                                           local asteroidC = {x=shipPosition[1] + (-shipPosition[1] * mapScale), y=shipPosition[2] + (-shipPosition[2] * mapScale), z=shipPosition[3] + (-shipPosition[3] * mapScale)}
                                           rotateY3D(asteroidC, xDelta)
                                           rotateX3D(asteroidC, yDelta)
                                                     local shipPosition = [[
                                                            <div class="map-pin" style="transform: translate(-50%, -50%) translateX(]]..asteroidC.x..[[px) translateY(]]..asteroidC.y..[[px) translateZ(]]..asteroidC.z..[[px);">
                                                                <div class="pin-data">
                                                                    <div class="name">]]..markerName..[[</div>
                                                                    <div class="units">]]..distance.number..[[ ]]..distance.unit..[[</div>
                                                                </div>
                                                               <div class="warp-scan"></div>
                                                            </div>
                                                            ]]
                                                 html5 = html5..shipPosition..'</div></div>'
                                                    end
                                                    
                    html5 = html5 .. '</div></div>'
                    
                    return html5
                end
                
                local function signedAngleBetween(vec1, vec2, planeNormal)
                                    local normVec1 = vec1:normalize()
                                    local normVec2 = vec2:normalize()
                                    local cosAngle = normVec1:dot(normVec2)
                                    cosAngle = utils.clamp(cosAngle, -1, 1)
                                    local angle = math.acos(cosAngle)
                                    local crossProduct = vec1:cross(vec2)
                                    if crossProduct:dot(planeNormal) < 0 then
                                        return -angle - math.pi
                                    else
                                        return angle + math.pi
                                    end
                                end
                                local function directionToBearing (direction, worldVertical)
                                    local north = vec3(0, 0, 1)
                                    local northOnGround = north:project_on_plane(worldVertical)
                                    local directionOnGround = direction:project_on_plane(worldVertical)
                                    return signedAngleBetween(northOnGround, directionOnGround, worldVertical)
                                end
                                function rotateX3D(point, theta)
                                    theta = theta * math.pi / 180
                                    local sinTheta = math.sin(theta);
                                    local cosTheta = math.cos(theta);
                                    local y = point.y * cosTheta - point.z * sinTheta
                                    local z = point.z * cosTheta + point.y * sinTheta
                                    point.y = y
                                    point.z = z
                                    return point
                                end
                                function rotateY3D(point, theta)
                                    theta = theta * math.pi / 180
                                    local sinTheta = math.sin(theta);
                                    local cosTheta = math.cos(theta);
                                    local x = point.x * cosTheta - point.y * sinTheta
                                    local y = point.y * cosTheta + point.x * sinTheta
                                    point.x = x
                                    point.y = y
                                    return point
                                end
                                function rotateZ3D(point, theta)
                                    theta = theta * math.pi / 180
                                    local sinTheta = math.sin(theta);
                                    local cosTheta = math.cos(theta);
                                    local x = point.x * cosTheta + point.z * sinTheta
                                    local z = point.z * cosTheta - point.x * sinTheta
                                    point.x = x
                                    point.y = y
                                    return point
                                end
                                
                                   targetstyle = [[<style> .telemetry {
                                   margin: 0;
                                    padding: 0;
                                    background: transparent;
                                                    width: 100vw;
                                    height: 100vh;
                                    position: fixed;
                                        top: ]]..CFCS_SelectedY..[[vh;  
                                    right: ]]..CFCS_SelectedX..[[vw;
                                    white-space:nowrap;
                                       width: 400px;
                                   }
                                   .telemetry > div.numbers {
                                    margin-bottom: 10px;
                                    display: flex;
                                    width: 100%;
                                                    justify-content: flex-end;
                                                     margin-bottom: 0px;
                                   }
                                   .telemetry > div.numbers > h2 {
                                    font-size: 10px;
                                    font-weight: 900;
                                    margin-bottom:-3px;
                                    text-align: left;
                                    width: 60px;
                                   }
                                   .telemetry > div.numbers > div {
                                    font-weight: 500;
                                    font-size: 26px;
                                    text-align: right;
                                    color: #6affb1;
                                                    margin-right: 4px;
                                                    margin-top: ]]..CFCS_SelectedTextY..[[px;
                                   }
                                   .telemetry > div.numbers > h2 > span {
                                    display:block;
                                    font-size: 20px;
                                   }
                                                tran {
                                                  color: transparent;
                                                } 
                                                 orangecolor {
                                                  color: orange;
                                                } 
                                                 redcolor {
                                                  font-weight: bold;
                                                  font-family: Helvetica, sans-serif;
                                                  font-size: 12px;
                                                  color: #fc033d;
                                                  text-transform: none;
                                                 }
                                                 greencolor {
                                                  color: #2ebac9;
                                                 }
                                                 powercolor {
                                                 font-size: 15px;
                                                 color: #b6dfed;
                                                 }
                                  </style>]]
                                            cr = coroutine.create(cf)
                                            unit.setTimer("data", 0.1)
                                            unit.setTimer("delay", 1)
        tick:
            args: ["delay"]
            lua: |
                if firstload == 0 then firstload1=firstload1+1 end
                    if firstload1==5 then
                        firstload = 1
                        unit.setTimer("cor", 0.05)
                        unit.stopTimer("delay")
                        end
        tick:
            args: ["radar"]
            lua: |
                                if CFCS_ShowRadar then
                                local _data = updateRadar(radar,CFCS_Radar_Only_Enemies)
                                system.updateData(radarFilter, '{"label":"Filter","value":"'..fm..''..rf..'", "unit": ""}')
                                system.updateData(radarData, _data)
                                end
        tick:
            args: ["data"]
            lua: |
                                data1 = json.decode(weapon_1.getData())
                                if(weapon_size > 1) then wep2 = json.decode(weapon_2.getData()) end
                                if(weapon_size > 2) then wep3 = json.decode(weapon_3.getData()) end
                                if(weapon_size > 3) then wep4 = json.decode(weapon_4.getData()) end
                                if(weapon_size > 4) then wep5 = json.decode(weapon_5.getData()) end
                                if(weapon_size > 5) then wep6 = json.decode(weapon_6.getData()) end
                                
                                zone = data1.properties.outOfZone
                                --if getData ~= nil then constructSelected = getData:match('"selectedConstruct":"([%d]*)"') end
                                --constructSelected = data1.targetConstruct.constructId
                                --name = tostring(data1.name)
                                --target = data1.targetConstruct.name
                                Przerwa=", "
                                HitString = math.floor(data1.properties.hitProbability * 100)
                                if(weapon_size > 1) then HitString = HitString..Przerwa..math.floor(wep2.properties.hitProbability * 100) end
                                if(weapon_size > 2) then HitString = HitString..Przerwa..math.floor(wep3.properties.hitProbability * 100) end
                                if(weapon_size > 3) then HitString = HitString..Przerwa..math.floor(wep4.properties.hitProbability * 100) end
                                if(weapon_size > 4) then HitString = HitString..Przerwa..math.floor(wep5.properties.hitProbability * 100) end
                                if(weapon_size > 5) then HitString = HitString..Przerwa..math.floor(wep6.properties.hitProbability * 100) end
                                probil = HitString
                                newcolor = "#6affb1"
                                znak = ""
                                if dist3>dist1 then dist1=dist3 newcolor = "#00d0ff" znak = "↑" end
                                if dist3<dist1 then dist1=dist3 newcolor = "#fc033d" znak = "↓" end
        tick:
            args: ["cor"]
            lua: |
                                if coroutine.status(cr) ~= "dead" and coroutine.status(cr) == "suspended" then
                                                                   coroutine.resume(cr)
                                                                   end
    radar_1:
        enter(id):
            lua: |
                                if (zone == false and CFCS_Notifications == true) or (CFCS_SafeNotifications == true and CFCS_Notifications == true) then  
                                system.logInfo("sound_play|"..audiopack_location.."contact.mp3|15|100")
                                if firstload==1 then 
                                newid1 = id
                                newTarget1 = 1
                                end
                                end
        leave(id):
            lua: |
                                if (zone == false and CFCS_Notifications == true) or (CFCS_SafeNotifications == true and CFCS_Notifications == true) then  
                                system.logInfo("sound_play|"..audiopack_location.."targetleft.mp3|16|100")
                                    end
    system:
        actionStart:
            args: [light]
            lua: |
                                if db.getStringValue(15) ~= "" then
                                local way = (db.getStringValue(15)):sub(2)
                                system.setWaypoint(way)
                                end
        actionStart:
            args: [option5]
            lua: |
                                if map == 0 then 
                                    map = 1
                                    system.lockView(1)
                                local htmlRadar1 = htmlRadar .. drawMap()
                                system.setScreen(htmlRadar1)
                                    end
        actionStop:
            args: [option5]
            lua: |
                                map = 0
                                system.lockView(0)
        actionLoop:
            args: [option5]
            lua: |
                                if map == 1 then
                                local htmlRadar1 = htmlRadar .. drawMap()
                                system.setScreen(htmlRadar1)
                                xDelta = xDelta + system.getMouseDeltaX()
                                yDelta = yDelta + system.getMouseDeltaY()
                                end
        actionStart:
            args: [groundaltitudeup]
            lua: |
                                CFCS_locked = not CFCS_locked
                                if CFCS_locked then 
                                        --system.print("RADAR LOCKED TARGETS")
                                        rf = ' - LOCKED'
                                    else 
                                        --system.print("RADAR UNLOCKED TARGETS")
                                        rf = ''
                                    end
        actionStart:
            args: [groundaltitudedown]
            lua: |
                                    CFCS_Radar_Only_Enemies = not CFCS_Radar_Only_Enemies
                                    if CFCS_Radar_Only_Enemies then 
                                        --system.print("RADAR - ENEMIES")
                                        fm = 'Enemies'
                                    else 
                                        --system.print("RADAR - ALLIES")
                                        fm = 'Friends'
                                    end
        inputText(text):
            lua: |
                if string.find (text,'m::pos') then
                        asteroidPOS = ""..text..""
                        db.setStringValue(15,asteroidPOS)
                        asteroidcoord = zeroConvertToWorldCoordinates(asteroidPOS)
                        system.print("The marker was added to the map and saved to the databank")
                        end
                    if text == "safe" then
                    if CFCS_SafeNotifications == false then 
                        t_radarEnter = {}
                        CFCS_SafeNotifications = true
                        system.print("SAFE NOTIFICATIONS ON")   
                    else
                        t_radarEnter = {}
                        CFCS_SafeNotifications = false
                        system.print("SAFE NOTIFICATIONS OFF")
                        end
                    end
                    if text == "ang" then
                    if CFCS_Angular_Radial == false then 
                        CFCS_Angular_Radial = true
                        system.print("ANGULAR SPEED ON")
                    else
                        CFCS_Angular_Radial = false
                        system.print("ANGULAR SPEED OFF")
                        end
                    end